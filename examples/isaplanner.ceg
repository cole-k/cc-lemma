(
(data Bool (True False))
(:: True Bool)
(:: False Bool)

(data Nat (Z S))
(:: Z Nat)
(:: S (-> (Nat) Nat))

(data Pair (a b) (Pair))
(:: Pair (-> (a b) (Pair a b)))

(data List (a) (Nil Cons))
(:: Nil  (List a)                    )
(:: Cons (-> (a (List a)) (List a)))

(data Tree (a) (Leaf Node))
(:: Leaf (Tree a)                              )
(:: Node (-> ((Tree a) a (Tree a)) (Tree a)))

(data Tm (a) (Var Cst App))
(:: Var (-> (a                 ) (Tm a)))
(:: Cst (-> (Nat                ) (Tm a)))
(:: App (-> ((Expr a) (Expr a)) (Tm a)))

(data Expr (a) (MkExpr))
(:: MkExpr (-> ((Tm a) Nat) (Expr a)))

(:: id (-> (a) a))
(let id (?x) ?x)

(:: comp (-> ((-> b c) (-> a b) (a)) c))
(let comp (?f ?g ?x) ($ ?f ($ ?g ?x)))

(:: const (-> (a b) a))
(let const (?x ?y) ?x)

(:: ite (-> (Bool a a) a))
(let ite (True ?x ?y ) ?x)
(let ite (False ?x ?y) ?y)
(// (let ite (?b    ?x ?x) ?x))

(:: not (-> (Bool) Bool))
(let not (True) False)
(let not (False) True)

(:: and (-> (Bool Bool) Bool))
(let and (False ?y) False)
(let and (?x False) False)
(let and (True True) True)

(:: add (-> (Nat Nat) Nat))
(let add (Z      ?y) ?y             )
(let add ((S ?x) ?y) (S (add ?x ?y)))

(:: sub (-> (Nat Nat) Nat))
(let sub (?x Z)          ?x         )
(let sub (Z ?y)          Z          )
(let sub ((S ?x) (S ?y)) (sub ?x ?y))

(:: leq (-> (Nat Nat) Bool))
(let leq (Z      ?y) True           )
(let leq ((S ?x) Z ) False          )
(let leq ((S ?x) (S ?y)) (leq ?x ?y))

(:: lt (-> (Nat Nat) Bool))
(let lt (?x     Z     ) False     )
(let lt (Z      (S ?y)) True      )
(let lt ((S ?x) (S ?y)) (lt ?x ?y))

(:: eq (-> (Nat Nat) Bool))
(let eq (Z      Z     ) True      )
(let eq (Z      (S ?y)) False     )
(let eq ((S ?x) Z     ) False     )
(let eq ((S ?x) (S ?y)) (eq ?x ?y))

(:: min (-> (Nat Nat) Nat))
(let min (Z      ?y    ) Z              )
(let min (?x     Z     ) Z              )
(let min ((S ?x) (S ?y)) (S (min ?x ?y)))

(:: max (-> (Nat Nat) Nat))
(let max (Z      ?y    ) ?y             )
(let max (?x     Z     ) ?x             )
(let max ((S ?x) (S ?y)) (S (max ?x ?y)))

(:: null (-> ((List a)) Bool))
(let null (Nil          ) True)
(let null ((Cons ?x ?xs)) False)

(:: len (-> ((List a)) Nat))
(let len (Nil          ) Z            )
(let len ((Cons ?x ?xs)) (S (len ?xs)))

(:: elem (-> (Nat (List Nat)) Bool))
(let elem (?n Nil          ) False                            )
(let elem (?n (Cons ?x ?xs)) (ite (eq ?n ?x) True (elem ?n ?xs)))

(:: take (-> (Nat (List a)) (List a)))
(let take (Z      ?xs          ) Nil                    )
(let take ((S ?n) Nil          ) Nil                    )
(let take ((S ?n) (Cons ?x ?xs)) (Cons ?x (take ?n ?xs)))

(:: drop (-> (Nat (List a)) (List a)))
(let drop (Z      ?xs          ) ?xs          )
(let drop ((S ?n) Nil          ) Nil          )
(let drop ((S ?n) (Cons ?x ?xs)) (drop ?n ?xs))

(:: count (-> (Nat (List Nat)) Nat))
(let count (?x Nil          ) Z)
(let count (?x (Cons ?y ?ys)) (ite (eq ?x ?y) (S (count ?x ?ys)) (count ?x ?ys)))

(:: append (-> ((List a) (List a)) (List a)))
(let append (Nil           ?ys) ?ys                       )
(let append ((Cons ?x ?xs) ?ys) (Cons ?x (append ?xs ?ys)))

(:: last (-> ((List a)) a))
(let last ((Cons ?x Nil)          ) ?x                  )
(let last ((Cons ?x (Cons ?y ?ys))) (last (Cons ?y ?ys)))

(:: lastOfTwo (-> ((List a) (List a)) a))
(let lastOfTwo (?xs Nil          ) (last ?xs)          )
(let lastOfTwo (?xs (Cons ?y ?ys)) (last (Cons ?y ?ys)))

(:: butlast (-> ((List a)) (List a)))
(let butlast (Nil                    ) Nil                              )
(let butlast ((Cons ?x Nil)          ) Nil                              )
(let butlast ((Cons ?x (Cons ?y ?ys))) (Cons ?x (butlast (Cons ?y ?ys))))

(:: butlastConcat (-> ((List a) (List a)) (List a)))
(let butlastConcat (?xs Nil          ) (butlast ?xs)                       )
(let butlastConcat (?xs (Cons ?y ?ys)) (append ?xs (butlast (Cons ?y ?ys))))

(:: map (-> ((-> (a) b) (List a)) (List b)))
(let map (?f Nil          ) Nil                          )
(let map (?f (Cons ?x ?xs)) (Cons ($ ?f ?x) (map ?f ?xs)))

(:: filter (-> ((-> (a) Bool) (List a)) (List a)))
(let filter (?p Nil          ) Nil                                                     )
(let filter (?p (Cons ?x ?xs)) (ite ($ ?p ?x) (Cons ?x (filter ?p ?xs)) (filter ?p ?xs)))

(:: dropWhile (-> ((-> (a) Bool) (List a)) (List a)))
(let dropWhile (?p Nil          ) Nil                                             )
(let dropWhile (?p (Cons ?x ?xs)) (ite ($ ?p ?x) (dropWhile ?p ?xs) (Cons ?x ?xs)))

(:: takeWhile (-> ((-> (a) Bool) (List a)) (List a)))
(let takeWhile (?p Nil          ) Nil                                             )
(let takeWhile (?p (Cons ?x ?xs)) (ite ($ ?p ?x) (Cons ?x (takeWhile ?p ?xs)) Nil))

(:: delete (-> (Nat (List Nat)) (List Nat)))
(let delete (?n Nil          ) Nil                                                       )
(let delete (?n (Cons ?x ?xs)) (ite (eq ?n ?x) (delete ?n ?xs) (Cons ?x (delete ?n ?xs))))

(:: ins (-> (Nat (List Nat)) (List Nat)))
(let ins (?n Nil          ) (Cons ?n Nil)                                                  )
(let ins (?n (Cons ?x ?xs)) (ite (lt ?n ?x) (Cons ?n (Cons ?x ?xs)) (Cons ?x (ins ?n ?xs))))

(:: insort (-> (Nat (List Nat)) (List Nat)))
(let insort (?n Nil          ) (Cons ?n Nil)                                                      )
(let insort (?n (Cons ?x ?xs)) (ite (leq ?n ?x) (Cons ?n (Cons ?x ?xs)) (Cons ?x (insort ?n ?xs))))

(:: ins1 (-> (Nat (List Nat)) (List Nat)))
(let ins1 (?n Nil          ) (Cons ?n Nil)                                                   )
(let ins1 (?n (Cons ?x ?xs)) (ite (eq ?n ?x) (Cons ?n (Cons ?x ?xs)) (Cons ?x (ins1 ?n ?xs))))

(:: sort (-> ((List Nat)) (List Nat)))
(let sort (Nil          ) Nil                   )
(let sort ((Cons ?x ?xs)) (insort ?x (sort ?xs)))

(:: sorted (-> ((List Nat)) Bool))
(let sorted (Nil                    ) True                                )
(let sorted ((Cons ?x Nil)          ) True                                )
(let sorted ((Cons ?x (Cons ?y ?ys))) (and (leq ?x ?y) (sorted (Cons ?y ?ys))))

(:: zip (-> ((List a) (List b)) (List (Pair a b))))
(let zip (Nil           ?ys          ) Nil                              )
(let zip (?xs           Nil          ) Nil                              )
(let zip ((Cons ?x ?xs) (Cons ?y ?ys)) (Cons (Pair ?x ?y) (zip ?xs ?ys)))

(:: zipConcat (-> (a (List a) (List b)) (List (Pair a b))))
(let zipConcat (?x ?xs Nil          ) Nil)
(let zipConcat (?x ?xs (Cons ?y ?ys)) (Cons (Pair ?x ?y) (zip ?xs ?ys)))

(:: rev (-> ((List a)) (List a)))
(let rev (Nil          ) Nil                             )
(let rev ((Cons ?x ?xs)) (append (rev ?xs) (Cons ?x Nil)))

(:: height (-> ((Tree a)) Nat))
(let height (Leaf           ) Z                                )
(let height ((Node ?l ?x ?r)) (S (max (height ?l) (height ?r))))

(:: mirror (-> ((Tree a)) (Tree a)))
(let mirror (Leaf           ) Leaf                             )
(let mirror ((Node ?l ?x ?r)) (Node (mirror ?r) ?x (mirror ?l)))

(:: mapE (-> ((-> a b) (Expr a)) (Expr b)))
(let mapE (?f (MkExpr ?t ?n)) (MkExpr (mapT ?f ?t) ?n))

(:: mapT (-> ((-> a b) (Tm a)) (Tm b)))
(let mapT (?f (Var ?x)     ) (Var ($ ?f ?x))                  )
(let mapT (?f (Cst ?n)     ) (Cst ?n)                         )
(let mapT (?f (App ?e1 ?e2)) (App (mapE ?f ?e1) (mapE ?f ?e2)))

(:: argsE (-> ((Expr a)) (List (Expr a))))
(let argsE ((MkExpr ?t ?n)) (argsT ?t))

(:: argsT (-> ((Tm a)) (List (Expr a))))
(let argsT ((Var ?x)     ) Nil)
(let argsT ((Cst ?n)     ) Nil)
(let argsT ((App ?e1 ?e2)) (Cons ?e2 (argsE ?e1)))

(:: headE (-> ((Expr a)) (Expr a)))
(let headE ((MkExpr (Var ?x) ?n)     ) (MkExpr (Var ?x) ?n))
(let headE ((MkExpr (Cst ?x) ?n)     ) (MkExpr (Cst ?x) ?n))
(let headE ((MkExpr (App ?e1 ?e2) ?n)) (headE ?e1)         )

(=== goal_01 (n xs) (Nat (List a))
  (append (take n xs) (drop n xs))
  xs
)

(=== goal_02 (n xs ys) (Nat (List Nat) (List Nat))
  (add (count n xs) (count n ys))
  (count n (append xs ys))
)

(=== goal_03 (n xs ys) (Nat (List Nat) (List Nat))
  (leq (count n xs) (count n (append xs ys)))
  True
)

(=== goal_04 (n xs) (Nat (List Nat))
  (add (S Z) (count n xs))
  (count n (Cons n xs))
)

(// This is an example where a termination check needs semantic knowledge!)
(==> goal_05 (xs n x) ((List Nat) Nat Nat)
  n
  x
  (add (S Z) (count n xs))
  (count n (Cons x xs))
)

(=== goal_06 (n m) (Nat Nat)
  (sub n (add n m))
  Z
)

(=== goal_07 (n m) (Nat Nat)
  (sub (add n m) n)
  m
)

(=== goal_08 (k m n) (Nat Nat Nat)
  (sub (add k m) (add k n))
  (sub m n)
)

(=== goal_09 (i j k) (Nat Nat Nat)
  (sub (sub i j) k)
  (sub i (add j k))
)

(=== goal_10 (m) (Nat)
  (sub m m)
  Z
)

(=== goal_11 (xs) ((List a))
  (drop Z xs)
  xs
)

(=== goal_12 (n f xs) (Nat (-> a b) (List a))
  (drop n (map f xs))
  (map f (drop n xs))
)

(=== goal_13 (n x xs) (Nat a (List a))
  (drop (S n) (Cons x xs))
  (drop n xs)
)

(=== goal_14 (p xs ys) ((-> a Bool) (List a) (List a))
  (filter p (append xs ys))
  (append (filter p xs) (filter p ys))
)

(=== goal_15 (x xs) (Nat (List Nat))
  (len (ins x xs))
  (S (len xs))
)

(==> goal_16 (x xs) (Nat (List Nat))
  xs
  Nil
  (last (Cons x xs))
  x
)

(=== goal_17 (n) (Nat)
  (leq n Z)
  (eq n Z)
)

(=== goal_18 (i m) (Nat Nat)
  (lt i (S (add i m)))
  True
)

(=== goal_19 (n xs) (Nat (List a))
  (len (drop n xs))
  (sub (len xs) n)
)

(=== goal_20 (xs) ((List Nat))
  (len (sort xs))
  (len xs)
)

(=== goal_21 (n m) (Nat Nat)
  (leq n (add n m))
  True
)

(=== goal_22 (a b c) (Nat Nat Nat)
  (max (max a b) c)
  (max a (max b c))
)

(=== goal_23 (a b) (Nat Nat)
  (max a b)
  (max b a)
)

(=== goal_24 (a b) (Nat Nat)
  (eq (max a b) a)
  (leq b a)
)

(=== goal_25 (a b) (Nat Nat)
  (eq (max a b) b)
  (leq a b)
)

(==> goal_26 (x xs ys) (Nat (List Nat) (List Nat))
  (elem x xs)
  True
  (elem x (append xs ys))
  True
)

(==> goal_27 (xs ys x) ((List Nat) (List Nat) Nat)
  (elem x ys)
  True
  (elem x (append xs ys))
  True
)

(=== goal_28 (x xs) (Nat (List Nat))
  (elem x (append xs (Cons x Nil)))
  True
)

(=== goal_29 (x xs) (Nat (List Nat))
  (elem x (ins1 x xs))
  True
)

(=== goal_30 (x xs) (Nat (List Nat))
  (elem x (ins x xs))
  True
)

(=== goal_31 (a b c) (Nat Nat Nat)
  (min (min a b) c)
  (min a (min b c))
)

(=== goal_32 (a b) (Nat Nat)
  (min a b)
  (min b a)
)

(=== goal_33 (a b) (Nat Nat)
  (eq (min a b) a)
  (leq a b)
)

(=== goal_34 (a b) (Nat Nat)
  (eq (min a b) b)
  (leq b a)
)

(=== goal_35 (xs) ((List a))
  (dropWhile ($ const False) xs)
  xs
)

(=== goal_36 (xs) ((List a))
  (takeWhile ($ const True) xs)
  xs
)

(=== goal_37 (x xs) (Nat (List Nat))
  (not (elem x (delete x xs)))
  (True)
)

(=== goal_38 (n xs) (Nat (List Nat))
  (count n (append xs (Cons n Nil)))
  (S (count n xs))
)

(=== goal_39 (n x xs) (Nat Nat (List Nat))
  (add (count n (Cons x Nil)) (count n xs))
  (count n (Cons x xs))
)

(=== goal_40 (xs) ((List a))
  (take Z xs)
  Nil
)

(=== goal_41 (n f xs) (Nat (-> a b) (List a))
  (take n (map f xs))
  (map f (take n xs))
)

(=== goal_42 (n x xs) (Nat a (List a))
  (take (S n) (Cons x xs))
  (Cons x (take n xs))
)

(=== goal_43 (p xs) ((-> a Bool) (List a))
  (append (takeWhile p xs) (dropWhile p xs))
  xs
)

(=== goal_44 (x xs ys) (a (List a) (List a))
  (zip (Cons x xs) ys)
  (zipConcat x xs ys)
)

(=== goal_45 (x y xs ys) (a b (List a) (List b))
  (zip (Cons x xs) (Cons y ys))
  (Cons (Pair x y) (zip xs ys))
)

(=== goal_46 (xs) ((List a))
  (zip Nil xs)
  Nil
)

(// Needs ((=> (max ?a ?b) (max ?b ?a))))
(=== goal_47 (t) ((Tree a))
    (height (mirror t))
    (height t)
)

(// This is an example that requires explicitly grounding the premise)
(==> goal_48 (xs) ((List a))
  (not (null xs))
  True
  (append (butlast xs) (Cons (last xs) Nil))
  xs
)

(=== goal_49 (xs ys) ((List a) (List a))
  (butlast (append xs ys))
  (butlastConcat xs ys)
)

(=== goal_50 (xs) ((List a))
  (butlast xs)
  (take (sub (len xs) (S Z)) xs)
)

(=== goal_51 (xs x) ((List a) a)
  (butlast (append xs (Cons x Nil)))
  xs
)

(=== goal_52 (n xs) (Nat (List Nat))
  (count n xs)
  (count n (rev xs))
)

(=== goal_53 (n xs) (Nat (List Nat))
  (count n xs)
  (count n (sort xs))
)

(=== goal_54 (n m) (Nat Nat)
  (sub (add m n) n)
  m
)

(=== goal_55 (i j k) (Nat Nat Nat)
  (sub (sub i j) k)
  (sub (sub i k) j)
)

(=== goal_56 (n xs ys) (Nat (List a) (List a))
  (drop n (append xs ys))
  (append (drop n xs) (drop (sub n (len xs)) ys))
)

(=== goal_57 (n m xs) (Nat Nat (List a))
  (drop n (drop m xs))
  (drop (add n m) xs)
)

(=== goal_58 (n m xs) (Nat Nat (List a))
  (drop n (take m xs))
  (take (sub m n) (drop n xs))
)

(=== goal_59 (n xs ys) (Nat (List a) (List a))
  (drop n (zip xs ys))
  (zip (drop n xs) (drop n ys))
)

(==> goal_60 (xs ys) ((List a) (List a))
  ys
  Nil
  (last (append xs ys))
  (last xs)
)

(==> goal_61 (xs ys) ((List a) (List a))
  (not (null ys))
  True
  (last (append xs ys))
  (last ys)
)

(=== goal_62 (xs ys) ((List a) (List a))
  (last (append xs ys))
  (lastOfTwo xs ys)
)

(==> goal_63 (xs x) ((List a) a)
  (not (null xs))
  True
  (last (Cons x xs))
  (last xs)
)

(==> goal_64 (n xs) (Nat (List a))
  (lt n (len xs))
  True
  (last (drop n xs))
  (last xs)
)

(=== goal_65 (x xs) (a (List a))
  (last (append xs (Cons x Nil)))
  x
)

(=== goal_66 (i m) (Nat Nat)
  (lt i (S (add m i)))
  True
)

(=== goal_67 (p xs) ((-> a Bool) (List a))
  (leq (len (filter p xs)) (len xs))
  True
)

(=== goal_68 (xs) ((List a))
  (len (butlast xs))
  (sub (len xs) (S Z))
)

(=== goal_69 (n xs) (Nat (List Nat))
  (leq (len (delete n xs)) (len xs))
  True
)

(=== goal_70 (n m) (Nat Nat)
  (leq n (add m n))
  True
)

(==> goal_71 (m n) (Nat Nat)
  (leq m n)
  True
  (leq m (S n))
  True
)

(==> goal_72 (x y xs) (Nat Nat (List Nat))
  (lt x y)
  True
  (elem x (ins y xs))
  (elem x xs)
)

(==> goal_73 (x y xs) (Nat Nat (List Nat))
  (eq x y)
  False
  (elem x (ins y xs))
  (elem x xs)
)

(=== goal_74 (i xs) (Nat (List a))
  (rev (drop i xs))
  (take (sub (len xs) i) (rev xs))
)

(=== goal_75 (p xs) ((-> a Bool) (List a))
  (rev (filter p xs))
  (filter p (rev xs))
)

(=== goal_76 (i xs) (Nat (List a))
  (rev (take i xs))
  (drop (sub (len xs) i) (rev xs))
)

(==> goal_77 (n m xs) (Nat Nat (List Nat))
  (eq n m)
  False
  (count n (append xs (Cons m Nil)))
  (count n xs)
)

(=== goal_78 (n m xs) (Nat Nat (List Nat))
  (add (count n xs) (count n (Cons m Nil)))
  (count n (Cons m xs))
)

(// Needs (not (leq x y)) ==> (leq y x)?)
(==> goal_79 (xs x) ((List Nat) Nat)
  (sorted xs)
  True
  (sorted (insort x xs))
  True
)

(=== goal_80 (xs) ((List Nat))
  (sorted (sort xs))
  True
)

(=== goal_81 (n m k) (Nat Nat Nat)
  (sub (sub (S m) n) (S k))
  (sub (sub m n) k)
)

(=== goal_82 (n xs ys) (Nat (List a) (List a))
  (take n (append xs ys))
  (append (take n xs) (take (sub n (len xs)) ys))
)

(=== goal_83 (n m xs) (Nat Nat (List a))
  (take n (drop m xs))
  (drop m (take (add n m) xs))
)

(=== goal_84 (n xs ys) (Nat (List a) (List a))
  (take n (zip xs ys))
  (zip (take n xs) (take n ys))
)

(=== goal_85 (xs ys zs) ((List a) (List a) (List a))
  (zip (append xs ys) zs)
  (append (zip xs (take (len xs) zs)) (zip ys (drop (len xs) zs)))
)

(=== goal_86 (xs ys zs) ((List a) (List a) (List a))
  (zip xs (append ys zs))
  (append (zip (take (len ys) xs) ys) (zip (drop (len ys) xs) zs))
)

(==> goal_87 (xs ys) ((List a) (List a))
  (len xs)
  (len ys)
  (zip (rev xs) (rev ys))
  (rev (zip xs ys))
)

)
