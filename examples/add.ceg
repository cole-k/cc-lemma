(
(data Nat (Z S))
(:: Z Nat)
(:: S (-> (Nat) Nat))

(:: add (-> (Nat Nat) Nat))
(let add (Z ?y) ?y)
(let add ((S ?x) ?y) (S (add ?x ?y)))

(:: addAccum (-> (Nat Nat Nat) Nat))
(let addAccum (Z Z ?acc) ?acc)
(let addAccum (Z (S ?n) ?acc) (addAccum Z ?n (S ?acc)))
(let addAccum ((S ?m) ?n ?acc) (addAccum ?m ?n (S ?acc)))

(:: addAccum2 (-> (Nat Nat) Nat))
(let addAccum2 (?m ?n) (addAccum ?m ?n Z))

(=== add_accum2_commutative (a b) (Nat Nat)
  (addAccum2 a b)
  (addAccum2 b a)
)

)
