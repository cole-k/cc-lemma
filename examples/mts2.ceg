(
(data Bool (True False))
(:: True Bool)
(:: False Bool)
(data Nat (Z S))
(:: Z Nat)
(:: S (-> (Nat) Nat))
(:: plus (-> (Nat Nat) Nat))
(let plus (Z ?y) ?y)
(let plus ((S ?x) ?y) (S (plus ?x ?y)))
(:: max (-> (Nat Nat) Nat))
(let max (Z ?y) ?y)
(let max (?x Z) ?x)
(let max ((S ?x) (S ?y)) (S (max ?x ?y)))
(data List (a) (Nil Cons))
(:: Nil  (List a))
(:: Cons (-> (a (List a)) (List a)))
(:: tails (-> ((List a)) (List (List a))))
(let tails (Nil)      (Cons Nil Nil)             )
(let tails ((Cons ?h ?t)) (Cons (Cons ?h ?t) (tails ?t)))
(:: sum (-> ((List Nat)) Nat))
(let sum (Nil)      Z            )
(let sum ((Cons ?h ?t)) (plus ?h (sum ?t)))
(:: map (-> ((-> (a) b) (List a)) (List b)))
(let map (?f Nil          ) Nil                          )
(let map (?f (Cons ?x ?xs)) (Cons ($ ?f ?x) (map ?f ?xs)))
(:: maximum (-> ((List Nat)) Nat))
(let maximum (Nil)      Z                )
(let maximum ((Cons ?h ?t)) (max ?h (maximum ?t)))
(data Pair (a b) (MakePair))
(:: MakePair (-> (a b) (Pair a b)))
(:: fst (-> ((Pair a b)) a))
(let fst ((MakePair ?x ?y)) ?x)
(:: snd (-> ((Pair a b)) b))
(let snd ((MakePair ?x ?y)) ?y)
(:: mts (-> ((List Nat)) (Pair Nat Nat)))
(let mts (Nil)      (MakePair Z Z)          )
(let mts ((Cons ?h ?t)) (MakePair
    (max (fst (mts ?t)) (plus ?h (snd (mts ?t))))
    (plus ?h (snd (mts ?t)))
))
(=== mts_optimize (xs) ((List Nat))
    (maximum (map sum (tails xs))) (fst (mts xs))
)
)
