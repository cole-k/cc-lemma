(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data List (Elt Cons))
  (:: Elt (-> (Nat) List))
  (:: Cons (-> (Nat List) List))
  (data CList (Single Concat))
  (:: Single (-> (Nat) CList))
  (:: Concat (-> (Nat CList CList) CList))
  (:: tf1 (-> (List List) List))
  (let tf1 (?tv5 (Elt ?tv6)) (Cons ?tv6 ?tv5))
  (let tf1 (?tv5 (Cons ?tv7 ?tv8)) (Cons ?tv7 (tf0 ?tv8 ?tv5)))
  (:: tf0 (-> (List List) List))
  (let tf0 (?tv2 ?tv3) (tf1 ?tv3 ?tv2))
  (:: cat (-> (List List) List))
  (let cat (?tv0 ?tv1) (tf0 ?tv0 ?tv1))
  (:: tf3 (-> (CList) List))
  (let tf3 ((Single ?tv12)) (Elt ?tv12))
  (let tf3 ((Concat ?tv13 ?tv14 ?tv15)) (cat (tf2 ?tv14) (tf2 ?tv15)))
  (:: tf2 (-> (CList) List))
  (let tf2 (?tv10) (tf3 ?tv10))
  (:: repr (-> (CList) List))
  (let repr (?tv9) (tf2 ?tv9))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: ite2 (-> (Bool Nat Nat) Nat))
  (let ite2 (True ?x ?y) ?x)
  (let ite2 (False ?x ?y) ?y)
  (:: max (-> (Nat Nat) Nat))
  (let max (?tv16 ?tv17) (ite2 (lq ?tv16 ?tv17) ?tv17 ?tv16))
  (:: min (-> (Nat Nat) Nat))
  (let min (?tv18 ?tv19) (ite2 (lq ?tv18 ?tv19) ?tv18 ?tv19))
  (:: tf5 (-> (CList) Nat))
  (let tf5 ((Single ?tv23)) ?tv23)
  (let tf5 ((Concat ?tv24 ?tv25 ?tv26)) (max (tf4 ?tv25) (tf4 ?tv26)))
  (:: tf4 (-> (CList) Nat))
  (let tf4 (?tv21) (tf5 ?tv21))
  (:: tf7 (-> (CList) Nat))
  (let tf7 ((Single ?tv29)) ?tv29)
  (let tf7 ((Concat ?tv30 ?tv31 ?tv32)) (min (tf6 ?tv31) (tf6 ?tv32)))
  (:: tf6 (-> (CList) Nat))
  (let tf6 (?tv27) (tf7 ?tv27))
  (:: and (-> (Bool Bool) Bool))
  (let and (False ?x) False)
  (let and (?x False) False)
  (let and (True True) True)
  (:: tf9 (-> (CList) Bool))
  (let tf9 ((Single ?tv35)) True)
  (let tf9 ((Concat ?tv36 ?tv37 ?tv38)) (and (and (lq (tf4 ?tv37) ?tv36) (lq ?tv36 (tf6 ?tv38))) (and (tf8 ?tv37) (tf8 ?tv38))))
  (:: tf8 (-> (CList) Bool))
  (let tf8 (?tv33) (tf9 ?tv33))
  (:: isparti (-> (CList) Bool))
  (let isparti (?tv20) (tf8 ?tv20))
  (data Tuple3 (MakeTuple3))
  (:: MakeTuple3 (-> (Nat Bool) Tuple3))
  (:: geq (-> (Nat Nat) Bool))
  (let geq (Zero (Succ ?x)) False)
  (let geq (?x Zero) True)
  (let geq ((Succ ?x) (Succ ?y)) (geq ?x ?y))
  (:: snd3 (-> (Tuple3) Bool))
  (let snd3 ((MakeTuple3 ?x0 ?x1)) ?x1)
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: fst3 (-> (Tuple3) Nat))
  (let fst3 ((MakeTuple3 ?x0 ?x1)) ?x0)
  (:: tf11 (-> (List) Tuple3))
  (let tf11 ((Elt ?tv42)) (MakeTuple3 (max Zero ?tv42) (geq ?tv42 Zero)))
  (let tf11 ((Cons ?tv43 ?tv44)) (MakeTuple3 (ite2 (and (geq ?tv43 Zero) (snd3 (tf10 ?tv44))) (plus (fst3 (tf10 ?tv44)) ?tv43) (fst3 (tf10 ?tv44))) (and (geq ?tv43 Zero) (snd3 (tf10 ?tv44)))))
  (:: tf10 (-> (List) Tuple3))
  (let tf10 (?tv40) (tf11 ?tv40))
  (:: spec (-> (List) Nat))
  (let spec (?tv39) (fst3 (tf10 ?tv39)))
  (:: leq (-> (Nat Nat) Bool))
  (let leq (Zero ?x) True)
  (let leq ((Succ ?x) Zero) False)
  (let leq ((Succ ?x) (Succ ?y)) (leq ?x ?y))
  (:: ite4 (-> (Bool CList CList) CList))
  (let ite4 (True ?x ?y) ?x)
  (let ite4 (False ?x ?y) ?y)
  (:: tf13 (-> (CList CList) CList))
  (let tf13 (?tv48 (Single ?tv49)) ?tv48)
  (let tf13 (?tv48 (Concat ?tv50 ?tv51 ?tv52)) (ite4 (leq ?tv50 Zero) (Concat ?tv50 ?tv51 (tf12 ?tv52)) (Concat ?tv50 (tf12 ?tv51) (tf12 ?tv52))))
  (:: tf12 (-> (CList) CList))
  (let tf12 (?tv46) (tf13 ?tv46 ?tv46))
  (:: target (-> (CList) CList))
  (let target (?tv45) (tf12 ?tv45))
  (:: main (-> (CList) Nat))
  (let main (?tv53) (ite2 (isparti ?tv53) (spec (repr (target ?tv53))) Zero))
  (:: tf15 (-> (CList) Nat))
  (let tf15 ((Single ?tv57)) (max ?tv57 Zero))
  (let tf15 ((Concat ?tv58 ?tv59 ?tv60)) (ite2 (leq ?tv58 Zero) (tf14 ?tv60) (plus (tf14 ?tv60) (tf14 ?tv59))))
  (:: tf14 (-> (CList) Nat))
  (let tf14 (?tv55) (tf15 ?tv55))
  (:: targetNew (-> (CList) Nat))
  (let targetNew (?tv54) (tf14 ?tv54))
  (:: mainNew (-> (CList) Nat))
  (let mainNew (?tv61) (ite2 (isparti ?tv61) (targetNew ?tv61) Zero))
  (=== optimize (inp0) (CList) (main inp0) (mainNew inp0))
)
