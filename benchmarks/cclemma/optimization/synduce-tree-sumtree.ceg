(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data Tree (Nil Node))
  (:: Nil (-> (Unit) Tree))
  (:: Node (-> (Nat Tree Tree) Tree))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: tf1 (-> (Nat Tree) Nat))
  (let tf1 (?tv4 (Nil ?tv5)) ?tv4)
  (let tf1 (?tv4 (Node ?tv6 ?tv7 ?tv8)) (tf0 (plus (tf0 ?tv4 ?tv7) ?tv6) ?tv8))
  (:: tf0 (-> (Nat Tree) Nat))
  (let tf0 (?tv1 ?tv2) (tf1 ?tv1 ?tv2))
  (:: spec (-> (Tree) Nat))
  (let spec (?tv0) (tf0 Zero ?tv0))
  (:: tf3 (-> (Tree) Tree))
  (let tf3 ((Nil ?tv12)) (Nil Null))
  (let tf3 ((Node ?tv13 ?tv14 ?tv15)) (Node ?tv13 (tf2 ?tv14) (tf2 ?tv15)))
  (:: tf2 (-> (Tree) Tree))
  (let tf2 (?tv10) (tf3 ?tv10))
  (:: repr (-> (Tree) Tree))
  (let repr (?tv9) (tf2 ?tv9))
  (:: main (-> (Tree) Nat))
  (let main (?tv16) (spec (repr ?tv16)))
  (:: tf5 (-> (Tree) Nat))
  (let tf5 ((Nil ?tv20)) Zero)
  (let tf5 ((Node ?tv21 ?tv22 ?tv23)) (plus (tf4 ?tv23) (plus (tf4 ?tv22) ?tv21)))
  (:: tf4 (-> (Tree) Nat))
  (let tf4 (?tv18) (tf5 ?tv18))
  (:: reprNew (-> (Tree) Nat))
  (let reprNew (?tv17) (tf4 ?tv17))
  (:: mainNew (-> (Tree) Nat))
  (let mainNew (?tv24) (reprNew ?tv24))
  (=== optimize (inp0) (Tree) (main inp0) (mainNew inp0))
)
