(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data List (Nil Cons))
  (:: Nil (-> (Unit) List))
  (:: Cons (-> (Nat List) List))
  (data NList (Nnil Ncons))
  (:: Nnil (-> (Unit) NList))
  (:: Ncons (-> (List NList) NList))
  (:: max (-> (Nat Nat) Nat))
  (let max (Zero ?x) ?x)
  (let max (?x Zero) ?x)
  (let max ((Succ ?x) (Succ ?y)) (Succ (max ?x ?y)))
  (:: tf1 (-> (List) Nat))
  (let tf1 ((Nil ?tv5)) Zero)
  (let tf1 ((Cons ?tv6 ?tv7)) (max ?tv6 (tf0 ?tv7)))
  (:: tf0 (-> (List) Nat))
  (let tf0 (?tv3) (tf1 ?tv3))
  (:: maximum (-> (List) Nat))
  (let maximum (?tv2) (tf0 ?tv2))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: times (-> (Nat Nat) Nat))
  (let times (Zero ?x) Zero)
  (let times ((Succ ?x) ?y) (plus (times ?x ?y) ?y))
  (:: tf3 (-> (List) Nat))
  (let tf3 ((Nil ?tv11)) (Succ Zero))
  (let tf3 ((Cons ?tv12 ?tv13)) (times ?tv12 (tf2 ?tv13)))
  (:: tf2 (-> (List) Nat))
  (let tf2 (?tv9) (tf3 ?tv9))
  (:: product (-> (List) Nat))
  (let product (?tv8) (tf2 ?tv8))
  (:: tf5 (-> (NList) List))
  (let tf5 ((Nnil ?tv17)) (Nil Null))
  (let tf5 ((Ncons ?tv18 ?tv19)) (Cons (product ?tv18) (tf4 ?tv19)))
  (:: tf4 (-> (NList) List))
  (let tf4 (?tv15) (tf5 ?tv15))
  (:: map (-> (NList) List))
  (let map (?tv14) (tf4 ?tv14))
  (:: tf7 (-> (List List) NList))
  (let tf7 (?tv22 (Nil ?tv24)) (Ncons (Nil Null) (Nnil Null)))
  (let tf7 (?tv22 (Cons ?tv25 ?tv26)) (Ncons ?tv22 (tf6 ?tv26)))
  (:: tf6 (-> (List) NList))
  (let tf6 (?tv21) (tf7 ?tv21 ?tv21))
  (:: tails (-> (List) NList))
  (let tails (?tv20) (tf6 ?tv20))
  (:: main (-> (List) Nat))
  (let main (?tv27) (maximum (map (tails ?tv27))))
  (data Tuple3 (MakeTuple3))
  (:: MakeTuple3 (-> (Nat Nat) Tuple3))
  (:: fst3 (-> (Tuple3) Nat))
  (let fst3 ((MakeTuple3 ?x0 ?x1)) ?x0)
  (:: snd3 (-> (Tuple3) Nat))
  (let snd3 ((MakeTuple3 ?x0 ?x1)) ?x1)
  (:: step (-> (Nat Tuple3) Tuple3))
  (let step (?tv28 ?tv29) (MakeTuple3 (max (fst3 ?tv29) (times ?tv28 (snd3 ?tv29))) (times ?tv28 (snd3 ?tv29))))
  (:: tf9 (-> (Tuple3 List) Tuple3))
  (let tf9 (?tv35 (Nil ?tv36)) ?tv35)
  (let tf9 (?tv35 (Cons ?tv37 ?tv38)) (step ?tv37 (tf8 ?tv38 ?tv35)))
  (:: tf8 (-> (List Tuple3) Tuple3))
  (let tf8 (?tv32 ?tv33) (tf9 ?tv33 ?tv32))
  (:: fold (-> (List) Tuple3))
  (let fold (?tv30) (tf8 ?tv30 (MakeTuple3 (Succ Zero) (Succ Zero))))
  (:: mainNew (-> (List) Nat))
  (let mainNew (?tv39) (fst3 (fold ?tv39)))
  (=== optimize (inp0) (List) (main inp0) (mainNew inp0))
)
