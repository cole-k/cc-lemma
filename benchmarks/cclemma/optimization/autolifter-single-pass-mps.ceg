(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data Unit (Null))
  (:: Null Unit)
  (data List (Cons Nil))
  (:: Cons (-> (Nat List) List))
  (:: Nil (-> (Unit) List))
  (:: tf1 (-> (List List) List))
  (let tf1 (?tv4 (Nil ?tv5)) ?tv4)
  (let tf1 (?tv4 (Cons ?tv6 ?tv7)) (Cons ?tv6 (tf0 ?tv7)))
  (:: tf0 (-> (List) List))
  (let tf0 (?tv2) (tf1 ?tv2 ?tv2))
  (:: tf2 (-> (List) Nat))
  (let tf2 (?tv9) (mps (tf0 ?tv9)))
  (:: singlepass (-> (List) Nat))
  (let singlepass (?tv1) (tf2 ?tv1))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: ite1 (-> (Bool Nat Nat) Nat))
  (let ite1 (True ?x ?y) ?x)
  (let ite1 (False ?x ?y) ?y)
  (:: tf4 (-> (List) Nat))
  (let tf4 ((Nil ?tv13)) Zero)
  (let tf4 ((Cons ?tv14 ?tv15)) (ite1 (lq Zero (plus (tf3 ?tv15) ?tv14)) Zero (plus (tf3 ?tv15) ?tv14)))
  (:: tf3 (-> (List) Nat))
  (let tf3 (?tv11) (tf4 ?tv11))
  (:: mps (-> (List) Nat))
  (let mps (?tv10) (tf3 ?tv10))
  (:: main (-> (List) Nat))
  (let main (?tv16) (singlepass ?tv16))
  (:: tf6 (-> (List) Nat))
  (let tf6 ((Nil ?tv21)) Zero)
  (let tf6 ((Cons ?tv22 ?tv23)) (ite1 (lq (plus ?tv22 (tf5 ?tv23)) Zero) (plus ?tv22 (tf5 ?tv23)) Zero))
  (:: tf5 (-> (List) Nat))
  (let tf5 (?tv19) (tf6 ?tv19))
  (:: tf7 (-> (List) Nat))
  (let tf7 (?tv24) (tf5 ?tv24))
  (:: singlepassNew (-> (List) Nat))
  (let singlepassNew (?tv18) (tf7 ?tv18))
  (:: mainNew (-> (List) Nat))
  (let mainNew (?tv25) (singlepassNew ?tv25))
  (=== optimize (inp0) (List) (main inp0) (mainNew inp0))
)
