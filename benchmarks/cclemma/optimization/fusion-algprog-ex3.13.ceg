(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data List (Nil Cons))
  (:: Nil (-> (Unit) List))
  (:: Cons (-> (Nat List) List))
  (data PList (Pnil Pcons))
  (:: Pnil (-> (Unit) PList))
  (:: Pcons (-> (Nat Nat PList) PList))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: tf3 (-> (PList) PList))
  (let tf3 ((Pnil ?tv8)) (Pnil Null))
  (let tf3 ((Pcons ?tv9 ?tv10 ?tv11)) (Pcons (plus ?tv9 (Succ Zero)) ?tv10 (tf2 ?tv11)))
  (:: tf2 (-> (PList) PList))
  (let tf2 (?tv6) (tf3 ?tv6))
  (:: tf1 (-> (List) PList))
  (let tf1 ((Nil ?tv3)) (Pnil Null))
  (let tf1 ((Cons ?tv4 ?tv5)) (Pcons Zero ?tv4 (tf2 (tf0 ?tv5))))
  (:: tf0 (-> (List) PList))
  (let tf0 (?tv1) (tf1 ?tv1))
  (:: tri (-> (List) PList))
  (let tri (?tv0) (tf0 ?tv0))
  (:: times (-> (Nat Nat) Nat))
  (let times (Zero ?x) Zero)
  (let times ((Succ ?x) ?y) (plus (times ?x ?y) ?y))
  (:: tf5 (-> (PList) Nat))
  (let tf5 ((Pnil ?tv15)) Zero)
  (let tf5 ((Pcons ?tv16 ?tv17 ?tv18)) (plus (times ?tv16 ?tv17) (tf4 ?tv18)))
  (:: tf4 (-> (PList) Nat))
  (let tf4 (?tv13) (tf5 ?tv13))
  (:: tsum (-> (PList) Nat))
  (let tsum (?tv12) (tf4 ?tv12))
  (:: main (-> (List) Nat))
  (let main (?tv19) (tsum (tri ?tv19)))
  (data Tuple2 (MakeTuple2))
  (:: MakeTuple2 (-> (Nat Nat) Tuple2))
  (:: fst2 (-> (Tuple2) Nat))
  (let fst2 ((MakeTuple2 ?x0 ?x1)) ?x0)
  (:: snd2 (-> (Tuple2) Nat))
  (let snd2 ((MakeTuple2 ?x0 ?x1)) ?x1)
  (:: tf7 (-> (List) Tuple2))
  (let tf7 ((Nil ?tv23)) (MakeTuple2 Zero Zero))
  (let tf7 ((Cons ?tv24 ?tv25)) (MakeTuple2 (fst2 (MakeTuple2 (plus (fst2 (tf6 ?tv25)) (snd2 (tf6 ?tv25))) (snd2 (tf6 ?tv25)))) (plus (snd2 (MakeTuple2 (plus (fst2 (tf6 ?tv25)) (snd2 (tf6 ?tv25))) (snd2 (tf6 ?tv25)))) ?tv24)))
  (:: tf6 (-> (List) Tuple2))
  (let tf6 (?tv21) (tf7 ?tv21))
  (:: triNew (-> (List) Tuple2))
  (let triNew (?tv20) (tf6 ?tv20))
  (:: mainNew (-> (List) Nat))
  (let mainNew (?tv26) (fst2 (triNew ?tv26)))
  (=== optimize (inp0) (List) (main inp0) (mainNew inp0))
)
