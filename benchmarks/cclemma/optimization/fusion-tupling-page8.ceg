(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data MyNat (Myzero Mysucc))
  (:: Myzero (-> (Unit) MyNat))
  (:: Mysucc (-> (MyNat) MyNat))
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: tf1 (-> (MyNat) Nat))
  (let tf1 ((Myzero ?tv3)) Zero)
  (let tf1 ((Mysucc (Myzero ?tv4))) (Succ Zero))
  (let tf1 ((Mysucc (Mysucc ?tv5))) (plus (tf0 ?tv5) (tf0 (Mysucc ?tv5))))
  (:: tf0 (-> (MyNat) Nat))
  (let tf0 (?tv1) (tf1 ?tv1))
  (:: fib (-> (MyNat) Nat))
  (let fib (?tv0) (tf0 ?tv0))
  (:: tf3 (-> (MyNat MyNat) MyNat))
  (let tf3 (?tv9 (Myzero ?tv10)) ?tv9)
  (let tf3 (?tv9 (Mysucc ?tv11)) (Mysucc (tf2 ?tv11)))
  (:: tf2 (-> (MyNat) MyNat))
  (let tf2 (?tv7) (tf3 ?tv7 ?tv7))
  (:: repr (-> (MyNat) MyNat))
  (let repr (?tv6) (tf2 ?tv6))
  (:: main (-> (MyNat) Nat))
  (let main (?tv12) (fib (repr ?tv12)))
  (data Tuple0 (MakeTuple0))
  (:: MakeTuple0 (-> (Nat Nat) Tuple0))
  (:: nateq (-> (Nat Nat) Bool))
  (let nateq (Zero Zero) True)
  (let nateq (Zero (Succ ?x)) False)
  (let nateq ((Succ ?x) Zero) False)
  (let nateq ((Succ ?x) (Succ ?y)) (nateq ?x ?y))
  (:: fst0 (-> (Tuple0) Nat))
  (let fst0 ((MakeTuple0 ?x0 ?x1)) ?x0)
  (:: snd0 (-> (Tuple0) Nat))
  (let snd0 ((MakeTuple0 ?x0 ?x1)) ?x1)
  (:: ite1 (-> (Bool Nat Nat) Nat))
  (let ite1 (True ?x ?y) ?x)
  (let ite1 (False ?x ?y) ?y)
  (:: tf5 (-> (MyNat) Tuple0))
  (let tf5 ((Myzero ?tv16)) (MakeTuple0 Zero Zero))
  (let tf5 ((Mysucc ?tv17)) (MakeTuple0 (ite1 (nateq (fst0 (tf4 ?tv17)) (snd0 (tf4 ?tv17))) (plus (Succ Zero) (fst0 (tf4 ?tv17))) (plus (fst0 (tf4 ?tv17)) (snd0 (tf4 ?tv17)))) (fst0 (tf4 ?tv17))))
  (:: tf4 (-> (MyNat) Tuple0))
  (let tf4 (?tv14) (tf5 ?tv14))
  (:: reprNew (-> (MyNat) Tuple0))
  (let reprNew (?tv13) (tf4 ?tv13))
  (:: mainNew (-> (MyNat) Nat))
  (let mainNew (?tv18) (fst0 (reprNew ?tv18)))
  (=== optimize (inp0) (MyNat) (main inp0) (mainNew inp0))
)
