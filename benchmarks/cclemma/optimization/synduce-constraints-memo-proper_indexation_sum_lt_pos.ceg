(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data List (Nil Cons))
  (:: Nil (-> (Unit) List))
  (:: Cons (-> (Nat List) List))
  (data IDList (Inil Icons))
  (:: Inil (-> (Unit) IDList))
  (:: Icons (-> (Nat Nat IDList) IDList))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: tf1 (-> (IDList) Nat))
  (let tf1 ((Inil ?tv3)) Zero)
  (let tf1 ((Icons ?tv4 ?tv5 ?tv6)) (plus (Succ Zero) (tf0 ?tv6)))
  (:: tf0 (-> (IDList) Nat))
  (let tf0 (?tv1) (tf1 ?tv1))
  (:: length (-> (IDList) Nat))
  (let length (?tv0) (tf0 ?tv0))
  (:: and (-> (Bool Bool) Bool))
  (let and (False ?x) False)
  (let and (?x False) False)
  (let and (True True) True)
  (:: nateq (-> (Nat Nat) Bool))
  (let nateq (Zero Zero) True)
  (let nateq (Zero (Succ ?x)) False)
  (let nateq ((Succ ?x) Zero) False)
  (let nateq ((Succ ?x) (Succ ?y)) (nateq ?x ?y))
  (:: tf3 (-> (IDList) Bool))
  (let tf3 ((Inil ?tv10)) True)
  (let tf3 ((Icons ?tv11 ?tv12 ?tv13)) (and (tf2 ?tv13) (nateq ?tv12 (length ?tv13))))
  (:: tf2 (-> (IDList) Bool))
  (let tf2 (?tv8) (tf3 ?tv8))
  (:: isindexed (-> (IDList) Bool))
  (let isindexed (?tv7) (tf2 ?tv7))
  (:: tf5 (-> (IDList) List))
  (let tf5 ((Inil ?tv17)) (Nil Null))
  (let tf5 ((Icons ?tv18 ?tv19 ?tv20)) (Cons ?tv18 (tf4 ?tv20)))
  (:: tf4 (-> (IDList) List))
  (let tf4 (?tv15) (tf5 ?tv15))
  (:: repr (-> (IDList) List))
  (let repr (?tv14) (tf4 ?tv14))
  (:: tf7 (-> (List) Nat))
  (let tf7 ((Nil ?tv24)) Zero)
  (let tf7 ((Cons ?tv25 ?tv26)) (plus (Succ Zero) (tf6 ?tv26)))
  (:: tf6 (-> (List) Nat))
  (let tf6 (?tv22) (tf7 ?tv22))
  (:: len (-> (List) Nat))
  (let len (?tv21) (tf6 ?tv21))
  (:: gq (-> (Nat Nat) Bool))
  (let gq (Zero ?x) False)
  (let gq ((Succ ?x) Zero) True)
  (let gq ((Succ ?x) (Succ ?y)) (gq ?x ?y))
  (:: ite2 (-> (Bool Nat Nat) Nat))
  (let ite2 (True ?x ?y) ?x)
  (let ite2 (False ?x ?y) ?y)
  (:: tf9 (-> (List) Nat))
  (let tf9 ((Nil ?tv30)) Zero)
  (let tf9 ((Cons ?tv31 ?tv32)) (ite2 (gq ?tv31 (len ?tv32)) (plus ?tv31 (tf8 ?tv32)) (tf8 ?tv32)))
  (:: tf8 (-> (List) Nat))
  (let tf8 (?tv28) (tf9 ?tv28))
  (:: spec (-> (List) Nat))
  (let spec (?tv27) (tf8 ?tv27))
  (:: tf11 (-> (IDList IDList) IDList))
  (let tf11 (?tv36 (Inil ?tv37)) ?tv36)
  (let tf11 (?tv36 (Icons ?tv38 ?tv39 ?tv40)) (Icons ?tv38 ?tv39 (tf10 ?tv40)))
  (:: tf10 (-> (IDList) IDList))
  (let tf10 (?tv34) (tf11 ?tv34 ?tv34))
  (:: target (-> (IDList) IDList))
  (let target (?tv33) (tf10 ?tv33))
  (:: main (-> (IDList) Nat))
  (let main (?tv41) (ite2 (isindexed ?tv41) (spec (repr (target ?tv41))) Zero))
  (data Tuple3 (MakeTuple3))
  (:: MakeTuple3 (-> (Nat Nat) Tuple3))
  (:: leq (-> (Nat Nat) Bool))
  (let leq (Zero ?x) True)
  (let leq ((Succ ?x) Zero) False)
  (let leq ((Succ ?x) (Succ ?y)) (leq ?x ?y))
  (:: snd3 (-> (Tuple3) Nat))
  (let snd3 ((MakeTuple3 ?x0 ?x1)) ?x1)
  (:: fst3 (-> (Tuple3) Nat))
  (let fst3 ((MakeTuple3 ?x0 ?x1)) ?x0)
  (:: tf13 (-> (IDList) Tuple3))
  (let tf13 ((Inil ?tv45)) (MakeTuple3 Zero Zero))
  (let tf13 ((Icons ?tv46 ?tv47 ?tv48)) (MakeTuple3 (ite2 (leq ?tv46 (snd3 (tf12 ?tv48))) (fst3 (tf12 ?tv48)) (plus ?tv46 (fst3 (tf12 ?tv48)))) (plus (snd3 (tf12 ?tv48)) (Succ Zero))))
  (:: tf12 (-> (IDList) Tuple3))
  (let tf12 (?tv43) (tf13 ?tv43))
  (:: targetNew (-> (IDList) Tuple3))
  (let targetNew (?tv42) (tf12 ?tv42))
  (:: mainNew (-> (IDList) Nat))
  (let mainNew (?tv49) (ite2 (isindexed ?tv49) (fst3 (targetNew ?tv49)) Zero))
  (=== optimize (inp0) (IDList) (main inp0) (mainNew inp0))
)
