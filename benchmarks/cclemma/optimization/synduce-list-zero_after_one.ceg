(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data BList (Nil Cons))
  (:: Nil (-> (Unit) BList))
  (:: Cons (-> (Bool BList) BList))
  (data CList (Emp Single Concat))
  (:: Emp (-> (Unit) CList))
  (:: Single (-> (Bool) CList))
  (:: Concat (-> (CList CList) CList))
  (:: or (-> (Bool Bool) Bool))
  (let or (True ?x) True)
  (let or (?x True) True)
  (let or (False False) False)
  (:: opor (-> (Bool Bool) Bool))
  (let opor (?tv0 ?tv1) (or ?tv0 ?tv1))
  (:: tf1 (-> (BList BList) BList))
  (let tf1 (?tv7 (Nil ?tv8)) ?tv7)
  (let tf1 (?tv7 (Cons ?tv9 ?tv10)) (Cons ?tv9 (tf0 ?tv10 ?tv7)))
  (:: tf0 (-> (BList BList) BList))
  (let tf0 (?tv4 ?tv5) (tf1 ?tv5 ?tv4))
  (:: catlist (-> (BList BList) BList))
  (let catlist (?tv2 ?tv3) (tf0 ?tv2 ?tv3))
  (:: tf3 (-> (CList) BList))
  (let tf3 ((Emp ?tv14)) (Nil Null))
  (let tf3 ((Single ?tv15)) (Cons ?tv15 (Nil Null)))
  (let tf3 ((Concat ?tv16 ?tv17)) (catlist (tf2 ?tv16) (tf2 ?tv17)))
  (:: tf2 (-> (CList) BList))
  (let tf2 (?tv12) (tf3 ?tv12))
  (:: repr (-> (CList) BList))
  (let repr (?tv11) (tf2 ?tv11))
  (data Tuple2 (MakeTuple2))
  (:: MakeTuple2 (-> (Bool Bool Bool) Tuple2))
  (:: fst2 (-> (Tuple2) Bool))
  (let fst2 ((MakeTuple2 ?x0 ?x1 ?x2)) ?x0)
  (:: snd2 (-> (Tuple2) Bool))
  (let snd2 ((MakeTuple2 ?x0 ?x1 ?x2)) ?x1)
  (:: and (-> (Bool Bool) Bool))
  (let and (False ?x) False)
  (let and (?x False) False)
  (let and (True True) True)
  (:: not (-> (Bool) Bool))
  (let not (True) False)
  (let not (False) True)
  (:: third2 (-> (Tuple2) Bool))
  (let third2 ((MakeTuple2 ?x0 ?x1 ?x2)) ?x2)
  (:: tf5 (-> (BList) Tuple2))
  (let tf5 ((Nil ?tv21)) (MakeTuple2 False False False))
  (let tf5 ((Cons ?tv22 ?tv23)) (MakeTuple2 (or (fst2 (tf4 ?tv23)) ?tv22) (or (snd2 (tf4 ?tv23)) (and (fst2 (tf4 ?tv23)) (not ?tv22))) (or (third2 (tf4 ?tv23)) (not ?tv22))))
  (:: tf4 (-> (BList) Tuple2))
  (let tf4 (?tv19) (tf5 ?tv19))
  (:: spec (-> (BList) Bool))
  (let spec (?tv18) (snd2 (tf4 ?tv18)))
  (:: main (-> (CList) Bool))
  (let main (?tv24) (spec (repr ?tv24)))
  (data Tuple3 (MakeTuple3))
  (:: MakeTuple3 (-> (Bool Bool Bool Bool) Tuple3))
  (:: snd3 (-> (Tuple3) Bool))
  (let snd3 ((MakeTuple3 ?x0 ?x1 ?x2 ?x3)) ?x1)
  (:: third3 (-> (Tuple3) Bool))
  (let third3 ((MakeTuple3 ?x0 ?x1 ?x2 ?x3)) ?x2)
  (:: fst3 (-> (Tuple3) Bool))
  (let fst3 ((MakeTuple3 ?x0 ?x1 ?x2 ?x3)) ?x0)
  (:: fourth3 (-> (Tuple3) Bool))
  (let fourth3 ((MakeTuple3 ?x0 ?x1 ?x2 ?x3)) ?x3)
  (:: tf7 (-> (CList) Tuple3))
  (let tf7 ((Emp ?tv28)) (MakeTuple3 False True True False))
  (let tf7 ((Single ?tv29)) (MakeTuple3 False ?tv29 False False))
  (let tf7 ((Concat ?tv30 ?tv31)) (MakeTuple3 (or (or (and (and (not (snd3 (tf6 ?tv30))) (not (third3 (tf6 ?tv31)))) (opor (fst3 (tf6 ?tv31)) (snd3 (tf6 ?tv31)))) (and (and (opor (fst3 (tf6 ?tv31)) (fourth3 (tf6 ?tv30))) (not (third3 (tf6 ?tv31)))) (opor (fst3 (tf6 ?tv31)) (snd3 (tf6 ?tv31))))) (opor (fst3 (tf6 ?tv31)) (fst3 (tf6 ?tv30)))) (or (and (snd3 (tf6 ?tv31)) (snd3 (tf6 ?tv30))) (and (snd3 (tf6 ?tv30)) (not (third3 (tf6 ?tv30))))) (and (third3 (tf6 ?tv31)) (third3 (tf6 ?tv30))) (or (or (and (and (not (snd3 (tf6 ?tv31))) (not (third3 (tf6 ?tv30)))) (opor (snd3 (tf6 ?tv31)) (snd3 (tf6 ?tv30)))) (and (and (not (snd3 (tf6 ?tv30))) (not (third3 (tf6 ?tv31)))) (opor (snd3 (tf6 ?tv31)) (fourth3 (tf6 ?tv31))))) (opor (fourth3 (tf6 ?tv31)) (fourth3 (tf6 ?tv30))))))
  (:: tf6 (-> (CList) Tuple3))
  (let tf6 (?tv26) (tf7 ?tv26))
  (:: reprNew (-> (CList) Tuple3))
  (let reprNew (?tv25) (tf6 ?tv25))
  (:: mainNew (-> (CList) Bool))
  (let mainNew (?tv32) (fst3 (reprNew ?tv32)))
  (=== optimize (inp0) (CList) (main inp0) (mainNew inp0))
)
