(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data List (Nil Cons))
  (:: Nil (-> (Unit) List))
  (:: Cons (-> (Nat List) List))
  (data Zipper (Zip))
  (:: Zip (-> (List List) Zipper))
  (:: tf1 (-> (List List) List))
  (let tf1 (?tv5 (Nil ?tv6)) ?tv5)
  (let tf1 (?tv5 (Cons ?tv7 ?tv8)) (Cons ?tv7 (tf0 ?tv8 ?tv5)))
  (:: tf0 (-> (List List) List))
  (let tf0 (?tv2 ?tv3) (tf1 ?tv3 ?tv2))
  (:: concat (-> (List List) List))
  (let concat (?tv0 ?tv1) (tf0 ?tv0 ?tv1))
  (:: tf3 (-> (List) List))
  (let tf3 ((Nil ?tv12)) (Nil Null))
  (let tf3 ((Cons ?tv13 ?tv14)) (concat (tf2 ?tv14) (Cons ?tv13 (Nil Null))))
  (:: tf2 (-> (List) List))
  (let tf2 (?tv10) (tf3 ?tv10))
  (:: rev (-> (List) List))
  (let rev (?tv9) (tf2 ?tv9))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: tf5 (-> (List) Nat))
  (let tf5 ((Nil ?tv18)) Zero)
  (let tf5 ((Cons ?tv19 ?tv20)) (plus ?tv19 (tf4 ?tv20)))
  (:: tf4 (-> (List) Nat))
  (let tf4 (?tv16) (tf5 ?tv16))
  (:: sum (-> (List) Nat))
  (let sum (?tv15) (tf4 ?tv15))
  (:: tf6 (-> (Zipper) List))
  (let tf6 ((Zip ?tv22 ?tv23)) (concat (rev ?tv22) ?tv23))
  (:: repr (-> (Zipper) List))
  (let repr (?tv21) (tf6 ?tv21))
  (:: tf8 (-> (Zipper) Zipper))
  (let tf8 ((Zip ?tv26 ?tv27)) (Zip ?tv26 ?tv27))
  (:: tf7 (-> (Zipper) Zipper))
  (let tf7 (?tv25) (tf8 ?tv25))
  (:: target (-> (Zipper) Zipper))
  (let target (?tv24) (tf7 ?tv24))
  (:: main (-> (Zipper) Nat))
  (let main (?tv28) (sum (repr (target ?tv28))))
  (:: tf10 (-> (Zipper) Nat))
  (let tf10 ((Zip ?tv31 ?tv32)) (plus (sum ?tv31) (sum ?tv32)))
  (:: tf9 (-> (Zipper) Nat))
  (let tf9 (?tv30) (tf10 ?tv30))
  (:: targetNew (-> (Zipper) Nat))
  (let targetNew (?tv29) (tf9 ?tv29))
  (:: mainNew (-> (Zipper) Nat))
  (let mainNew (?tv33) (targetNew ?tv33))
  (=== optimize (inp0) (Zipper) (main inp0) (mainNew inp0))
)
