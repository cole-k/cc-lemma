(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data List (Nil Cons))
  (:: Nil (-> (Unit) List))
  (:: Cons (-> (Nat List) List))
  (data NList (Single Ncons))
  (:: Single (-> (List) NList))
  (:: Ncons (-> (List NList) NList))
  (:: tf1 (-> (NList) List))
  (let tf1 ((Single ?tv6)) (Cons (product ?tv6) (Nil Null)))
  (let tf1 ((Ncons ?tv7 ?tv8)) (Cons (product ?tv7) (tf0 ?tv8)))
  (:: tf0 (-> (NList) List))
  (let tf0 (?tv3) (tf1 ?tv3))
  (:: map (-> (NList) List))
  (let map (?tv1) (tf0 ?tv1))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: tf3 (-> (List) Nat))
  (let tf3 ((Nil ?tv12)) Zero)
  (let tf3 ((Cons ?tv13 ?tv14)) (plus ?tv13 (tf2 ?tv14)))
  (:: tf2 (-> (List) Nat))
  (let tf2 (?tv10) (tf3 ?tv10))
  (:: sum (-> (List) Nat))
  (let sum (?tv9) (tf2 ?tv9))
  (:: times (-> (Nat Nat) Nat))
  (let times (Zero ?x) Zero)
  (let times ((Succ ?x) ?y) (plus (times ?x ?y) ?y))
  (:: tf5 (-> (List) Nat))
  (let tf5 ((Nil ?tv18)) (Succ Zero))
  (let tf5 ((Cons ?tv19 ?tv20)) (times ?tv19 (tf4 ?tv20)))
  (:: tf4 (-> (List) Nat))
  (let tf4 (?tv16) (tf5 ?tv16))
  (:: product (-> (List) Nat))
  (let product (?tv15) (tf4 ?tv15))
  (:: tf7 (-> (List List) NList))
  (let tf7 (?tv24 (Nil ?tv25)) (Single ?tv24))
  (let tf7 (?tv24 (Cons ?tv26 ?tv27)) (Ncons ?tv24 (tf6 ?tv27)))
  (:: tf6 (-> (List) NList))
  (let tf6 (?tv22) (tf7 ?tv22 ?tv22))
  (:: tails (-> (List) NList))
  (let tails (?tv21) (tf6 ?tv21))
  (:: main (-> (List) Nat))
  (let main (?tv28) (sum (map (tails ?tv28))))
  (data Tuple2 (MakeTuple2))
  (:: MakeTuple2 (-> (Nat Nat) Tuple2))
  (:: fst2 (-> (Tuple2) Nat))
  (let fst2 ((MakeTuple2 ?x0 ?x1)) ?x0)
  (:: snd2 (-> (Tuple2) Nat))
  (let snd2 ((MakeTuple2 ?x0 ?x1)) ?x1)
  (:: tf9 (-> (List) Tuple2))
  (let tf9 ((Nil ?tv32)) (MakeTuple2 (Succ Zero) (Succ Zero)))
  (let tf9 ((Cons ?tv33 ?tv34)) (MakeTuple2 (plus (fst2 (tf8 ?tv34)) (times ?tv33 (snd2 (tf8 ?tv34)))) (times ?tv33 (snd2 (tf8 ?tv34)))))
  (:: tf8 (-> (List) Tuple2))
  (let tf8 (?tv30) (tf9 ?tv30))
  (:: tailsNew (-> (List) Tuple2))
  (let tailsNew (?tv29) (tf8 ?tv29))
  (:: mainNew (-> (List) Nat))
  (let mainNew (?tv35) (fst2 (tailsNew ?tv35)))
  (=== optimize (inp0) (List) (main inp0) (mainNew inp0))
)
