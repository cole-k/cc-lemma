(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data List (Cons Nil))
  (:: Cons (-> (Bool List) List))
  (:: Nil (-> (Unit) List))
  (:: tf1 (-> (List List) List))
  (let tf1 (?tv4 (Nil ?tv5)) ?tv4)
  (let tf1 (?tv4 (Cons ?tv6 ?tv7)) (Cons ?tv6 (tf0 ?tv7)))
  (:: tf0 (-> (List) List))
  (let tf0 (?tv2) (tf1 ?tv2 ?tv2))
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (:: tf2 (-> (List) Nat))
  (let tf2 (?tv9) (dropwhile (tf0 ?tv9)))
  (:: singlepass (-> (List) Nat))
  (let singlepass (?tv1) (tf2 ?tv1))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: ite1 (-> (Bool Nat Nat) Nat))
  (let ite1 (True ?x ?y) ?x)
  (let ite1 (False ?x ?y) ?y)
  (:: tf4 (-> (Nat List) Nat))
  (let tf4 (?tv14 (Nil ?tv15)) ?tv14)
  (let tf4 (?tv14 (Cons ?tv16 ?tv17)) (ite1 ?tv16 ?tv14 (tf3 (plus (Succ Zero) ?tv14) ?tv17)))
  (:: tf3 (-> (Nat List) Nat))
  (let tf3 (?tv11 ?tv12) (tf4 ?tv11 ?tv12))
  (:: dropwhile (-> (List) Nat))
  (let dropwhile (?tv10) (tf3 Zero ?tv10))
  (:: main (-> (List) Nat))
  (let main (?tv18) (singlepass ?tv18))
  (:: not (-> (Bool) Bool))
  (let not (True) False)
  (let not (False) True)
  (:: tf6 (-> (List) Nat))
  (let tf6 ((Nil ?tv23)) Zero)
  (let tf6 ((Cons ?tv24 ?tv25)) (ite1 (not ?tv24) (plus (Succ Zero) (tf5 ?tv25)) Zero))
  (:: tf5 (-> (List) Nat))
  (let tf5 (?tv21) (tf6 ?tv21))
  (:: tf7 (-> (List) Nat))
  (let tf7 (?tv26) (tf5 ?tv26))
  (:: singlepassNew (-> (List) Nat))
  (let singlepassNew (?tv20) (tf7 ?tv20))
  (:: mainNew (-> (List) Nat))
  (let mainNew (?tv27) (singlepassNew ?tv27))
  (=== optimize (inp0) (List) (main inp0) (mainNew inp0))
)
