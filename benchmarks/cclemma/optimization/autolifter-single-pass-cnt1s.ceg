(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data List (Cons Nil))
  (:: Cons (-> (Bool List) List))
  (:: Nil (-> (Unit) List))
  (:: tf1 (-> (List List) List))
  (let tf1 (?tv4 (Nil ?tv5)) ?tv4)
  (let tf1 (?tv4 (Cons ?tv6 ?tv7)) (Cons ?tv6 (tf0 ?tv7)))
  (:: tf0 (-> (List) List))
  (let tf0 (?tv2) (tf1 ?tv2 ?tv2))
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (:: tf2 (-> (List) Nat))
  (let tf2 (?tv9) (cnt1s (tf0 ?tv9)))
  (:: singlepass (-> (List) Nat))
  (let singlepass (?tv1) (tf2 ?tv1))
  (:: and (-> (Bool Bool) Bool))
  (let and (False ?x) False)
  (let and (?x False) False)
  (let and (True True) True)
  (:: not (-> (Bool) Bool))
  (let not (True) False)
  (let not (False) True)
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: ite1 (-> (Bool Nat Nat) Nat))
  (let ite1 (True ?x ?y) ?x)
  (let ite1 (False ?x ?y) ?y)
  (:: tf4 (-> (Bool Nat List) Nat))
  (let tf4 (?tv15 ?tv16 (Nil ?tv17)) ?tv16)
  (let tf4 (?tv15 ?tv16 (Cons ?tv18 ?tv19)) (tf3 ?tv18 (ite1 (and (not ?tv15) ?tv18) (plus ?tv16 (Succ Zero)) ?tv16) ?tv19))
  (:: tf3 (-> (Bool Nat List) Nat))
  (let tf3 (?tv11 ?tv12 ?tv13) (tf4 ?tv11 ?tv12 ?tv13))
  (:: cnt1s (-> (List) Nat))
  (let cnt1s (?tv10) (tf3 False Zero ?tv10))
  (:: main (-> (List) Nat))
  (let main (?tv20) (singlepass ?tv20))
  (data Tuple2 (MakeTuple2))
  (:: MakeTuple2 (-> (Nat Bool) Tuple2))
  (:: or (-> (Bool Bool) Bool))
  (let or (True ?x) True)
  (let or (?x True) True)
  (let or (False False) False)
  (:: snd2 (-> (Tuple2) Bool))
  (let snd2 ((MakeTuple2 ?x0 ?x1)) ?x1)
  (:: fst2 (-> (Tuple2) Nat))
  (let fst2 ((MakeTuple2 ?x0 ?x1)) ?x0)
  (:: tf6 (-> (List) Tuple2))
  (let tf6 ((Nil ?tv25)) (MakeTuple2 Zero False))
  (let tf6 ((Cons ?tv26 ?tv27)) (MakeTuple2 (ite1 (or (not ?tv26) (snd2 (tf5 ?tv27))) (fst2 (tf5 ?tv27)) (plus (Succ Zero) (fst2 (tf5 ?tv27)))) ?tv26))
  (:: tf5 (-> (List) Tuple2))
  (let tf5 (?tv23) (tf6 ?tv23))
  (:: tf7 (-> (List) Nat))
  (let tf7 (?tv28) (fst2 (tf5 ?tv28)))
  (:: singlepassNew (-> (List) Nat))
  (let singlepassNew (?tv22) (tf7 ?tv22))
  (:: mainNew (-> (List) Nat))
  (let mainNew (?tv29) (singlepassNew ?tv29))
  (=== optimize (inp0) (List) (main inp0) (mainNew inp0))
)
