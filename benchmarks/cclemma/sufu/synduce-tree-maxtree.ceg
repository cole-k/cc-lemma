(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data Tree (Nil Node))
  (:: Nil (-> (Unit) Tree))
  (:: Node (-> (Nat Tree Tree) Tree))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: ite1 (-> (Bool Nat Nat) Nat))
  (let ite1 (True ?x ?y) ?x)
  (let ite1 (False ?x ?y) ?y)
  (:: max (-> (Nat Nat) Nat))
  (let max (?tv0 ?tv1) (ite1 (lq ?tv0 ?tv1) ?tv1 ?tv0))
  (:: tf1 (-> (Nat Tree) Nat))
  (let tf1 (?tv6 (Nil ?tv7)) ?tv6)
  (let tf1 (?tv6 (Node ?tv8 ?tv9 ?tv10)) (tf0 (max (tf0 ?tv6 ?tv9) ?tv8) ?tv10))
  (:: tf0 (-> (Nat Tree) Nat))
  (let tf0 (?tv3 ?tv4) (tf1 ?tv3 ?tv4))
  (:: spec (-> (Tree) Nat))
  (let spec (?tv2) (tf0 Zero ?tv2))
  (:: tf3 (-> (Tree) Tree))
  (let tf3 ((Nil ?tv14)) (Nil Null))
  (let tf3 ((Node ?tv15 ?tv16 ?tv17)) (Node ?tv15 (tf2 ?tv16) (tf2 ?tv17)))
  (:: tf2 (-> (Tree) Tree))
  (let tf2 (?tv12) (tf3 ?tv12))
  (:: repr (-> (Tree) Tree))
  (let repr (?tv11) (tf2 ?tv11))
  (:: main (-> (Tree) Nat))
  (let main (?tv18) (spec (repr ?tv18)))
  (:: tf5 (-> (Tree) Nat))
  (let tf5 ((Nil ?tv22)) Zero)
  (let tf5 ((Node ?tv23 ?tv24 ?tv25)) (max ?tv23 (max (tf4 ?tv25) (tf4 ?tv24))))
  (:: tf4 (-> (Tree) Nat))
  (let tf4 (?tv20) (tf5 ?tv20))
  (:: reprNew (-> (Tree) Nat))
  (let reprNew (?tv19) (tf4 ?tv19))
  (:: mainNew (-> (Tree) Nat))
  (let mainNew (?tv26) (reprNew ?tv26))
  (=== optimize (inp0) (Tree) (main inp0) (mainNew inp0))
)
