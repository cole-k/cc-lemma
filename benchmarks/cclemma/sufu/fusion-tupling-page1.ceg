(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data Tree (Leaf Node))
  (:: Leaf (-> (Nat) Tree))
  (:: Node (-> (Tree Tree) Tree))
  (data Unit (Null))
  (:: Null Unit)
  (data List (Nil Cons))
  (:: Nil (-> (Unit) List))
  (:: Cons (-> (Nat List) List))
  (:: tf1 (-> (List List) List))
  (let tf1 (?tv5 (Nil ?tv6)) ?tv5)
  (let tf1 (?tv5 (Cons ?tv7 ?tv8)) (Cons ?tv7 (tf0 ?tv8 ?tv5)))
  (:: tf0 (-> (List List) List))
  (let tf0 (?tv2 ?tv3) (tf1 ?tv3 ?tv2))
  (:: cat (-> (List List) List))
  (let cat (?tv0 ?tv1) (tf0 ?tv0 ?tv1))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: ite2 (-> (Bool Nat Nat) Nat))
  (let ite2 (True ?x ?y) ?x)
  (let ite2 (False ?x ?y) ?y)
  (:: max (-> (Nat Nat) Nat))
  (let max (?tv9 ?tv10) (ite2 (lq ?tv9 ?tv10) ?tv10 ?tv9))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: tf3 (-> (Tree) Nat))
  (let tf3 ((Leaf ?tv14)) Zero)
  (let tf3 ((Node ?tv15 ?tv16)) (plus (Succ Zero) (max (tf2 ?tv15) (tf2 ?tv16))))
  (:: tf2 (-> (Tree) Nat))
  (let tf2 (?tv12) (tf3 ?tv12))
  (:: depth (-> (Tree) Nat))
  (let depth (?tv11) (tf2 ?tv11))
  (data Tuple3 (MakeTuple3))
  (:: MakeTuple3 (-> (List Tree) Tuple3))
  (:: gq (-> (Nat Nat) Bool))
  (let gq (Zero ?x) False)
  (let gq ((Succ ?x) Zero) True)
  (let gq ((Succ ?x) (Succ ?y)) (gq ?x ?y))
  (:: snd3 (-> (Tuple3) Tree))
  (let snd3 ((MakeTuple3 ?x0 ?x1)) ?x1)
  (:: fst3 (-> (Tuple3) List))
  (let fst3 ((MakeTuple3 ?x0 ?x1)) ?x0)
  (:: nateq (-> (Nat Nat) Bool))
  (let nateq (Zero Zero) True)
  (let nateq (Zero (Succ ?x)) False)
  (let nateq ((Succ ?x) Zero) False)
  (let nateq ((Succ ?x) (Succ ?y)) (nateq ?x ?y))
  (:: ite3 (-> (Bool Tuple3 Tuple3) Tuple3))
  (let ite3 (True ?x ?y) ?x)
  (let ite3 (False ?x ?y) ?y)
  (:: tf5 (-> (Tree Tree) Tuple3))
  (let tf5 (?tv20 (Leaf ?tv21)) (MakeTuple3 (Cons ?tv21 (Nil Null)) ?tv20))
  (let tf5 (?tv20 (Node ?tv22 ?tv23)) (ite3 (gq (depth (snd3 (tf4 ?tv22))) (depth (snd3 (tf4 ?tv23)))) (MakeTuple3 (fst3 (tf4 ?tv22)) ?tv20) (ite3 (nateq (depth (snd3 (tf4 ?tv22))) (depth (snd3 (tf4 ?tv23)))) (MakeTuple3 (cat (fst3 (tf4 ?tv22)) (fst3 (tf4 ?tv23))) ?tv20) (MakeTuple3 (fst3 (tf4 ?tv23)) ?tv20))))
  (:: tf4 (-> (Tree) Tuple3))
  (let tf4 (?tv18) (tf5 ?tv18 ?tv18))
  (:: deepest (-> (Tree) Tuple3))
  (let deepest (?tv17) (tf4 ?tv17))
  (:: main (-> (Tree) List))
  (let main (?tv24) (fst3 (deepest ?tv24)))
  (data Tuple4 (MakeTuple4))
  (:: MakeTuple4 (-> (List Nat) Tuple4))
  (:: snd4 (-> (Tuple4) Nat))
  (let snd4 ((MakeTuple4 ?x0 ?x1)) ?x1)
  (:: fst4 (-> (Tuple4) List))
  (let fst4 ((MakeTuple4 ?x0 ?x1)) ?x0)
  (:: ite4 (-> (Bool Tuple4 Tuple4) Tuple4))
  (let ite4 (True ?x ?y) ?x)
  (let ite4 (False ?x ?y) ?y)
  (:: tf7 (-> (Tree) Tuple4))
  (let tf7 ((Leaf ?tv28)) (MakeTuple4 (Cons ?tv28 (Nil Null)) Zero))
  (let tf7 ((Node ?tv29 ?tv30)) (ite4 (gq (snd4 (tf6 ?tv29)) (snd4 (tf6 ?tv30))) (MakeTuple4 (fst4 (tf6 ?tv29)) (plus (Succ Zero) (snd4 (tf6 ?tv29)))) (ite4 (nateq (snd4 (tf6 ?tv29)) (snd4 (tf6 ?tv30))) (MakeTuple4 (cat (fst4 (tf6 ?tv29)) (fst4 (tf6 ?tv30))) (plus (snd4 (tf6 ?tv29)) (Succ Zero))) (MakeTuple4 (fst4 (tf6 ?tv30)) (plus (snd4 (tf6 ?tv30)) (Succ Zero))))))
  (:: tf6 (-> (Tree) Tuple4))
  (let tf6 (?tv26) (tf7 ?tv26))
  (:: deepestNew (-> (Tree) Tuple4))
  (let deepestNew (?tv25) (tf6 ?tv25))
  (:: mainNew (-> (Tree) List))
  (let mainNew (?tv31) (fst4 (deepestNew ?tv31)))
  (=== optimize (inp0) (Tree) (main inp0) (mainNew inp0))
)
