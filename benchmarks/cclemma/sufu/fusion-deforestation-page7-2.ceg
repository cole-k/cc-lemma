(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data Tree (Leaf Branch))
  (:: Leaf (-> (Nat) Tree))
  (:: Branch (-> (Tree Tree) Tree))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: times (-> (Nat Nat) Nat))
  (let times (Zero ?x) Zero)
  (let times ((Succ ?x) ?y) (plus (times ?x ?y) ?y))
  (:: square (-> (Nat) Nat))
  (let square (?tv0) (times ?tv0 ?tv0))
  (:: tf1 (-> (Tree) Tree))
  (let tf1 ((Leaf ?tv4)) (Leaf (square ?tv4)))
  (let tf1 ((Branch ?tv5 ?tv6)) (Branch (tf0 ?tv5) (tf0 ?tv6)))
  (:: tf0 (-> (Tree) Tree))
  (let tf0 (?tv2) (tf1 ?tv2))
  (:: squaretr (-> (Tree) Tree))
  (let squaretr (?tv1) (tf0 ?tv1))
  (:: tf3 (-> (Tree) Nat))
  (let tf3 ((Leaf ?tv10)) ?tv10)
  (let tf3 ((Branch ?tv11 ?tv12)) (plus (tf2 ?tv11) (tf2 ?tv12)))
  (:: tf2 (-> (Tree) Nat))
  (let tf2 (?tv8) (tf3 ?tv8))
  (:: sumtr (-> (Tree) Nat))
  (let sumtr (?tv7) (tf2 ?tv7))
  (:: main (-> (Tree) Nat))
  (let main (?tv13) (sumtr (squaretr ?tv13)))
  (:: tf5 (-> (Tree) Nat))
  (let tf5 ((Leaf ?tv17)) (square ?tv17))
  (let tf5 ((Branch ?tv18 ?tv19)) (plus (tf4 ?tv18) (tf4 ?tv19)))
  (:: tf4 (-> (Tree) Nat))
  (let tf4 (?tv15) (tf5 ?tv15))
  (:: squaretrNew (-> (Tree) Nat))
  (let squaretrNew (?tv14) (tf4 ?tv14))
  (:: mainNew (-> (Tree) Nat))
  (let mainNew (?tv20) (squaretrNew ?tv20))
  (=== optimize (inp0) (Tree) (main inp0) (mainNew inp0))
)
