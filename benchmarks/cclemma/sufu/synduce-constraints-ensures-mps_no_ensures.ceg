(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data CList (Cnil Single Concat))
  (:: Cnil (-> (Unit) CList))
  (:: Single (-> (Nat) CList))
  (:: Concat (-> (CList CList) CList))
  (data List (Nil Cons))
  (:: Nil (-> (Unit) List))
  (:: Cons (-> (Nat List) List))
  (:: tf1 (-> (List List) List))
  (let tf1 (?tv4 (Cons ?tv6 ?tv7)) (Cons ?tv6 (tf0 ?tv7 ?tv4)))
  (let tf1 (?tv4 (Nil ?tv8)) ?tv4)
  (:: tf0 (-> (List List) List))
  (let tf0 (?tv2 ?tv3) (tf1 ?tv3 ?tv2))
  (:: cat (-> (List List) List))
  (let cat (?tv0 ?tv1) (tf0 ?tv0 ?tv1))
  (:: tf3 (-> (CList) List))
  (let tf3 ((Cnil ?tv12)) (Nil Null))
  (let tf3 ((Single ?tv13)) (Cons ?tv13 (Nil Null)))
  (let tf3 ((Concat ?tv14 ?tv15)) (cat (tf2 ?tv14) (tf2 ?tv15)))
  (:: tf2 (-> (CList) List))
  (let tf2 (?tv10) (tf3 ?tv10))
  (:: repr (-> (CList) List))
  (let repr (?tv9) (tf2 ?tv9))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: ite2 (-> (Bool Nat Nat) Nat))
  (let ite2 (True ?x ?y) ?x)
  (let ite2 (False ?x ?y) ?y)
  (:: max (-> (Nat) Nat))
  (let max (?tv17) (ite2 (lq Zero ?tv17) ?tv17 Zero))
  (data Tuple3 (MakeTuple3))
  (:: MakeTuple3 (-> (Nat Nat) Tuple3))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: fst3 (-> (Tuple3) Nat))
  (let fst3 ((MakeTuple3 ?x0 ?x1)) ?x0)
  (:: snd3 (-> (Tuple3) Nat))
  (let snd3 ((MakeTuple3 ?x0 ?x1)) ?x1)
  (:: tf5 (-> (List) Tuple3))
  (let tf5 ((Nil ?tv21)) (MakeTuple3 Zero Zero))
  (let tf5 ((Cons ?tv22 ?tv23)) (MakeTuple3 (max (plus (fst3 (tf4 ?tv23)) ?tv22)) (plus (snd3 (tf4 ?tv23)) ?tv22)))
  (:: tf4 (-> (List) Tuple3))
  (let tf4 (?tv19) (tf5 ?tv19))
  (:: spec (-> (List) Nat))
  (let spec (?tv18) (fst3 (tf4 ?tv18)))
  (:: main (-> (CList) Nat))
  (let main (?tv24) (spec (repr ?tv24)))
  (:: tf7 (-> (CList) Tuple3))
  (let tf7 ((Cnil ?tv28)) (MakeTuple3 Zero Zero))
  (let tf7 ((Single ?tv29)) (MakeTuple3 (ite2 (lq ?tv29 Zero) Zero ?tv29) ?tv29))
  (let tf7 ((Concat ?tv30 ?tv31)) (MakeTuple3 (ite2 (lq (fst3 (tf6 ?tv30)) (plus (snd3 (tf6 ?tv30)) (fst3 (tf6 ?tv31)))) (plus (snd3 (tf6 ?tv30)) (fst3 (tf6 ?tv31))) (fst3 (tf6 ?tv30))) (plus (snd3 (tf6 ?tv30)) (snd3 (tf6 ?tv31)))))
  (:: tf6 (-> (CList) Tuple3))
  (let tf6 (?tv26) (tf7 ?tv26))
  (:: reprNew (-> (CList) Tuple3))
  (let reprNew (?tv25) (tf6 ?tv25))
  (:: mainNew (-> (CList) Nat))
  (let mainNew (?tv32) (fst3 (reprNew ?tv32)))
  (=== optimize (inp0) (CList) (main inp0) (mainNew inp0))
)
