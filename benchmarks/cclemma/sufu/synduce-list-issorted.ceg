(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data SList (Elt Cons))
  (:: Elt (-> (Nat) SList))
  (:: Cons (-> (Nat SList) SList))
  (data CList (Single Concat))
  (:: Single (-> (Nat) CList))
  (:: Concat (-> (CList CList) CList))
  (:: tf1 (-> (SList SList) SList))
  (let tf1 (?tv5 (Elt ?tv6)) (Cons ?tv6 ?tv5))
  (let tf1 (?tv5 (Cons ?tv7 ?tv8)) (Cons ?tv7 (tf0 ?tv8 ?tv5)))
  (:: tf0 (-> (SList SList) SList))
  (let tf0 (?tv2 ?tv3) (tf1 ?tv3 ?tv2))
  (:: catlist (-> (SList SList) SList))
  (let catlist (?tv0 ?tv1) (tf0 ?tv0 ?tv1))
  (:: tf3 (-> (CList) SList))
  (let tf3 ((Single ?tv12)) (Elt ?tv12))
  (let tf3 ((Concat ?tv13 ?tv14)) (catlist (tf2 ?tv13) (tf2 ?tv14)))
  (:: tf2 (-> (CList) SList))
  (let tf2 (?tv10) (tf3 ?tv10))
  (:: repr (-> (CList) SList))
  (let repr (?tv9) (tf2 ?tv9))
  (data Tuple2 (MakeTuple2))
  (:: MakeTuple2 (-> (Nat Nat Bool) Tuple2))
  (:: snd2 (-> (Tuple2) Nat))
  (let snd2 ((MakeTuple2 ?x0 ?x1 ?x2)) ?x1)
  (:: and (-> (Bool Bool) Bool))
  (let and (False ?x) False)
  (let and (?x False) False)
  (let and (True True) True)
  (:: third2 (-> (Tuple2) Bool))
  (let third2 ((MakeTuple2 ?x0 ?x1 ?x2)) ?x2)
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: fst2 (-> (Tuple2) Nat))
  (let fst2 ((MakeTuple2 ?x0 ?x1 ?x2)) ?x0)
  (:: tf5 (-> (SList) Tuple2))
  (let tf5 ((Elt ?tv18)) (MakeTuple2 ?tv18 ?tv18 True))
  (let tf5 ((Cons ?tv19 ?tv20)) (MakeTuple2 ?tv19 (snd2 (tf4 ?tv20)) (and (third2 (tf4 ?tv20)) (lq ?tv19 (fst2 (tf4 ?tv20))))))
  (:: tf4 (-> (SList) Tuple2))
  (let tf4 (?tv16) (tf5 ?tv16))
  (:: spec (-> (SList) Bool))
  (let spec (?tv15) (third2 (tf4 ?tv15)))
  (:: main (-> (CList) Bool))
  (let main (?tv21) (spec (repr ?tv21)))
  (data Tuple3 (MakeTuple3))
  (:: MakeTuple3 (-> (Bool Nat Nat) Tuple3))
  (:: fst3 (-> (Tuple3) Bool))
  (let fst3 ((MakeTuple3 ?x0 ?x1 ?x2)) ?x0)
  (:: third3 (-> (Tuple3) Nat))
  (let third3 ((MakeTuple3 ?x0 ?x1 ?x2)) ?x2)
  (:: snd3 (-> (Tuple3) Nat))
  (let snd3 ((MakeTuple3 ?x0 ?x1 ?x2)) ?x1)
  (:: tf7 (-> (CList) Tuple3))
  (let tf7 ((Single ?tv25)) (MakeTuple3 True ?tv25 ?tv25))
  (let tf7 ((Concat ?tv26 ?tv27)) (MakeTuple3 (and (and (fst3 (tf6 ?tv26)) (fst3 (tf6 ?tv27))) (lq (third3 (tf6 ?tv26)) (snd3 (tf6 ?tv27)))) (snd3 (tf6 ?tv26)) (third3 (tf6 ?tv27))))
  (:: tf6 (-> (CList) Tuple3))
  (let tf6 (?tv23) (tf7 ?tv23))
  (:: reprNew (-> (CList) Tuple3))
  (let reprNew (?tv22) (tf6 ?tv22))
  (:: mainNew (-> (CList) Bool))
  (let mainNew (?tv28) (fst3 (reprNew ?tv28)))
  (=== optimize (inp0) (CList) (main inp0) (mainNew inp0))
)
