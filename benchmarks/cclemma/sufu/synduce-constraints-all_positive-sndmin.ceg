(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data CList (Cnil Single Concat))
  (:: Cnil (-> (Unit) CList))
  (:: Single (-> (Nat) CList))
  (:: Concat (-> (CList CList) CList))
  (data List (Nil Cons))
  (:: Nil (-> (Unit) List))
  (:: Cons (-> (Nat List) List))
  (:: gq (-> (Nat Nat) Bool))
  (let gq (Zero ?x) False)
  (let gq ((Succ ?x) Zero) True)
  (let gq ((Succ ?x) (Succ ?y)) (gq ?x ?y))
  (:: and (-> (Bool Bool) Bool))
  (let and (False ?x) False)
  (let and (?x False) False)
  (let and (True True) True)
  (:: tf1 (-> (CList) Bool))
  (let tf1 ((Cnil ?tv3)) True)
  (let tf1 ((Single ?tv4)) (gq ?tv4 Zero))
  (let tf1 ((Concat ?tv5 ?tv6)) (and (tf0 ?tv5) (tf0 ?tv6)))
  (:: tf0 (-> (CList) Bool))
  (let tf0 (?tv1) (tf1 ?tv1))
  (:: allpos (-> (CList) Bool))
  (let allpos (?tv0) (tf0 ?tv0))
  (:: tf3 (-> (List List) List))
  (let tf3 (?tv11 (Cons ?tv13 ?tv14)) (Cons ?tv13 (tf2 ?tv14 ?tv11)))
  (let tf3 (?tv11 (Nil ?tv15)) ?tv11)
  (:: tf2 (-> (List List) List))
  (let tf2 (?tv9 ?tv10) (tf3 ?tv10 ?tv9))
  (:: cat (-> (List List) List))
  (let cat (?tv7 ?tv8) (tf2 ?tv7 ?tv8))
  (:: tf5 (-> (CList) List))
  (let tf5 ((Cnil ?tv19)) (Nil Null))
  (let tf5 ((Single ?tv20)) (Cons ?tv20 (Nil Null)))
  (let tf5 ((Concat ?tv21 ?tv22)) (cat (tf4 ?tv21) (tf4 ?tv22)))
  (:: tf4 (-> (CList) List))
  (let tf4 (?tv17) (tf5 ?tv17))
  (:: repr (-> (CList) List))
  (let repr (?tv16) (tf4 ?tv16))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: ite2 (-> (Bool Nat Nat) Nat))
  (let ite2 (True ?x ?y) ?x)
  (let ite2 (False ?x ?y) ?y)
  (:: min (-> (Nat Nat) Nat))
  (let min (?tv23 ?tv24) (ite2 (lq ?tv23 ?tv24) ?tv23 ?tv24))
  (:: max (-> (Nat Nat) Nat))
  (let max (?tv25 ?tv26) (ite2 (lq ?tv25 ?tv26) ?tv26 ?tv25))
  (data Tuple3 (MakeTuple3))
  (:: MakeTuple3 (-> (Nat Nat) Tuple3))
  (:: fst3 (-> (Tuple3) Nat))
  (let fst3 ((MakeTuple3 ?x0 ?x1)) ?x0)
  (:: snd3 (-> (Tuple3) Nat))
  (let snd3 ((MakeTuple3 ?x0 ?x1)) ?x1)
  (:: tf7 (-> (List) Tuple3))
  (let tf7 ((Nil ?tv30)) (MakeTuple3 Zero Zero))
  (let tf7 ((Cons ?tv31 ?tv32)) (MakeTuple3 (min ?tv31 (fst3 (tf6 ?tv32))) (min (snd3 (tf6 ?tv32)) (max (fst3 (tf6 ?tv32)) ?tv31))))
  (:: tf6 (-> (List) Tuple3))
  (let tf6 (?tv28) (tf7 ?tv28))
  (:: spec (-> (List) Nat))
  (let spec (?tv27) (snd3 (tf6 ?tv27)))
  (:: tf9 (-> (CList) CList))
  (let tf9 ((Cnil ?tv36)) (Cnil Null))
  (let tf9 ((Single ?tv37)) (Single ?tv37))
  (let tf9 ((Concat ?tv38 ?tv39)) (Concat (tf8 ?tv38) (tf8 ?tv39)))
  (:: tf8 (-> (CList) CList))
  (let tf8 (?tv34) (tf9 ?tv34))
  (:: target (-> (CList) CList))
  (let target (?tv33) (tf8 ?tv33))
  (:: main (-> (CList) Nat))
  (let main (?tv40) (ite2 (allpos ?tv40) (spec (repr (target ?tv40))) Zero))
  (:: mainNew (-> (CList) Nat))
  (let mainNew (?tv41) (ite2 (allpos ?tv41) Zero Zero))
  (=== optimize (inp0) (CList) (main inp0) (mainNew inp0))
)
