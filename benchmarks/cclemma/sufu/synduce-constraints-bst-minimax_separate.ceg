(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data Tree (Leaf Node))
  (:: Leaf (-> (Nat) Tree))
  (:: Node (-> (Nat Tree Tree) Tree))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: ite1 (-> (Bool Nat Nat) Nat))
  (let ite1 (True ?x ?y) ?x)
  (let ite1 (False ?x ?y) ?y)
  (:: min (-> (Nat Nat) Nat))
  (let min (?tv0 ?tv1) (ite1 (lq ?tv0 ?tv1) ?tv0 ?tv1))
  (:: max (-> (Nat Nat) Nat))
  (let max (?tv2 ?tv3) (ite1 (lq ?tv2 ?tv3) ?tv3 ?tv2))
  (:: tf1 (-> (Tree) Nat))
  (let tf1 ((Leaf ?tv7)) ?tv7)
  (let tf1 ((Node ?tv8 ?tv9 ?tv10)) (min ?tv8 (min (tf0 ?tv9) (tf0 ?tv10))))
  (:: tf0 (-> (Tree) Nat))
  (let tf0 (?tv5) (tf1 ?tv5))
  (:: tmin (-> (Tree) Nat))
  (let tmin (?tv4) (tf0 ?tv4))
  (:: tf3 (-> (Tree) Nat))
  (let tf3 ((Leaf ?tv14)) ?tv14)
  (let tf3 ((Node ?tv15 ?tv16 ?tv17)) (max ?tv15 (max (tf2 ?tv16) (tf2 ?tv17))))
  (:: tf2 (-> (Tree) Nat))
  (let tf2 (?tv12) (tf3 ?tv12))
  (:: tmax (-> (Tree) Nat))
  (let tmax (?tv11) (tf2 ?tv11))
  (:: and (-> (Bool Bool) Bool))
  (let and (False ?x) False)
  (let and (?x False) False)
  (let and (True True) True)
  (:: geq (-> (Nat Nat) Bool))
  (let geq (Zero (Succ ?x)) False)
  (let geq (?x Zero) True)
  (let geq ((Succ ?x) (Succ ?y)) (geq ?x ?y))
  (:: leq (-> (Nat Nat) Bool))
  (let leq (Zero ?x) True)
  (let leq ((Succ ?x) Zero) False)
  (let leq ((Succ ?x) (Succ ?y)) (leq ?x ?y))
  (:: tf5 (-> (Tree) Bool))
  (let tf5 ((Leaf ?tv21)) True)
  (let tf5 ((Node ?tv22 ?tv23 ?tv24)) (and (and (geq ?tv22 (tmax ?tv23)) (leq ?tv22 (tmin ?tv24))) (and (tf4 ?tv23) (tf4 ?tv24))))
  (:: tf4 (-> (Tree) Bool))
  (let tf4 (?tv19) (tf5 ?tv19))
  (:: isbst (-> (Tree) Bool))
  (let isbst (?tv18) (tf4 ?tv18))
  (data Tuple2 (MakeTuple2))
  (:: MakeTuple2 (-> (Nat Nat) Tuple2))
  (:: fst2 (-> (Tuple2) Nat))
  (let fst2 ((MakeTuple2 ?x0 ?x1)) ?x0)
  (:: snd2 (-> (Tuple2) Nat))
  (let snd2 ((MakeTuple2 ?x0 ?x1)) ?x1)
  (:: tf7 (-> (Tree) Tuple2))
  (let tf7 ((Leaf ?tv28)) (MakeTuple2 ?tv28 ?tv28))
  (let tf7 ((Node ?tv29 ?tv30 ?tv31)) (MakeTuple2 (max ?tv29 (max (fst2 (tf6 ?tv30)) (fst2 (tf6 ?tv31)))) (min ?tv29 (min (snd2 (tf6 ?tv30)) (snd2 (tf6 ?tv31))))))
  (:: tf6 (-> (Tree) Tuple2))
  (let tf6 (?tv26) (tf7 ?tv26))
  (:: spec (-> (Tree) Tuple2))
  (let spec (?tv25) (tf6 ?tv25))
  (:: tf9 (-> (Tree) Tree))
  (let tf9 ((Leaf ?tv34)) (Leaf ?tv34))
  (let tf9 ((Node ?tv35 ?tv36 ?tv37)) (Node ?tv35 ?tv36 ?tv37))
  (:: tf8 (-> (Tree) Tree))
  (let tf8 (?tv33) (tf9 ?tv33))
  (:: target (-> (Tree) Tree))
  (let target (?tv32) (tf8 ?tv32))
  (:: ite2 (-> (Bool Tuple2) Tuple2))
  (let ite2 (True ?x) ?x)
  (let ite2 (False ?x) (MakeTuple2 Zero Zero))
  (:: main (-> (Tree) Tuple2))
  (let main (?tv38) (ite2 (isbst ?tv38) (spec (target ?tv38))))
  (:: tf11 (-> (Tree) Tuple2))
  (let tf11 ((Leaf ?tv41)) (MakeTuple2 ?tv41 ?tv41))
  (let tf11 ((Node ?tv42 ?tv43 ?tv44)) (MakeTuple2 (tmax ?tv44) (tmin ?tv43)))
  (:: tf10 (-> (Tree) Tuple2))
  (let tf10 (?tv40) (tf11 ?tv40))
  (:: targetNew (-> (Tree) Tuple2))
  (let targetNew (?tv39) (tf10 ?tv39))
  (:: mainNew (-> (Tree) Tuple2))
  (let mainNew (?tv45) (ite2 (isbst ?tv45) (MakeTuple2 (fst2 (targetNew ?tv45)) (snd2 (targetNew ?tv45)))))
  (=== optimize (inp0) (Tree) (main inp0) (mainNew inp0))
)
