(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data CList (Cnil Single Concat))
  (:: Cnil (-> (Unit) CList))
  (:: Single (-> (Nat) CList))
  (:: Concat (-> (CList CList) CList))
  (data List (Nil Cons))
  (:: Nil (-> (Unit) List))
  (:: Cons (-> (Nat List) List))
  (:: tf1 (-> (List List) List))
  (let tf1 (?tv4 (Cons ?tv6 ?tv7)) (Cons ?tv6 (tf0 ?tv7 ?tv4)))
  (let tf1 (?tv4 (Nil ?tv8)) ?tv4)
  (:: tf0 (-> (List List) List))
  (let tf0 (?tv2 ?tv3) (tf1 ?tv3 ?tv2))
  (:: cat (-> (List List) List))
  (let cat (?tv0 ?tv1) (tf0 ?tv0 ?tv1))
  (:: tf3 (-> (CList) List))
  (let tf3 ((Cnil ?tv12)) (Nil Null))
  (let tf3 ((Single ?tv13)) (Cons ?tv13 (Nil Null)))
  (let tf3 ((Concat ?tv14 ?tv15)) (cat (tf2 ?tv14) (tf2 ?tv15)))
  (:: tf2 (-> (CList) List))
  (let tf2 (?tv10) (tf3 ?tv10))
  (:: repr (-> (CList) List))
  (let repr (?tv9) (tf2 ?tv9))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: tf5 (-> (List) Nat))
  (let tf5 ((Nil ?tv19)) Zero)
  (let tf5 ((Cons ?tv20 ?tv21)) (plus ?tv20 (tf4 ?tv21)))
  (:: tf4 (-> (List) Nat))
  (let tf4 (?tv17) (tf5 ?tv17))
  (:: spec (-> (List) Nat))
  (let spec (?tv16) (tf4 ?tv16))
  (:: main (-> (CList) Nat))
  (let main (?tv22) (spec (repr ?tv22)))
  (:: tf7 (-> (CList) Nat))
  (let tf7 ((Cnil ?tv26)) Zero)
  (let tf7 ((Single ?tv27)) ?tv27)
  (let tf7 ((Concat ?tv28 ?tv29)) (plus (tf6 ?tv28) (tf6 ?tv29)))
  (:: tf6 (-> (CList) Nat))
  (let tf6 (?tv24) (tf7 ?tv24))
  (:: reprNew (-> (CList) Nat))
  (let reprNew (?tv23) (tf6 ?tv23))
  (:: mainNew (-> (CList) Nat))
  (let mainNew (?tv30) (reprNew ?tv30))
  (=== optimize (inp0) (CList) (main inp0) (mainNew inp0))
)
