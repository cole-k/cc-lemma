(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data List (Cons Nil))
  (:: Cons (-> (Bool List) List))
  (:: Nil (-> (Unit) List))
  (:: tf1 (-> (List List) List))
  (let tf1 (?tv4 (Nil ?tv5)) ?tv4)
  (let tf1 (?tv4 (Cons ?tv6 ?tv7)) (Cons ?tv6 (tf0 ?tv7)))
  (:: tf0 (-> (List) List))
  (let tf0 (?tv2) (tf1 ?tv2 ?tv2))
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (:: tf2 (-> (List) Nat))
  (let tf2 (?tv9) (count10p (tf0 ?tv9)))
  (:: singlepass (-> (List) Nat))
  (let singlepass (?tv1) (tf2 ?tv1))
  (:: and (-> (Bool Bool) Bool))
  (let and (False ?x) False)
  (let and (?x False) False)
  (let and (True True) True)
  (:: ite1 (-> (Bool Nat Nat) Nat))
  (let ite1 (True ?x ?y) ?x)
  (let ite1 (False ?x ?y) ?y)
  (:: not (-> (Bool) Bool))
  (let not (True) False)
  (let not (False) True)
  (:: or (-> (Bool Bool) Bool))
  (let or (True ?x) True)
  (let or (?x True) True)
  (let or (False False) False)
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: tf4 (-> (Bool Bool List) Nat))
  (let tf4 (?tv15 ?tv16 (Nil ?tv17)) Zero)
  (let tf4 (?tv15 ?tv16 (Cons ?tv18 ?tv19)) (plus (ite1 (and ?tv16 ?tv18) (Succ Zero) Zero) (tf3 ?tv18 (and (not ?tv18) (or ?tv15 ?tv16)) ?tv19)))
  (:: tf3 (-> (Bool Bool List) Nat))
  (let tf3 (?tv11 ?tv12 ?tv13) (tf4 ?tv11 ?tv12 ?tv13))
  (:: count10p (-> (List) Nat))
  (let count10p (?tv10) (tf3 False False ?tv10))
  (:: main (-> (List) Nat))
  (let main (?tv20) (singlepass ?tv20))
  (:: tf5 (-> (List) Bool))
  (let tf5 ((Nil ?tv22)) False)
  (let tf5 ((Cons ?tv23 ?tv24)) ?tv23)
  (:: alhead (-> (List) Bool))
  (let alhead (?tv21) (tf5 ?tv21))
  (data Tuple2 (MakeTuple2))
  (:: MakeTuple2 (-> (Nat Nat) Tuple2))
  (:: nateq (-> (Nat Nat) Bool))
  (let nateq (Zero Zero) True)
  (let nateq (Zero (Succ ?x)) False)
  (let nateq ((Succ ?x) Zero) False)
  (let nateq ((Succ ?x) (Succ ?y)) (nateq ?x ?y))
  (:: fst2 (-> (Tuple2) Nat))
  (let fst2 ((MakeTuple2 ?x0 ?x1)) ?x0)
  (:: snd2 (-> (Tuple2) Nat))
  (let snd2 ((MakeTuple2 ?x0 ?x1)) ?x1)
  (:: tf7 (-> (List) Tuple2))
  (let tf7 ((Nil ?tv29)) (MakeTuple2 Zero Zero))
  (let tf7 ((Cons ?tv30 ?tv31)) (MakeTuple2 (ite1 (or (or (not ?tv30) (nateq (fst2 (tf6 ?tv31)) (snd2 (tf6 ?tv31)))) (alhead ?tv31)) (fst2 (tf6 ?tv31)) (plus (Succ Zero) (fst2 (tf6 ?tv31)))) (ite1 (not ?tv30) (snd2 (tf6 ?tv31)) (plus (Succ Zero) (snd2 (tf6 ?tv31))))))
  (:: tf6 (-> (List) Tuple2))
  (let tf6 (?tv27) (tf7 ?tv27))
  (:: tf8 (-> (List) Nat))
  (let tf8 (?tv32) (fst2 (tf6 ?tv32)))
  (:: singlepassNew (-> (List) Nat))
  (let singlepassNew (?tv26) (tf8 ?tv26))
  (:: mainNew (-> (List) Nat))
  (let mainNew (?tv33) (singlepassNew ?tv33))
  (=== optimize (inp0) (List) (main inp0) (mainNew inp0))
)
