(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data CList (Empty Elt Concat))
  (:: Empty (-> (Unit) CList))
  (:: Elt (-> (Nat) CList))
  (:: Concat (-> (CList CList) CList))
  (data List (Nil Cons))
  (:: Nil (-> (Unit) List))
  (:: Cons (-> (Nat List) List))
  (:: tf1 (-> (List List) List))
  (let tf1 (?tv5 (Nil ?tv6)) ?tv5)
  (let tf1 (?tv5 (Cons ?tv7 ?tv8)) (Cons ?tv7 (tf0 ?tv8 ?tv5)))
  (:: tf0 (-> (List List) List))
  (let tf0 (?tv2 ?tv3) (tf1 ?tv3 ?tv2))
  (:: cat (-> (List List) List))
  (let cat (?tv0 ?tv1) (tf0 ?tv0 ?tv1))
  (:: tf3 (-> (CList) List))
  (let tf3 ((Empty ?tv12)) (Nil Null))
  (let tf3 ((Elt ?tv13)) (Cons ?tv13 (Nil Null)))
  (let tf3 ((Concat ?tv14 ?tv15)) (cat (tf2 ?tv14) (tf2 ?tv15)))
  (:: tf2 (-> (CList) List))
  (let tf2 (?tv10) (tf3 ?tv10))
  (:: repr (-> (CList) List))
  (let repr (?tv9) (tf2 ?tv9))
  (:: geq (-> (Nat Nat) Bool))
  (let geq (Zero (Succ ?x)) False)
  (let geq (?x Zero) True)
  (let geq ((Succ ?x) (Succ ?y)) (geq ?x ?y))
  (:: tf4 (-> (Nat List) Bool))
  (let tf4 (?tv18 (Nil ?tv19)) True)
  (let tf4 (?tv18 (Cons ?tv20 ?tv21)) (geq ?tv18 ?tv20))
  (:: geqhead (-> (Nat List) Bool))
  (let geqhead (?tv16 ?tv17) (tf4 ?tv16 ?tv17))
  (:: and (-> (Bool Bool) Bool))
  (let and (False ?x) False)
  (let and (?x False) False)
  (let and (True True) True)
  (:: tf6 (-> (List) Bool))
  (let tf6 ((Nil ?tv25)) True)
  (let tf6 ((Cons ?tv26 ?tv27)) (and (geqhead ?tv26 ?tv27) (tf5 ?tv27)))
  (:: tf5 (-> (List) Bool))
  (let tf5 (?tv23) (tf6 ?tv23))
  (:: issorted (-> (List) Bool))
  (let issorted (?tv22) (tf5 ?tv22))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: ite2 (-> (Bool Nat Nat) Nat))
  (let ite2 (True ?x ?y) ?x)
  (let ite2 (False ?x ?y) ?y)
  (:: min (-> (Nat Nat) Nat))
  (let min (?tv28 ?tv29) (ite2 (lq ?tv28 ?tv29) ?tv28 ?tv29))
  (:: gq (-> (Nat Nat) Bool))
  (let gq (Zero ?x) False)
  (let gq ((Succ ?x) Zero) True)
  (let gq ((Succ ?x) (Succ ?y)) (gq ?x ?y))
  (:: max (-> (Nat Nat) Nat))
  (let max (?tv30 ?tv31) (ite2 (gq ?tv30 ?tv31) ?tv30 ?tv31))
  (data Tuple3 (MakeTuple3))
  (:: MakeTuple3 (-> (Nat Nat) Tuple3))
  (:: fst3 (-> (Tuple3) Nat))
  (let fst3 ((MakeTuple3 ?x0 ?x1)) ?x0)
  (:: snd3 (-> (Tuple3) Nat))
  (let snd3 ((MakeTuple3 ?x0 ?x1)) ?x1)
  (:: tf8 (-> (List) Tuple3))
  (let tf8 ((Nil ?tv35)) (MakeTuple3 Zero Zero))
  (let tf8 ((Cons ?tv36 ?tv37)) (MakeTuple3 (max (fst3 (tf7 ?tv37)) ?tv36) (max (snd3 (tf7 ?tv37)) (min (fst3 (tf7 ?tv37)) ?tv36))))
  (:: tf7 (-> (List) Tuple3))
  (let tf7 (?tv33) (tf8 ?tv33))
  (:: spec (-> (List) Nat))
  (let spec (?tv32) (snd3 (tf7 ?tv32)))
  (:: tf10 (-> (CList CList) CList))
  (let tf10 (?tv41 (Empty ?tv42)) ?tv41)
  (let tf10 (?tv41 (Elt ?tv43)) ?tv41)
  (let tf10 (?tv41 (Concat ?tv44 ?tv45)) (Concat (tf9 ?tv44) (tf9 ?tv45)))
  (:: tf9 (-> (CList) CList))
  (let tf9 (?tv39) (tf10 ?tv39 ?tv39))
  (:: target (-> (CList) CList))
  (let target (?tv38) (tf9 ?tv38))
  (:: main (-> (CList) Nat))
  (let main (?tv46) (ite2 (issorted (repr ?tv46)) (spec (repr (target ?tv46))) Zero))
  (:: nateq (-> (Nat Nat) Bool))
  (let nateq (Zero Zero) True)
  (let nateq (Zero (Succ ?x)) False)
  (let nateq ((Succ ?x) Zero) False)
  (let nateq ((Succ ?x) (Succ ?y)) (nateq ?x ?y))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: tf12 (-> (CList) Tuple3))
  (let tf12 ((Empty ?tv50)) (MakeTuple3 Zero Zero))
  (let tf12 ((Elt ?tv51)) (MakeTuple3 Zero (max ?tv51 Zero)))
  (let tf12 ((Concat ?tv52 ?tv53)) (MakeTuple3 (ite2 (and (lq (fst3 (tf11 ?tv52)) (snd3 (tf11 ?tv52))) (nateq (fst3 (tf11 ?tv52)) Zero)) (snd3 (tf11 ?tv53)) (ite2 (nateq (fst3 (tf11 ?tv52)) Zero) (plus (fst3 (tf11 ?tv52)) (fst3 (tf11 ?tv53))) (fst3 (tf11 ?tv52)))) (max (snd3 (tf11 ?tv52)) (snd3 (tf11 ?tv53)))))
  (:: tf11 (-> (CList) Tuple3))
  (let tf11 (?tv48) (tf12 ?tv48))
  (:: targetNew (-> (CList) Tuple3))
  (let targetNew (?tv47) (tf11 ?tv47))
  (:: mainNew (-> (CList) Nat))
  (let mainNew (?tv54) (ite2 (issorted (repr ?tv54)) (fst3 (targetNew ?tv54)) Zero))
  (=== optimize (inp0) (CList) (main inp0) (mainNew inp0))
)
