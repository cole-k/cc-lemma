(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data List (Elt Cons))
  (:: Elt (-> (Nat) List))
  (:: Cons (-> (Nat List) List))
  (data NList (Line Ncons))
  (:: Line (-> (List) NList))
  (:: Ncons (-> (List NList) NList))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: ite2 (-> (Bool Nat Nat) Nat))
  (let ite2 (True ?x ?y) ?x)
  (let ite2 (False ?x ?y) ?y)
  (:: max (-> (Nat Nat) Nat))
  (let max (?tv0 ?tv1) (ite2 (lq ?tv0 ?tv1) ?tv1 ?tv0))
  (:: gq (-> (Nat Nat) Bool))
  (let gq (Zero ?x) False)
  (let gq ((Succ ?x) Zero) True)
  (let gq ((Succ ?x) (Succ ?y)) (gq ?x ?y))
  (:: min (-> (Nat Nat) Nat))
  (let min (?tv2 ?tv3) (ite2 (gq ?tv2 ?tv3) ?tv3 ?tv2))
  (data Tuple3 (MakeTuple3))
  (:: MakeTuple3 (-> (Nat Nat) Tuple3))
  (:: fst3 (-> (Tuple3) Nat))
  (let fst3 ((MakeTuple3 ?x0 ?x1)) ?x0)
  (:: snd3 (-> (Tuple3) Nat))
  (let snd3 ((MakeTuple3 ?x0 ?x1)) ?x1)
  (:: tf1 (-> (List) Tuple3))
  (let tf1 ((Elt ?tv7)) (MakeTuple3 ?tv7 ?tv7))
  (let tf1 ((Cons ?tv8 ?tv9)) (MakeTuple3 (min ?tv8 (fst3 (tf0 ?tv9))) (max ?tv8 (snd3 (tf0 ?tv9)))))
  (:: tf0 (-> (List) Tuple3))
  (let tf0 (?tv5) (tf1 ?tv5))
  (:: interval (-> (List) Tuple3))
  (let interval (?tv4) (tf0 ?tv4))
  (data Tuple4 (MakeTuple4))
  (:: MakeTuple4 (-> (Nat Nat Bool) Tuple4))
  (:: fst4 (-> (Tuple4) Nat))
  (let fst4 ((MakeTuple4 ?x0 ?x1 ?x2)) ?x0)
  (:: snd4 (-> (Tuple4) Nat))
  (let snd4 ((MakeTuple4 ?x0 ?x1 ?x2)) ?x1)
  (:: and (-> (Bool Bool) Bool))
  (let and (False ?x) False)
  (let and (?x False) False)
  (let and (True True) True)
  (:: third4 (-> (Tuple4) Bool))
  (let third4 ((MakeTuple4 ?x0 ?x1 ?x2)) ?x2)
  (:: leq (-> (Nat Nat) Bool))
  (let leq (Zero ?x) True)
  (let leq ((Succ ?x) Zero) False)
  (let leq ((Succ ?x) (Succ ?y)) (leq ?x ?y))
  (:: tf3 (-> (NList) Tuple4))
  (let tf3 ((Line ?tv13)) (MakeTuple4 (fst3 (interval ?tv13)) (snd3 (interval ?tv13)) True))
  (let tf3 ((Ncons ?tv14 ?tv15)) (MakeTuple4 (min (fst4 (tf2 ?tv15)) (fst3 (interval ?tv14))) (max (snd4 (tf2 ?tv15)) (snd3 (interval ?tv14))) (and (third4 (tf2 ?tv15)) (and (leq (fst4 (tf2 ?tv15)) (fst3 (interval ?tv14))) (leq (snd4 (tf2 ?tv15)) (snd3 (interval ?tv14)))))))
  (:: tf2 (-> (NList) Tuple4))
  (let tf2 (?tv11) (tf3 ?tv11))
  (:: spec (-> (NList) Bool))
  (let spec (?tv10) (third4 (tf2 ?tv10)))
  (:: tf5 (-> (NList NList) NList))
  (let tf5 (?tv19 (Line ?tv20)) ?tv19)
  (let tf5 (?tv19 (Ncons ?tv21 ?tv22)) (Ncons ?tv21 (tf4 ?tv22)))
  (:: tf4 (-> (NList) NList))
  (let tf4 (?tv17) (tf5 ?tv17 ?tv17))
  (:: target (-> (NList) NList))
  (let target (?tv16) (tf4 ?tv16))
  (:: main (-> (NList) Bool))
  (let main (?tv23) (spec (target ?tv23)))
  (data Tuple5 (MakeTuple5))
  (:: MakeTuple5 (-> (Bool Nat Nat) Tuple5))
  (:: snd5 (-> (Tuple5) Nat))
  (let snd5 ((MakeTuple5 ?x0 ?x1 ?x2)) ?x1)
  (:: fst5 (-> (Tuple5) Bool))
  (let fst5 ((MakeTuple5 ?x0 ?x1 ?x2)) ?x0)
  (:: third5 (-> (Tuple5) Nat))
  (let third5 ((MakeTuple5 ?x0 ?x1 ?x2)) ?x2)
  (:: tf7 (-> (NList) Tuple5))
  (let tf7 ((Line ?tv27)) (MakeTuple5 True (fst3 (interval ?tv27)) (snd3 (interval ?tv27))))
  (let tf7 ((Ncons ?tv28 ?tv29)) (MakeTuple5 (and (and (leq (snd5 (tf6 ?tv29)) (fst3 (interval ?tv28))) (fst5 (tf6 ?tv29))) (leq (third5 (tf6 ?tv29)) (snd3 (interval ?tv28)))) (snd5 (tf6 ?tv29)) (snd3 (interval ?tv28))))
  (:: tf6 (-> (NList) Tuple5))
  (let tf6 (?tv25) (tf7 ?tv25))
  (:: targetNew (-> (NList) Tuple5))
  (let targetNew (?tv24) (tf6 ?tv24))
  (:: mainNew (-> (NList) Bool))
  (let mainNew (?tv30) (fst5 (targetNew ?tv30)))
  (=== optimize (inp0) (NList) (main inp0) (mainNew inp0))
)
