(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data Tree (Nil Node))
  (:: Nil (-> (Unit) Tree))
  (:: Node (-> (Nat Tree Tree) Tree))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: ite1 (-> (Bool Nat Nat) Nat))
  (let ite1 (True ?x ?y) ?x)
  (let ite1 (False ?x ?y) ?y)
  (:: max (-> (Nat Nat) Nat))
  (let max (?tv0 ?tv1) (ite1 (lq ?tv0 ?tv1) ?tv1 ?tv0))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: tf1 (-> (Tree) Nat))
  (let tf1 ((Nil ?tv5)) Zero)
  (let tf1 ((Node ?tv6 ?tv7 ?tv8)) (plus (Succ Zero) (max (tf0 ?tv7) (tf0 ?tv8))))
  (:: tf0 (-> (Tree) Nat))
  (let tf0 (?tv3) (tf1 ?tv3))
  (:: height (-> (Tree) Nat))
  (let height (?tv2) (tf0 ?tv2))
  (:: and (-> (Bool Bool) Bool))
  (let and (False ?x) False)
  (let and (?x False) False)
  (let and (True True) True)
  (:: nateq (-> (Nat Nat) Bool))
  (let nateq (Zero Zero) True)
  (let nateq (Zero (Succ ?x)) False)
  (let nateq ((Succ ?x) Zero) False)
  (let nateq ((Succ ?x) (Succ ?y)) (nateq ?x ?y))
  (:: tf3 (-> (Tree) Bool))
  (let tf3 ((Nil ?tv12)) True)
  (let tf3 ((Node ?tv13 ?tv14 ?tv15)) (and (and (nateq (height ?tv14) (height ?tv15)) (tf2 ?tv14)) (tf2 ?tv15)))
  (:: tf2 (-> (Tree) Bool))
  (let tf2 (?tv10) (tf3 ?tv10))
  (:: balanced (-> (Tree) Bool))
  (let balanced (?tv9) (tf2 ?tv9))
  (:: tf5 (-> (Tree) Nat))
  (let tf5 ((Nil ?tv19)) Zero)
  (let tf5 ((Node ?tv20 ?tv21 ?tv22)) (plus (Succ Zero) (plus (tf4 ?tv21) (tf4 ?tv22))))
  (:: tf4 (-> (Tree) Nat))
  (let tf4 (?tv17) (tf5 ?tv17))
  (:: spec (-> (Tree) Nat))
  (let spec (?tv16) (tf4 ?tv16))
  (:: tf7 (-> (Tree) Tree))
  (let tf7 ((Nil ?tv26)) (Nil Null))
  (let tf7 ((Node ?tv27 ?tv28 ?tv29)) (Node ?tv27 (tf6 ?tv28) ?tv29))
  (:: tf6 (-> (Tree) Tree))
  (let tf6 (?tv24) (tf7 ?tv24))
  (:: target (-> (Tree) Tree))
  (let target (?tv23) (tf6 ?tv23))
  (:: main (-> (Tree) Nat))
  (let main (?tv30) (ite1 (balanced ?tv30) (spec (target ?tv30)) Zero))
  (:: times (-> (Nat Nat) Nat))
  (let times (Zero ?x) Zero)
  (let times ((Succ ?x) ?y) (plus (times ?x ?y) ?y))
  (:: tf9 (-> (Tree) Nat))
  (let tf9 ((Nil ?tv34)) Zero)
  (let tf9 ((Node ?tv35 ?tv36 ?tv37)) (plus (times (Succ (Succ Zero)) (tf8 ?tv36)) (max (tf8 ?tv36) (Succ Zero))))
  (:: tf8 (-> (Tree) Nat))
  (let tf8 (?tv32) (tf9 ?tv32))
  (:: targetNew (-> (Tree) Nat))
  (let targetNew (?tv31) (tf8 ?tv31))
  (:: mainNew (-> (Tree) Nat))
  (let mainNew (?tv38) (ite1 (balanced ?tv38) (targetNew ?tv38) Zero))
  (=== optimize (inp0) (Tree) (main inp0) (mainNew inp0))
)
