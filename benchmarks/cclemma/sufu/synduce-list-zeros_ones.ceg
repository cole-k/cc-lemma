(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data List (Elt Cons))
  (:: Elt (-> (Bool) List))
  (:: Cons (-> (Bool List) List))
  (data CList (Single Concat))
  (:: Single (-> (Bool) CList))
  (:: Concat (-> (CList CList) CList))
  (:: tf1 (-> (List List) List))
  (let tf1 (?tv5 (Elt ?tv6)) (Cons ?tv6 ?tv5))
  (let tf1 (?tv5 (Cons ?tv7 ?tv8)) (Cons ?tv7 (tf0 ?tv8 ?tv5)))
  (:: tf0 (-> (List List) List))
  (let tf0 (?tv2 ?tv3) (tf1 ?tv3 ?tv2))
  (:: catlist (-> (List List) List))
  (let catlist (?tv0 ?tv1) (tf0 ?tv0 ?tv1))
  (:: tf3 (-> (CList) List))
  (let tf3 ((Single ?tv12)) (Elt ?tv12))
  (let tf3 ((Concat ?tv13 ?tv14)) (catlist (tf2 ?tv13) (tf2 ?tv14)))
  (:: tf2 (-> (CList) List))
  (let tf2 (?tv10) (tf3 ?tv10))
  (:: repr (-> (CList) List))
  (let repr (?tv9) (tf2 ?tv9))
  (data Tuple2 (MakeTuple2))
  (:: MakeTuple2 (-> (Bool Bool Bool) Tuple2))
  (:: and (-> (Bool Bool) Bool))
  (let and (False ?x) False)
  (let and (?x False) False)
  (let and (True True) True)
  (:: fst2 (-> (Tuple2) Bool))
  (let fst2 ((MakeTuple2 ?x0 ?x1 ?x2)) ?x0)
  (:: snd2 (-> (Tuple2) Bool))
  (let snd2 ((MakeTuple2 ?x0 ?x1 ?x2)) ?x1)
  (:: or (-> (Bool Bool) Bool))
  (let or (True ?x) True)
  (let or (?x True) True)
  (let or (False False) False)
  (:: not (-> (Bool) Bool))
  (let not (True) False)
  (let not (False) True)
  (:: third2 (-> (Tuple2) Bool))
  (let third2 ((MakeTuple2 ?x0 ?x1 ?x2)) ?x2)
  (:: tf5 (-> (List) Tuple2))
  (let tf5 ((Elt ?tv18)) (MakeTuple2 ?tv18 True ?tv18))
  (let tf5 ((Cons ?tv19 ?tv20)) (MakeTuple2 (and (fst2 (tf4 ?tv20)) ?tv19) (and (snd2 (tf4 ?tv20)) (or (fst2 (tf4 ?tv20)) (not ?tv19))) (third2 (tf4 ?tv20))))
  (:: tf4 (-> (List) Tuple2))
  (let tf4 (?tv16) (tf5 ?tv16))
  (:: spec (-> (List) Bool))
  (let spec (?tv15) (snd2 (tf4 ?tv15)))
  (:: main (-> (CList) Bool))
  (let main (?tv21) (spec (repr ?tv21)))
  (:: tf7 (-> (CList) Tuple2))
  (let tf7 ((Single ?tv25)) (MakeTuple2 True ?tv25 ?tv25))
  (let tf7 ((Concat ?tv26 ?tv27)) (MakeTuple2 (or (and (and (not (third2 (tf6 ?tv26))) (fst2 (tf6 ?tv26))) (fst2 (tf6 ?tv27))) (and (and (fst2 (tf6 ?tv26)) (fst2 (tf6 ?tv27))) (snd2 (tf6 ?tv27)))) (snd2 (tf6 ?tv26)) (third2 (tf6 ?tv27))))
  (:: tf6 (-> (CList) Tuple2))
  (let tf6 (?tv23) (tf7 ?tv23))
  (:: reprNew (-> (CList) Tuple2))
  (let reprNew (?tv22) (tf6 ?tv22))
  (:: mainNew (-> (CList) Bool))
  (let mainNew (?tv28) (fst2 (reprNew ?tv28)))
  (=== optimize (inp0) (CList) (main inp0) (mainNew inp0))
)
