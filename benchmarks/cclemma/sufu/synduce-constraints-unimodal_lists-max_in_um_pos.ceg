(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data UList (Unil Uelt Usplit))
  (:: Unil (-> (Unit) UList))
  (:: Uelt (-> (Nat) UList))
  (:: Usplit (-> (UList Nat Nat UList) UList))
  (data List (Nil Cons))
  (:: Nil (-> (Unit) List))
  (:: Cons (-> (Nat List) List))
  (:: tf1 (-> (List UList) List))
  (let tf1 (?tv4 (Unil ?tv5)) ?tv4)
  (let tf1 (?tv4 (Uelt ?tv6)) (Cons ?tv6 ?tv4))
  (let tf1 (?tv4 (Usplit ?tv7 ?tv8 ?tv9 ?tv10)) (tf0 (Cons ?tv8 (Cons ?tv9 (tf0 ?tv4 ?tv10))) ?tv7))
  (:: tf0 (-> (List UList) List))
  (let tf0 (?tv1 ?tv2) (tf1 ?tv1 ?tv2))
  (:: repr (-> (UList) List))
  (let repr (?tv0) (tf0 (Nil Null) ?tv0))
  (:: geq (-> (Nat Nat) Bool))
  (let geq (Zero (Succ ?x)) False)
  (let geq (?x Zero) True)
  (let geq ((Succ ?x) (Succ ?y)) (geq ?x ?y))
  (:: and (-> (Bool Bool) Bool))
  (let and (False ?x) False)
  (let and (?x False) False)
  (let and (True True) True)
  (:: gq (-> (Nat Nat) Bool))
  (let gq (Zero ?x) False)
  (let gq ((Succ ?x) Zero) True)
  (let gq ((Succ ?x) (Succ ?y)) (gq ?x ?y))
  (:: tf3 (-> (Nat List) Bool))
  (let tf3 (?tv15 (Nil ?tv16)) (geq ?tv15 Zero))
  (let tf3 (?tv15 (Cons ?tv17 ?tv18)) (and (geq ?tv15 Zero) (and (gq ?tv15 ?tv17) (tf2 ?tv17 ?tv18))))
  (:: tf2 (-> (Nat List) Bool))
  (let tf2 (?tv12 ?tv13) (tf3 ?tv12 ?tv13))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: ite2 (-> (Bool Bool Bool) Bool))
  (let ite2 (True ?x ?y) ?x)
  (let ite2 (False ?x ?y) ?y)
  (:: tf5 (-> (Nat List) Bool))
  (let tf5 (?tv22 (Nil ?tv23)) (geq ?tv22 Zero))
  (let tf5 (?tv22 (Cons ?tv24 ?tv25)) (and (geq ?tv22 Zero) (ite2 (lq ?tv22 ?tv24) (tf4 ?tv24 ?tv25) (tf2 ?tv24 ?tv25))))
  (:: tf4 (-> (Nat List) Bool))
  (let tf4 (?tv19 ?tv20) (tf5 ?tv19 ?tv20))
  (:: tf7 (-> (List) Bool))
  (let tf7 ((Nil ?tv27)) True)
  (let tf7 ((Cons ?tv28 ?tv29)) (tf4 ?tv28 ?tv29))
  (:: tf6 (-> (List) Bool))
  (let tf6 (?tv26) (tf7 ?tv26))
  (:: isunimodal (-> (List) Bool))
  (let isunimodal (?tv11) (tf6 ?tv11))
  (:: ite3 (-> (Bool Nat Nat) Nat))
  (let ite3 (True ?x ?y) ?x)
  (let ite3 (False ?x ?y) ?y)
  (:: max (-> (Nat Nat) Nat))
  (let max (?tv30 ?tv31) (ite3 (lq ?tv30 ?tv31) ?tv31 ?tv30))
  (:: tf9 (-> (List) Nat))
  (let tf9 ((Nil ?tv35)) Zero)
  (let tf9 ((Cons ?tv36 ?tv37)) (max ?tv36 (tf8 ?tv37)))
  (:: tf8 (-> (List) Nat))
  (let tf8 (?tv33) (tf9 ?tv33))
  (:: spec (-> (List) Nat))
  (let spec (?tv32) (tf8 ?tv32))
  (:: tf11 (-> (UList) UList))
  (let tf11 ((Unil ?tv41)) (Unil Null))
  (let tf11 ((Uelt ?tv42)) (Uelt ?tv42))
  (let tf11 ((Usplit ?tv43 ?tv44 ?tv45 ?tv46)) (Usplit (tf10 ?tv43) ?tv44 ?tv45 (tf10 ?tv46)))
  (:: tf10 (-> (UList) UList))
  (let tf10 (?tv39) (tf11 ?tv39))
  (:: target (-> (UList) UList))
  (let target (?tv38) (tf10 ?tv38))
  (:: main (-> (UList) Nat))
  (let main (?tv47) (ite3 (isunimodal (repr ?tv47)) (spec (repr (target ?tv47))) Zero))
  (:: tf13 (-> (UList) Nat))
  (let tf13 ((Unil ?tv51)) Zero)
  (let tf13 ((Uelt ?tv52)) ?tv52)
  (let tf13 ((Usplit ?tv53 ?tv54 ?tv55 ?tv56)) (ite3 (and (lq (tf12 ?tv56) (max ?tv55 ?tv54)) (lq (tf12 ?tv53) (max ?tv55 ?tv54))) (max ?tv55 ?tv54) (ite3 (lq (tf12 ?tv56) (tf12 ?tv53)) (tf12 ?tv53) (tf12 ?tv56))))
  (:: tf12 (-> (UList) Nat))
  (let tf12 (?tv49) (tf13 ?tv49))
  (:: targetNew (-> (UList) Nat))
  (let targetNew (?tv48) (tf12 ?tv48))
  (:: mainNew (-> (UList) Nat))
  (let mainNew (?tv57) (ite3 (isunimodal (repr ?tv57)) (targetNew ?tv57) Zero))
  (=== optimize (inp0) (UList) (main inp0) (mainNew inp0))
)
