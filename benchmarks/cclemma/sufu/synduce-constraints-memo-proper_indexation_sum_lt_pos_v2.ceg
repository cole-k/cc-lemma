(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data List (Nil Cons))
  (:: Nil (-> (Unit) List))
  (:: Cons (-> (Nat List) List))
  (data IDList (Inil Icons))
  (:: Inil (-> (Unit) IDList))
  (:: Icons (-> (Nat Nat IDList) IDList))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: tf1 (-> (IDList) Nat))
  (let tf1 ((Inil ?tv3)) Zero)
  (let tf1 ((Icons ?tv4 ?tv5 ?tv6)) (plus (Succ Zero) (tf0 ?tv6)))
  (:: tf0 (-> (IDList) Nat))
  (let tf0 (?tv1) (tf1 ?tv1))
  (:: length (-> (IDList) Nat))
  (let length (?tv0) (tf0 ?tv0))
  (:: and (-> (Bool Bool) Bool))
  (let and (False ?x) False)
  (let and (?x False) False)
  (let and (True True) True)
  (:: nateq (-> (Nat Nat) Bool))
  (let nateq (Zero Zero) True)
  (let nateq (Zero (Succ ?x)) False)
  (let nateq ((Succ ?x) Zero) False)
  (let nateq ((Succ ?x) (Succ ?y)) (nateq ?x ?y))
  (:: tf3 (-> (IDList) Bool))
  (let tf3 ((Inil ?tv10)) True)
  (let tf3 ((Icons ?tv11 ?tv12 ?tv13)) (and (tf2 ?tv13) (nateq ?tv12 (length ?tv13))))
  (:: tf2 (-> (IDList) Bool))
  (let tf2 (?tv8) (tf3 ?tv8))
  (:: isindexed (-> (IDList) Bool))
  (let isindexed (?tv7) (tf2 ?tv7))
  (:: tf5 (-> (IDList) List))
  (let tf5 ((Inil ?tv17)) (Nil Null))
  (let tf5 ((Icons ?tv18 ?tv19 ?tv20)) (Cons ?tv18 (tf4 ?tv20)))
  (:: tf4 (-> (IDList) List))
  (let tf4 (?tv15) (tf5 ?tv15))
  (:: repr (-> (IDList) List))
  (let repr (?tv14) (tf4 ?tv14))
  (:: gq (-> (Nat Nat) Bool))
  (let gq (Zero ?x) False)
  (let gq ((Succ ?x) Zero) True)
  (let gq ((Succ ?x) (Succ ?y)) (gq ?x ?y))
  (:: ite2 (-> (Bool Nat Nat) Nat))
  (let ite2 (True ?x ?y) ?x)
  (let ite2 (False ?x ?y) ?y)
  (:: max (-> (Nat) Nat))
  (let max (?tv21) (ite2 (gq ?tv21 Zero) ?tv21 Zero))
  (data Tuple3 (MakeTuple3))
  (:: MakeTuple3 (-> (Nat Nat) Tuple3))
  (:: snd3 (-> (Tuple3) Nat))
  (let snd3 ((MakeTuple3 ?x0 ?x1)) ?x1)
  (:: fst3 (-> (Tuple3) Nat))
  (let fst3 ((MakeTuple3 ?x0 ?x1)) ?x0)
  (:: tf7 (-> (List) Tuple3))
  (let tf7 ((Nil ?tv26)) (MakeTuple3 Zero Zero))
  (let tf7 ((Cons ?tv27 ?tv28)) (MakeTuple3 (ite2 (gq ?tv27 (snd3 (tf6 ?tv28))) (max (plus (fst3 (tf6 ?tv28)) ?tv27)) (fst3 (tf6 ?tv28))) (plus (snd3 (tf6 ?tv28)) (Succ Zero))))
  (:: tf6 (-> (List) Tuple3))
  (let tf6 (?tv24) (tf7 ?tv24))
  (:: spec (-> (List) Tuple3))
  (let spec (?tv23) (tf6 ?tv23))
  (:: tf9 (-> (IDList IDList) IDList))
  (let tf9 (?tv32 (Inil ?tv33)) ?tv32)
  (let tf9 (?tv32 (Icons ?tv34 ?tv35 ?tv36)) (Icons ?tv34 ?tv35 (tf8 ?tv36)))
  (:: tf8 (-> (IDList) IDList))
  (let tf8 (?tv30) (tf9 ?tv30 ?tv30))
  (:: target (-> (IDList) IDList))
  (let target (?tv29) (tf8 ?tv29))
  (:: ite3 (-> (Bool Tuple3) Tuple3))
  (let ite3 (True ?x) ?x)
  (let ite3 (False ?x) (MakeTuple3 Zero Zero))
  (:: main (-> (IDList) Tuple3))
  (let main (?tv37) (ite3 (isindexed ?tv37) (spec (repr (target ?tv37)))))
  (:: leq (-> (Nat Nat) Bool))
  (let leq (Zero ?x) True)
  (let leq ((Succ ?x) Zero) False)
  (let leq ((Succ ?x) (Succ ?y)) (leq ?x ?y))
  (:: tf11 (-> (IDList) Tuple3))
  (let tf11 ((Inil ?tv41)) (MakeTuple3 Zero Zero))
  (let tf11 ((Icons ?tv42 ?tv43 ?tv44)) (MakeTuple3 (ite2 (leq ?tv42 (snd3 (tf10 ?tv44))) (fst3 (tf10 ?tv44)) (plus (fst3 (tf10 ?tv44)) ?tv42)) (plus (Succ Zero) (snd3 (tf10 ?tv44)))))
  (:: tf10 (-> (IDList) Tuple3))
  (let tf10 (?tv39) (tf11 ?tv39))
  (:: targetNew (-> (IDList) Tuple3))
  (let targetNew (?tv38) (tf10 ?tv38))
  (:: mainNew (-> (IDList) Tuple3))
  (let mainNew (?tv45) (ite3 (isindexed ?tv45) (MakeTuple3 (fst3 (targetNew ?tv45)) (snd3 (targetNew ?tv45)))))
  (=== optimize (inp0) (IDList) (main inp0) (mainNew inp0))
)
