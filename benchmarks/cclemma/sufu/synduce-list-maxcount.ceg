(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data List (Elt Cons))
  (:: Elt (-> (Nat) List))
  (:: Cons (-> (Nat List) List))
  (data CList (Single Concat))
  (:: Single (-> (Nat) CList))
  (:: Concat (-> (CList CList) CList))
  (:: gq (-> (Nat Nat) Bool))
  (let gq (Zero ?x) False)
  (let gq ((Succ ?x) Zero) True)
  (let gq ((Succ ?x) (Succ ?y)) (gq ?x ?y))
  (:: ite2 (-> (Bool Nat Nat) Nat))
  (let ite2 (True ?x ?y) ?x)
  (let ite2 (False ?x ?y) ?y)
  (:: max (-> (Nat Nat) Nat))
  (let max (?tv0 ?tv1) (ite2 (gq ?tv0 ?tv1) ?tv0 ?tv1))
  (data Tuple3 (MakeTuple3))
  (:: MakeTuple3 (-> (Nat Nat) Tuple3))
  (:: fst3 (-> (Tuple3) Nat))
  (let fst3 ((MakeTuple3 ?x0 ?x1)) ?x0)
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: snd3 (-> (Tuple3) Nat))
  (let snd3 ((MakeTuple3 ?x0 ?x1)) ?x1)
  (:: nateq (-> (Nat Nat) Bool))
  (let nateq (Zero Zero) True)
  (let nateq (Zero (Succ ?x)) False)
  (let nateq ((Succ ?x) Zero) False)
  (let nateq ((Succ ?x) (Succ ?y)) (nateq ?x ?y))
  (:: tf1 (-> (List) Tuple3))
  (let tf1 ((Elt ?tv5)) (MakeTuple3 ?tv5 (Succ Zero)))
  (let tf1 ((Cons ?tv6 ?tv7)) (MakeTuple3 (max (fst3 (tf0 ?tv7)) ?tv6) (ite2 (gq ?tv6 (fst3 (tf0 ?tv7))) (Succ Zero) (plus (snd3 (tf0 ?tv7)) (ite2 (nateq ?tv6 (fst3 (tf0 ?tv7))) (Succ Zero) Zero)))))
  (:: tf0 (-> (List) Tuple3))
  (let tf0 (?tv3) (tf1 ?tv3))
  (:: spec (-> (List) Nat))
  (let spec (?tv2) (snd3 (tf0 ?tv2)))
  (:: tf3 (-> (List List) List))
  (let tf3 (?tv13 (Elt ?tv14)) (Cons ?tv14 ?tv13))
  (let tf3 (?tv13 (Cons ?tv15 ?tv16)) (Cons ?tv15 (tf2 ?tv16 ?tv13)))
  (:: tf2 (-> (List List) List))
  (let tf2 (?tv10 ?tv11) (tf3 ?tv11 ?tv10))
  (:: cat (-> (List List) List))
  (let cat (?tv8 ?tv9) (tf2 ?tv8 ?tv9))
  (:: tf5 (-> (CList) List))
  (let tf5 ((Single ?tv20)) (Elt ?tv20))
  (let tf5 ((Concat ?tv21 ?tv22)) (cat (tf4 ?tv21) (tf4 ?tv22)))
  (:: tf4 (-> (CList) List))
  (let tf4 (?tv18) (tf5 ?tv18))
  (:: repr (-> (CList) List))
  (let repr (?tv17) (tf4 ?tv17))
  (:: main (-> (CList) Nat))
  (let main (?tv23) (spec (repr ?tv23)))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: tf7 (-> (CList) Tuple3))
  (let tf7 ((Single ?tv27)) (MakeTuple3 (Succ Zero) ?tv27))
  (let tf7 ((Concat ?tv28 ?tv29)) (MakeTuple3 (ite2 (nateq (snd3 (tf6 ?tv29)) (snd3 (tf6 ?tv28))) (plus (fst3 (tf6 ?tv29)) (fst3 (tf6 ?tv28))) (ite2 (lq (snd3 (tf6 ?tv29)) (snd3 (tf6 ?tv28))) (fst3 (tf6 ?tv28)) (fst3 (tf6 ?tv29)))) (max (snd3 (tf6 ?tv29)) (snd3 (tf6 ?tv28)))))
  (:: tf6 (-> (CList) Tuple3))
  (let tf6 (?tv25) (tf7 ?tv25))
  (:: reprNew (-> (CList) Tuple3))
  (let reprNew (?tv24) (tf6 ?tv24))
  (:: mainNew (-> (CList) Nat))
  (let mainNew (?tv30) (fst3 (reprNew ?tv30)))
  (=== optimize (inp0) (CList) (main inp0) (mainNew inp0))
)
