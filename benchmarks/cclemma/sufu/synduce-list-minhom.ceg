(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data List (Elt Cons))
  (:: Elt (-> (Nat) List))
  (:: Cons (-> (Nat List) List))
  (data CList (Single Concat))
  (:: Single (-> (Nat) CList))
  (:: Concat (-> (CList CList) CList))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: ite2 (-> (Bool Nat Nat) Nat))
  (let ite2 (True ?x ?y) ?x)
  (let ite2 (False ?x ?y) ?y)
  (:: min (-> (Nat Nat) Nat))
  (let min (?tv0 ?tv1) (ite2 (lq ?tv0 ?tv1) ?tv0 ?tv1))
  (:: tf1 (-> (List) Nat))
  (let tf1 ((Elt ?tv5)) ?tv5)
  (let tf1 ((Cons ?tv6 ?tv7)) (min ?tv6 (tf0 ?tv7)))
  (:: tf0 (-> (List) Nat))
  (let tf0 (?tv3) (tf1 ?tv3))
  (:: spec (-> (List) Nat))
  (let spec (?tv2) (tf0 ?tv2))
  (:: tf3 (-> (List List) List))
  (let tf3 (?tv13 (Elt ?tv14)) (Cons ?tv14 ?tv13))
  (let tf3 (?tv13 (Cons ?tv15 ?tv16)) (Cons ?tv15 (tf2 ?tv16 ?tv13)))
  (:: tf2 (-> (List List) List))
  (let tf2 (?tv10 ?tv11) (tf3 ?tv11 ?tv10))
  (:: cat (-> (List List) List))
  (let cat (?tv8 ?tv9) (tf2 ?tv8 ?tv9))
  (:: tf5 (-> (CList) List))
  (let tf5 ((Single ?tv20)) (Elt ?tv20))
  (let tf5 ((Concat ?tv21 ?tv22)) (cat (tf4 ?tv21) (tf4 ?tv22)))
  (:: tf4 (-> (CList) List))
  (let tf4 (?tv18) (tf5 ?tv18))
  (:: repr (-> (CList) List))
  (let repr (?tv17) (tf4 ?tv17))
  (:: main (-> (CList) Nat))
  (let main (?tv23) (spec (repr ?tv23)))
  (:: tf7 (-> (CList) Nat))
  (let tf7 ((Single ?tv27)) ?tv27)
  (let tf7 ((Concat ?tv28 ?tv29)) (min (tf6 ?tv29) (tf6 ?tv28)))
  (:: tf6 (-> (CList) Nat))
  (let tf6 (?tv25) (tf7 ?tv25))
  (:: reprNew (-> (CList) Nat))
  (let reprNew (?tv24) (tf6 ?tv24))
  (:: mainNew (-> (CList) Nat))
  (let mainNew (?tv30) (reprNew ?tv30))
  (=== optimize (inp0) (CList) (main inp0) (mainNew inp0))
)
