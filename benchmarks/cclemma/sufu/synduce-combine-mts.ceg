(
  (data Bool (True False))
  (:: True Bool)
  (:: False Bool)
  (data Unit (Null))
  (:: Null Unit)
  (data Nat (Zero Succ))
  (:: Zero Nat)
  (:: Succ (-> (Nat) Nat))
  (data List (Nil Cons))
  (:: Nil (-> (Unit) List))
  (:: Cons (-> (Nat List) List))
  (:: lq (-> (Nat Nat) Bool))
  (let lq (Zero (Succ ?x)) True)
  (let lq (?x Zero) False)
  (let lq ((Succ ?x) (Succ ?y)) (lq ?x ?y))
  (:: ite1 (-> (Bool Nat Nat) Nat))
  (let ite1 (True ?x ?y) ?x)
  (let ite1 (False ?x ?y) ?y)
  (:: max (-> (Nat Nat) Nat))
  (let max (?tv0 ?tv1) (ite1 (lq ?tv0 ?tv1) ?tv1 ?tv0))
  (:: plus (-> (Nat Nat) Nat))
  (let plus (Zero ?x) ?x)
  (let plus ((Succ ?x) ?y) (Succ (plus ?x ?y)))
  (:: tf1 (-> (List) Nat))
  (let tf1 ((Nil ?tv5)) Zero)
  (let tf1 ((Cons ?tv6 ?tv7)) (plus ?tv6 (tf0 ?tv7)))
  (:: tf0 (-> (List) Nat))
  (let tf0 (?tv3) (tf1 ?tv3))
  (:: sum (-> (List) Nat))
  (let sum (?tv2) (tf0 ?tv2))
  (:: tf3 (-> (List) Nat))
  (let tf3 ((Nil ?tv11)) Zero)
  (let tf3 ((Cons ?tv12 ?tv13)) (max (plus ?tv12 (sum ?tv13)) (tf2 ?tv13)))
  (:: tf2 (-> (List) Nat))
  (let tf2 (?tv9) (tf3 ?tv9))
  (:: mts (-> (List) Nat))
  (let mts (?tv8) (tf2 ?tv8))
  (:: spec (-> (List) Nat))
  (let spec (?tv14) (mts ?tv14))
  (:: tf5 (-> (List) List))
  (let tf5 ((Nil ?tv18)) (Nil Null))
  (let tf5 ((Cons ?tv19 ?tv20)) (Cons ?tv19 (tf4 ?tv20)))
  (:: tf4 (-> (List) List))
  (let tf4 (?tv16) (tf5 ?tv16))
  (:: repr (-> (List) List))
  (let repr (?tv15) (tf4 ?tv15))
  (:: main (-> (List) Nat))
  (let main (?tv21) (spec (repr ?tv21)))
  (data Tuple2 (MakeTuple2))
  (:: MakeTuple2 (-> (Nat Nat) Tuple2))
  (:: fst2 (-> (Tuple2) Nat))
  (let fst2 ((MakeTuple2 ?x0 ?x1)) ?x0)
  (:: snd2 (-> (Tuple2) Nat))
  (let snd2 ((MakeTuple2 ?x0 ?x1)) ?x1)
  (:: tf7 (-> (List) Tuple2))
  (let tf7 ((Nil ?tv25)) (MakeTuple2 Zero Zero))
  (let tf7 ((Cons ?tv26 ?tv27)) (MakeTuple2 (max (fst2 (tf6 ?tv27)) (plus ?tv26 (snd2 (tf6 ?tv27)))) (plus ?tv26 (snd2 (tf6 ?tv27)))))
  (:: tf6 (-> (List) Tuple2))
  (let tf6 (?tv23) (tf7 ?tv23))
  (:: reprNew (-> (List) Tuple2))
  (let reprNew (?tv22) (tf6 ?tv22))
  (:: mainNew (-> (List) Nat))
  (let mainNew (?tv28) (fst2 (reprNew ?tv28)))
  (=== optimize (inp0) (List) (main inp0) (mainNew inp0))
)
