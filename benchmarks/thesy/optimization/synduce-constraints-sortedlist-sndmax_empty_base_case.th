  (datatype Bool () ((true Bool) (false Bool)))
  (datatype Unit () ((null Unit)))
  (datatype Nat () ((zero Nat) (succ Nat Nat)))
  (datatype CList () ((empty Unit CList) (elt Nat CList) (concat CList CList CList)))
  (datatype List () ((nil Unit List) (cons Nat List List)))
  (declare-fun tf1 (List List) List)
  (=> tf1r0 (tf1 ?tv5 (nil ?tv6)) ?tv5)
  (=> tf1r1 (tf1 ?tv5 (cons ?tv7 ?tv8)) (cons ?tv7 (tf0 ?tv8 ?tv5)))
  (declare-fun tf0 (List List) List)
  (=> tf0r0 (tf0 ?tv2 ?tv3) (tf1 ?tv3 ?tv2))
  (declare-fun cat (List List) List)
  (=> catr0 (cat ?tv0 ?tv1) (tf0 ?tv0 ?tv1))
  (declare-fun tf3 (CList) List)
  (=> tf3r0 (tf3 (empty ?tv12)) (nil null))
  (=> tf3r1 (tf3 (elt ?tv13)) (cons ?tv13 (nil null)))
  (=> tf3r2 (tf3 (concat ?tv14 ?tv15)) (cat (tf2 ?tv14) (tf2 ?tv15)))
  (declare-fun tf2 (CList) List)
  (=> tf2r0 (tf2 ?tv10) (tf3 ?tv10))
  (declare-fun repr (CList) List)
  (=> reprr0 (repr ?tv9) (tf2 ?tv9))
  (declare-fun geq (Nat Nat) Bool)
  (=> geqr0 (geq zero (succ ?x)) false)
  (=> geqr1 (geq ?x zero) true)
  (=> geqr2 (geq (succ ?x) (succ ?y)) (geq ?x ?y))
  (declare-fun tf4 (Nat List) Bool)
  (=> tf4r0 (tf4 ?tv18 (nil ?tv19)) true)
  (=> tf4r1 (tf4 ?tv18 (cons ?tv20 ?tv21)) (geq ?tv18 ?tv20))
  (declare-fun geq_head (Nat List) Bool)
  (=> geq_headr0 (geq_head ?tv16 ?tv17) (tf4 ?tv16 ?tv17))
  (declare-fun and (Bool Bool) Bool)
  (=> andr0 (and false ?x) false)
  (=> andr1 (and ?x false) false)
  (=> andr2 (and true true) true)
  (declare-fun tf6 (List) Bool)
  (=> tf6r0 (tf6 (nil ?tv25)) true)
  (=> tf6r1 (tf6 (cons ?tv26 ?tv27)) (and (geq_head ?tv26 ?tv27) (tf5 ?tv27)))
  (declare-fun tf5 (List) Bool)
  (=> tf5r0 (tf5 ?tv23) (tf6 ?tv23))
  (declare-fun is_sorted (List) Bool)
  (=> is_sortedr0 (is_sorted ?tv22) (tf5 ?tv22))
  (declare-fun lq (Nat Nat) Bool)
  (=> lqr0 (lq zero (succ ?x)) true)
  (=> lqr1 (lq ?x zero) false)
  (=> lqr2 (lq (succ ?x) (succ ?y)) (lq ?x ?y))
  (declare-fun ite2 (Bool Nat Nat) Nat)
  (=> ite2r0 (ite2 true ?x ?y) ?x)
  (=> ite2r1 (ite2 false ?x ?y) ?y)
  (declare-fun min (Nat Nat) Nat)
  (=> minr0 (min ?tv28 ?tv29) (ite2 (lq ?tv28 ?tv29) ?tv28 ?tv29))
  (declare-fun gq (Nat Nat) Bool)
  (=> gqr0 (gq zero ?x) false)
  (=> gqr1 (gq (succ ?x) zero) true)
  (=> gqr2 (gq (succ ?x) (succ ?y)) (gq ?x ?y))
  (declare-fun max (Nat Nat) Nat)
  (=> maxr0 (max ?tv30 ?tv31) (ite2 (gq ?tv30 ?tv31) ?tv30 ?tv31))
  (datatype Tuple3 () ((makeTuple3 Nat Nat Tuple3)))
  (declare-fun fst_3 (Tuple3) Nat)
  (=> fst_3r0 (fst_3 (makeTuple3 ?x0 ?x1)) ?x0)
  (declare-fun snd_3 (Tuple3) Nat)
  (=> snd_3r0 (snd_3 (makeTuple3 ?x0 ?x1)) ?x1)
  (declare-fun tf8 (List) Tuple3)
  (=> tf8r0 (tf8 (nil ?tv35)) (makeTuple3 zero zero))
  (=> tf8r1 (tf8 (cons ?tv36 ?tv37)) (makeTuple3 (max (fst_3 (tf7 ?tv37)) ?tv36) (max (snd_3 (tf7 ?tv37)) (min (fst_3 (tf7 ?tv37)) ?tv36))))
  (declare-fun tf7 (List) Tuple3)
  (=> tf7r0 (tf7 ?tv33) (tf8 ?tv33))
  (declare-fun spec (List) Nat)
  (=> specr0 (spec ?tv32) (snd_3 (tf7 ?tv32)))
  (declare-fun tf10 (CList CList) CList)
  (=> tf10r0 (tf10 ?tv41 (empty ?tv42)) ?tv41)
  (=> tf10r1 (tf10 ?tv41 (elt ?tv43)) ?tv41)
  (=> tf10r2 (tf10 ?tv41 (concat ?tv44 ?tv45)) (concat (tf9 ?tv44) (tf9 ?tv45)))
  (declare-fun tf9 (CList) CList)
  (=> tf9r0 (tf9 ?tv39) (tf10 ?tv39 ?tv39))
  (declare-fun target (CList) CList)
  (=> targetr0 (target ?tv38) (tf9 ?tv38))
  (declare-fun main (CList) Nat)
  (=> mainr0 (main ?tv46) (ite2 (is_sorted (repr ?tv46)) (spec (repr (target ?tv46))) zero))
  (declare-fun nat_eq (Nat Nat) Bool)
  (=> nat_eqr0 (nat_eq zero zero) true)
  (=> nat_eqr1 (nat_eq zero (succ ?x)) false)
  (=> nat_eqr2 (nat_eq (succ ?x) zero) false)
  (=> nat_eqr3 (nat_eq (succ ?x) (succ ?y)) (nat_eq ?x ?y))
  (declare-fun plus (Nat Nat) Nat)
  (=> plusr0 (plus zero ?x) ?x)
  (=> plusr1 (plus (succ ?x) ?y) (succ (plus ?x ?y)))
  (declare-fun tf12 (CList) Tuple3)
  (=> tf12r0 (tf12 (empty ?tv50)) (makeTuple3 zero zero))
  (=> tf12r1 (tf12 (elt ?tv51)) (makeTuple3 zero (max ?tv51 zero)))
  (=> tf12r2 (tf12 (concat ?tv52 ?tv53)) (makeTuple3 (ite2 (and (lq (fst_3 (tf11 ?tv52)) (snd_3 (tf11 ?tv52))) (nat_eq (fst_3 (tf11 ?tv52)) zero)) (snd_3 (tf11 ?tv53)) (ite2 (nat_eq (fst_3 (tf11 ?tv52)) zero) (plus (fst_3 (tf11 ?tv52)) (fst_3 (tf11 ?tv53))) (fst_3 (tf11 ?tv52)))) (max (snd_3 (tf11 ?tv52)) (snd_3 (tf11 ?tv53)))))
  (declare-fun tf11 (CList) Tuple3)
  (=> tf11r0 (tf11 ?tv48) (tf12 ?tv48))
  (declare-fun target_ (CList) Tuple3)
  (=> target_r0 (target_ ?tv47) (tf11 ?tv47))
  (declare-fun main_ (CList) Nat)
  (=> main_r0 (main_ ?tv54) (ite2 (is_sorted (repr ?tv54)) (fst_3 (target_ ?tv54)) zero))
  (prove (forall ((inp0 CList)) (= (main inp0) (main_ inp0))))
