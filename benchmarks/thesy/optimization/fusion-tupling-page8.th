  (datatype Bool () ((true Bool) (false Bool)))
  (datatype Unit () ((null Unit)))
  (datatype MyNat () ((myzero Unit MyNat) (mysucc MyNat MyNat)))
  (datatype Nat () ((zero Nat) (succ Nat Nat)))
  (declare-fun plus (Nat Nat) Nat)
  (=> plusr0 (plus zero ?x) ?x)
  (=> plusr1 (plus (succ ?x) ?y) (succ (plus ?x ?y)))
  (declare-fun tf1 (MyNat) Nat)
  (=> tf1r0 (tf1 (myzero ?tv3)) zero)
  (=> tf1r1 (tf1 (mysucc (myzero ?tv4))) (succ zero))
  (=> tf1r2 (tf1 (mysucc (mysucc ?tv5))) (plus (tf0 ?tv5) (tf0 (mysucc ?tv5))))
  (declare-fun tf0 (MyNat) Nat)
  (=> tf0r0 (tf0 ?tv1) (tf1 ?tv1))
  (declare-fun fib (MyNat) Nat)
  (=> fibr0 (fib ?tv0) (tf0 ?tv0))
  (declare-fun tf3 (MyNat MyNat) MyNat)
  (=> tf3r0 (tf3 ?tv9 (myzero ?tv10)) ?tv9)
  (=> tf3r1 (tf3 ?tv9 (mysucc ?tv11)) (mysucc (tf2 ?tv11)))
  (declare-fun tf2 (MyNat) MyNat)
  (=> tf2r0 (tf2 ?tv7) (tf3 ?tv7 ?tv7))
  (declare-fun repr (MyNat) MyNat)
  (=> reprr0 (repr ?tv6) (tf2 ?tv6))
  (declare-fun main (MyNat) Nat)
  (=> mainr0 (main ?tv12) (fib (repr ?tv12)))
  (datatype Tuple0 () ((makeTuple0 Nat Nat Tuple0)))
  (declare-fun nat_eq (Nat Nat) Bool)
  (=> nat_eqr0 (nat_eq zero zero) true)
  (=> nat_eqr1 (nat_eq zero (succ ?x)) false)
  (=> nat_eqr2 (nat_eq (succ ?x) zero) false)
  (=> nat_eqr3 (nat_eq (succ ?x) (succ ?y)) (nat_eq ?x ?y))
  (declare-fun fst_0 (Tuple0) Nat)
  (=> fst_0r0 (fst_0 (makeTuple0 ?x0 ?x1)) ?x0)
  (declare-fun snd_0 (Tuple0) Nat)
  (=> snd_0r0 (snd_0 (makeTuple0 ?x0 ?x1)) ?x1)
  (declare-fun ite1 (Bool Nat Nat) Nat)
  (=> ite1r0 (ite1 true ?x ?y) ?x)
  (=> ite1r1 (ite1 false ?x ?y) ?y)
  (declare-fun tf5 (MyNat) Tuple0)
  (=> tf5r0 (tf5 (myzero ?tv16)) (makeTuple0 zero zero))
  (=> tf5r1 (tf5 (mysucc ?tv17)) (makeTuple0 (ite1 (nat_eq (fst_0 (tf4 ?tv17)) (snd_0 (tf4 ?tv17))) (plus (succ zero) (fst_0 (tf4 ?tv17))) (plus (fst_0 (tf4 ?tv17)) (snd_0 (tf4 ?tv17)))) (fst_0 (tf4 ?tv17))))
  (declare-fun tf4 (MyNat) Tuple0)
  (=> tf4r0 (tf4 ?tv14) (tf5 ?tv14))
  (declare-fun repr_ (MyNat) Tuple0)
  (=> repr_r0 (repr_ ?tv13) (tf4 ?tv13))
  (declare-fun main_ (MyNat) Nat)
  (=> main_r0 (main_ ?tv18) (fst_0 (repr_ ?tv18)))
  (prove (forall ((inp0 MyNat)) (= (main inp0) (main_ inp0))))
