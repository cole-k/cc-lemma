  (datatype Bool () ((true Bool) (false Bool)))
  (datatype Nat () ((zero Nat) (succ Nat Nat)))
  (datatype List () ((elt Nat List) (cons Nat List List)))
  (datatype NList () ((line List NList) (ncons List NList NList)))
  (declare-fun lq (Nat Nat) Bool)
  (=> lqr0 (lq zero (succ ?x)) true)
  (=> lqr1 (lq ?x zero) false)
  (=> lqr2 (lq (succ ?x) (succ ?y)) (lq ?x ?y))
  (declare-fun ite2 (Bool Nat Nat) Nat)
  (=> ite2r0 (ite2 true ?x ?y) ?x)
  (=> ite2r1 (ite2 false ?x ?y) ?y)
  (declare-fun max (Nat Nat) Nat)
  (=> maxr0 (max ?tv0 ?tv1) (ite2 (lq ?tv0 ?tv1) ?tv1 ?tv0))
  (declare-fun gq (Nat Nat) Bool)
  (=> gqr0 (gq zero ?x) false)
  (=> gqr1 (gq (succ ?x) zero) true)
  (=> gqr2 (gq (succ ?x) (succ ?y)) (gq ?x ?y))
  (declare-fun min (Nat Nat) Nat)
  (=> minr0 (min ?tv2 ?tv3) (ite2 (gq ?tv2 ?tv3) ?tv3 ?tv2))
  (datatype Tuple3 () ((makeTuple3 Nat Nat Tuple3)))
  (declare-fun fst_3 (Tuple3) Nat)
  (=> fst_3r0 (fst_3 (makeTuple3 ?x0 ?x1)) ?x0)
  (declare-fun snd_3 (Tuple3) Nat)
  (=> snd_3r0 (snd_3 (makeTuple3 ?x0 ?x1)) ?x1)
  (declare-fun tf1 (List) Tuple3)
  (=> tf1r0 (tf1 (elt ?tv7)) (makeTuple3 ?tv7 ?tv7))
  (=> tf1r1 (tf1 (cons ?tv8 ?tv9)) (makeTuple3 (min ?tv8 (fst_3 (tf0 ?tv9))) (max ?tv8 (snd_3 (tf0 ?tv9)))))
  (declare-fun tf0 (List) Tuple3)
  (=> tf0r0 (tf0 ?tv5) (tf1 ?tv5))
  (declare-fun interval (List) Tuple3)
  (=> intervalr0 (interval ?tv4) (tf0 ?tv4))
  (datatype Tuple4 () ((makeTuple4 Nat Nat Bool Tuple4)))
  (declare-fun fst_4 (Tuple4) Nat)
  (=> fst_4r0 (fst_4 (makeTuple4 ?x0 ?x1 ?x2)) ?x0)
  (declare-fun snd_4 (Tuple4) Nat)
  (=> snd_4r0 (snd_4 (makeTuple4 ?x0 ?x1 ?x2)) ?x1)
  (declare-fun and (Bool Bool) Bool)
  (=> andr0 (and false ?x) false)
  (=> andr1 (and ?x false) false)
  (=> andr2 (and true true) true)
  (declare-fun third_4 (Tuple4) Bool)
  (=> third_4r0 (third_4 (makeTuple4 ?x0 ?x1 ?x2)) ?x2)
  (declare-fun leq (Nat Nat) Bool)
  (=> leqr0 (leq zero ?x) true)
  (=> leqr1 (leq (succ ?x) zero) false)
  (=> leqr2 (leq (succ ?x) (succ ?y)) (leq ?x ?y))
  (declare-fun tf3 (NList) Tuple4)
  (=> tf3r0 (tf3 (line ?tv13)) (makeTuple4 (fst_3 (interval ?tv13)) (snd_3 (interval ?tv13)) true))
  (=> tf3r1 (tf3 (ncons ?tv14 ?tv15)) (makeTuple4 (min (fst_4 (tf2 ?tv15)) (fst_3 (interval ?tv14))) (max (snd_4 (tf2 ?tv15)) (snd_3 (interval ?tv14))) (and (third_4 (tf2 ?tv15)) (and (leq (fst_4 (tf2 ?tv15)) (fst_3 (interval ?tv14))) (leq (snd_4 (tf2 ?tv15)) (snd_3 (interval ?tv14)))))))
  (declare-fun tf2 (NList) Tuple4)
  (=> tf2r0 (tf2 ?tv11) (tf3 ?tv11))
  (declare-fun spec (NList) Bool)
  (=> specr0 (spec ?tv10) (third_4 (tf2 ?tv10)))
  (declare-fun tf5 (NList NList) NList)
  (=> tf5r0 (tf5 ?tv19 (line ?tv20)) ?tv19)
  (=> tf5r1 (tf5 ?tv19 (ncons ?tv21 ?tv22)) (ncons ?tv21 (tf4 ?tv22)))
  (declare-fun tf4 (NList) NList)
  (=> tf4r0 (tf4 ?tv17) (tf5 ?tv17 ?tv17))
  (declare-fun target (NList) NList)
  (=> targetr0 (target ?tv16) (tf4 ?tv16))
  (declare-fun main (NList) Bool)
  (=> mainr0 (main ?tv23) (spec (target ?tv23)))
  (datatype Tuple5 () ((makeTuple5 Bool Nat Nat Tuple5)))
  (declare-fun snd_5 (Tuple5) Nat)
  (=> snd_5r0 (snd_5 (makeTuple5 ?x0 ?x1 ?x2)) ?x1)
  (declare-fun fst_5 (Tuple5) Bool)
  (=> fst_5r0 (fst_5 (makeTuple5 ?x0 ?x1 ?x2)) ?x0)
  (declare-fun third_5 (Tuple5) Nat)
  (=> third_5r0 (third_5 (makeTuple5 ?x0 ?x1 ?x2)) ?x2)
  (declare-fun tf7 (NList) Tuple5)
  (=> tf7r0 (tf7 (line ?tv27)) (makeTuple5 true (fst_3 (interval ?tv27)) (snd_3 (interval ?tv27))))
  (=> tf7r1 (tf7 (ncons ?tv28 ?tv29)) (makeTuple5 (and (and (leq (snd_5 (tf6 ?tv29)) (fst_3 (interval ?tv28))) (fst_5 (tf6 ?tv29))) (leq (third_5 (tf6 ?tv29)) (snd_3 (interval ?tv28)))) (snd_5 (tf6 ?tv29)) (snd_3 (interval ?tv28))))
  (declare-fun tf6 (NList) Tuple5)
  (=> tf6r0 (tf6 ?tv25) (tf7 ?tv25))
  (declare-fun target_ (NList) Tuple5)
  (=> target_r0 (target_ ?tv24) (tf6 ?tv24))
  (declare-fun main_ (NList) Bool)
  (=> main_r0 (main_ ?tv30) (fst_5 (target_ ?tv30)))
  (prove (forall ((inp0 NList)) (= (main inp0) (main_ inp0))))
