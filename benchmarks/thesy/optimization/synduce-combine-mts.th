  (datatype Bool () ((true Bool) (false Bool)))
  (datatype Unit () ((null Unit)))
  (datatype Nat () ((zero Nat) (succ Nat Nat)))
  (datatype List () ((nil Unit List) (cons Nat List List)))
  (declare-fun lq (Nat Nat) Bool)
  (=> lqr0 (lq zero (succ ?x)) true)
  (=> lqr1 (lq ?x zero) false)
  (=> lqr2 (lq (succ ?x) (succ ?y)) (lq ?x ?y))
  (declare-fun ite1 (Bool Nat Nat) Nat)
  (=> ite1r0 (ite1 true ?x ?y) ?x)
  (=> ite1r1 (ite1 false ?x ?y) ?y)
  (declare-fun max (Nat Nat) Nat)
  (=> maxr0 (max ?tv0 ?tv1) (ite1 (lq ?tv0 ?tv1) ?tv1 ?tv0))
  (declare-fun plus (Nat Nat) Nat)
  (=> plusr0 (plus zero ?x) ?x)
  (=> plusr1 (plus (succ ?x) ?y) (succ (plus ?x ?y)))
  (declare-fun tf1 (List) Nat)
  (=> tf1r0 (tf1 (nil ?tv5)) zero)
  (=> tf1r1 (tf1 (cons ?tv6 ?tv7)) (plus ?tv6 (tf0 ?tv7)))
  (declare-fun tf0 (List) Nat)
  (=> tf0r0 (tf0 ?tv3) (tf1 ?tv3))
  (declare-fun sum (List) Nat)
  (=> sumr0 (sum ?tv2) (tf0 ?tv2))
  (declare-fun tf3 (List) Nat)
  (=> tf3r0 (tf3 (nil ?tv11)) zero)
  (=> tf3r1 (tf3 (cons ?tv12 ?tv13)) (max (plus ?tv12 (sum ?tv13)) (tf2 ?tv13)))
  (declare-fun tf2 (List) Nat)
  (=> tf2r0 (tf2 ?tv9) (tf3 ?tv9))
  (declare-fun mts (List) Nat)
  (=> mtsr0 (mts ?tv8) (tf2 ?tv8))
  (declare-fun spec (List) Nat)
  (=> specr0 (spec ?tv14) (mts ?tv14))
  (declare-fun tf5 (List) List)
  (=> tf5r0 (tf5 (nil ?tv18)) (nil null))
  (=> tf5r1 (tf5 (cons ?tv19 ?tv20)) (cons ?tv19 (tf4 ?tv20)))
  (declare-fun tf4 (List) List)
  (=> tf4r0 (tf4 ?tv16) (tf5 ?tv16))
  (declare-fun repr (List) List)
  (=> reprr0 (repr ?tv15) (tf4 ?tv15))
  (declare-fun main (List) Nat)
  (=> mainr0 (main ?tv21) (spec (repr ?tv21)))
  (datatype Tuple2 () ((makeTuple2 Nat Nat Tuple2)))
  (declare-fun fst_2 (Tuple2) Nat)
  (=> fst_2r0 (fst_2 (makeTuple2 ?x0 ?x1)) ?x0)
  (declare-fun snd_2 (Tuple2) Nat)
  (=> snd_2r0 (snd_2 (makeTuple2 ?x0 ?x1)) ?x1)
  (declare-fun tf7 (List) Tuple2)
  (=> tf7r0 (tf7 (nil ?tv25)) (makeTuple2 zero zero))
  (=> tf7r1 (tf7 (cons ?tv26 ?tv27)) (makeTuple2 (max (fst_2 (tf6 ?tv27)) (plus ?tv26 (snd_2 (tf6 ?tv27)))) (plus ?tv26 (snd_2 (tf6 ?tv27)))))
  (declare-fun tf6 (List) Tuple2)
  (=> tf6r0 (tf6 ?tv23) (tf7 ?tv23))
  (declare-fun repr_ (List) Tuple2)
  (=> repr_r0 (repr_ ?tv22) (tf6 ?tv22))
  (declare-fun main_ (List) Nat)
  (=> main_r0 (main_ ?tv28) (fst_2 (repr_ ?tv28)))
  (prove (forall ((inp0 List)) (= (main inp0) (main_ inp0))))
