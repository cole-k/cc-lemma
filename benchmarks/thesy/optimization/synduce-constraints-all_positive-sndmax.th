  (datatype Bool () ((true Bool) (false Bool)))
  (datatype Unit () ((null Unit)))
  (datatype Nat () ((zero Nat) (succ Nat Nat)))
  (datatype CList () ((cnil Unit CList) (single Nat CList) (concat CList CList CList)))
  (datatype List () ((nil Unit List) (cons Nat List List)))
  (declare-fun gq (Nat Nat) Bool)
  (=> gqr0 (gq zero ?x) false)
  (=> gqr1 (gq (succ ?x) zero) true)
  (=> gqr2 (gq (succ ?x) (succ ?y)) (gq ?x ?y))
  (declare-fun and (Bool Bool) Bool)
  (=> andr0 (and false ?x) false)
  (=> andr1 (and ?x false) false)
  (=> andr2 (and true true) true)
  (declare-fun tf1 (CList) Bool)
  (=> tf1r0 (tf1 (cnil ?tv3)) true)
  (=> tf1r1 (tf1 (single ?tv4)) (gq ?tv4 zero))
  (=> tf1r2 (tf1 (concat ?tv5 ?tv6)) (and (tf0 ?tv5) (tf0 ?tv6)))
  (declare-fun tf0 (CList) Bool)
  (=> tf0r0 (tf0 ?tv1) (tf1 ?tv1))
  (declare-fun allpos (CList) Bool)
  (=> allposr0 (allpos ?tv0) (tf0 ?tv0))
  (declare-fun tf3 (List List) List)
  (=> tf3r0 (tf3 ?tv11 (cons ?tv13 ?tv14)) (cons ?tv13 (tf2 ?tv14 ?tv11)))
  (=> tf3r1 (tf3 ?tv11 (nil ?tv15)) ?tv11)
  (declare-fun tf2 (List List) List)
  (=> tf2r0 (tf2 ?tv9 ?tv10) (tf3 ?tv10 ?tv9))
  (declare-fun cat (List List) List)
  (=> catr0 (cat ?tv7 ?tv8) (tf2 ?tv7 ?tv8))
  (declare-fun tf5 (CList) List)
  (=> tf5r0 (tf5 (cnil ?tv19)) (nil null))
  (=> tf5r1 (tf5 (single ?tv20)) (cons ?tv20 (nil null)))
  (=> tf5r2 (tf5 (concat ?tv21 ?tv22)) (cat (tf4 ?tv21) (tf4 ?tv22)))
  (declare-fun tf4 (CList) List)
  (=> tf4r0 (tf4 ?tv17) (tf5 ?tv17))
  (declare-fun repr (CList) List)
  (=> reprr0 (repr ?tv16) (tf4 ?tv16))
  (declare-fun lq (Nat Nat) Bool)
  (=> lqr0 (lq zero (succ ?x)) true)
  (=> lqr1 (lq ?x zero) false)
  (=> lqr2 (lq (succ ?x) (succ ?y)) (lq ?x ?y))
  (declare-fun ite2 (Bool Nat Nat) Nat)
  (=> ite2r0 (ite2 true ?x ?y) ?x)
  (=> ite2r1 (ite2 false ?x ?y) ?y)
  (declare-fun min (Nat Nat) Nat)
  (=> minr0 (min ?tv23 ?tv24) (ite2 (lq ?tv23 ?tv24) ?tv23 ?tv24))
  (declare-fun max (Nat Nat) Nat)
  (=> maxr0 (max ?tv25 ?tv26) (ite2 (lq ?tv25 ?tv26) ?tv26 ?tv25))
  (datatype Tuple3 () ((makeTuple3 Nat Nat Tuple3)))
  (declare-fun fst_3 (Tuple3) Nat)
  (=> fst_3r0 (fst_3 (makeTuple3 ?x0 ?x1)) ?x0)
  (declare-fun snd_3 (Tuple3) Nat)
  (=> snd_3r0 (snd_3 (makeTuple3 ?x0 ?x1)) ?x1)
  (declare-fun tf7 (List) Tuple3)
  (=> tf7r0 (tf7 (nil ?tv30)) (makeTuple3 zero zero))
  (=> tf7r1 (tf7 (cons ?tv31 ?tv32)) (makeTuple3 (max ?tv31 (fst_3 (tf6 ?tv32))) (max (snd_3 (tf6 ?tv32)) (min (fst_3 (tf6 ?tv32)) ?tv31))))
  (declare-fun tf6 (List) Tuple3)
  (=> tf6r0 (tf6 ?tv28) (tf7 ?tv28))
  (declare-fun spec (List) Nat)
  (=> specr0 (spec ?tv27) (snd_3 (tf6 ?tv27)))
  (declare-fun tf9 (CList) CList)
  (=> tf9r0 (tf9 (cnil ?tv36)) (cnil null))
  (=> tf9r1 (tf9 (single ?tv37)) (single ?tv37))
  (=> tf9r2 (tf9 (concat ?tv38 ?tv39)) (concat (tf8 ?tv38) (tf8 ?tv39)))
  (declare-fun tf8 (CList) CList)
  (=> tf8r0 (tf8 ?tv34) (tf9 ?tv34))
  (declare-fun target (CList) CList)
  (=> targetr0 (target ?tv33) (tf8 ?tv33))
  (declare-fun main (CList) Nat)
  (=> mainr0 (main ?tv40) (ite2 (allpos ?tv40) (spec (repr (target ?tv40))) zero))
  (declare-fun tf11 (CList) Tuple3)
  (=> tf11r0 (tf11 (cnil ?tv44)) (makeTuple3 zero zero))
  (=> tf11r1 (tf11 (single ?tv45)) (makeTuple3 zero ?tv45))
  (=> tf11r2 (tf11 (concat ?tv46 ?tv47)) (makeTuple3 (ite2 (and (lq (snd_3 (tf10 ?tv47)) (snd_3 (tf10 ?tv46))) (lq (fst_3 (tf10 ?tv46)) (snd_3 (tf10 ?tv47)))) (snd_3 (tf10 ?tv47)) (ite2 (lq (snd_3 (tf10 ?tv46)) (fst_3 (tf10 ?tv47))) (fst_3 (tf10 ?tv47)) (ite2 (lq (snd_3 (tf10 ?tv47)) (snd_3 (tf10 ?tv46))) (fst_3 (tf10 ?tv46)) (snd_3 (tf10 ?tv46))))) (max (snd_3 (tf10 ?tv46)) (snd_3 (tf10 ?tv47)))))
  (declare-fun tf10 (CList) Tuple3)
  (=> tf10r0 (tf10 ?tv42) (tf11 ?tv42))
  (declare-fun target_ (CList) Tuple3)
  (=> target_r0 (target_ ?tv41) (tf10 ?tv41))
  (declare-fun main_ (CList) Nat)
  (=> main_r0 (main_ ?tv48) (ite2 (allpos ?tv48) (fst_3 (target_ ?tv48)) zero))
  (prove (forall ((inp0 CList)) (= (main inp0) (main_ inp0))))
