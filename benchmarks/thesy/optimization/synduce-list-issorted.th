  (datatype Bool () ((true Bool) (false Bool)))
  (datatype Nat () ((zero Nat) (succ Nat Nat)))
  (datatype SList () ((elt Nat SList) (cons Nat SList SList)))
  (datatype CList () ((single Nat CList) (concat CList CList CList)))
  (declare-fun tf1 (SList SList) SList)
  (=> tf1r0 (tf1 ?tv5 (elt ?tv6)) (cons ?tv6 ?tv5))
  (=> tf1r1 (tf1 ?tv5 (cons ?tv7 ?tv8)) (cons ?tv7 (tf0 ?tv8 ?tv5)))
  (declare-fun tf0 (SList SList) SList)
  (=> tf0r0 (tf0 ?tv2 ?tv3) (tf1 ?tv3 ?tv2))
  (declare-fun cat_list (SList SList) SList)
  (=> cat_listr0 (cat_list ?tv0 ?tv1) (tf0 ?tv0 ?tv1))
  (declare-fun tf3 (CList) SList)
  (=> tf3r0 (tf3 (single ?tv12)) (elt ?tv12))
  (=> tf3r1 (tf3 (concat ?tv13 ?tv14)) (cat_list (tf2 ?tv13) (tf2 ?tv14)))
  (declare-fun tf2 (CList) SList)
  (=> tf2r0 (tf2 ?tv10) (tf3 ?tv10))
  (declare-fun repr (CList) SList)
  (=> reprr0 (repr ?tv9) (tf2 ?tv9))
  (datatype Tuple2 () ((makeTuple2 Nat Nat Bool Tuple2)))
  (declare-fun snd_2 (Tuple2) Nat)
  (=> snd_2r0 (snd_2 (makeTuple2 ?x0 ?x1 ?x2)) ?x1)
  (declare-fun and (Bool Bool) Bool)
  (=> andr0 (and false ?x) false)
  (=> andr1 (and ?x false) false)
  (=> andr2 (and true true) true)
  (declare-fun third_2 (Tuple2) Bool)
  (=> third_2r0 (third_2 (makeTuple2 ?x0 ?x1 ?x2)) ?x2)
  (declare-fun lq (Nat Nat) Bool)
  (=> lqr0 (lq zero (succ ?x)) true)
  (=> lqr1 (lq ?x zero) false)
  (=> lqr2 (lq (succ ?x) (succ ?y)) (lq ?x ?y))
  (declare-fun fst_2 (Tuple2) Nat)
  (=> fst_2r0 (fst_2 (makeTuple2 ?x0 ?x1 ?x2)) ?x0)
  (declare-fun tf5 (SList) Tuple2)
  (=> tf5r0 (tf5 (elt ?tv18)) (makeTuple2 ?tv18 ?tv18 true))
  (=> tf5r1 (tf5 (cons ?tv19 ?tv20)) (makeTuple2 ?tv19 (snd_2 (tf4 ?tv20)) (and (third_2 (tf4 ?tv20)) (lq ?tv19 (fst_2 (tf4 ?tv20))))))
  (declare-fun tf4 (SList) Tuple2)
  (=> tf4r0 (tf4 ?tv16) (tf5 ?tv16))
  (declare-fun spec (SList) Bool)
  (=> specr0 (spec ?tv15) (third_2 (tf4 ?tv15)))
  (declare-fun main (CList) Bool)
  (=> mainr0 (main ?tv21) (spec (repr ?tv21)))
  (datatype Tuple3 () ((makeTuple3 Bool Nat Nat Tuple3)))
  (declare-fun fst_3 (Tuple3) Bool)
  (=> fst_3r0 (fst_3 (makeTuple3 ?x0 ?x1 ?x2)) ?x0)
  (declare-fun third_3 (Tuple3) Nat)
  (=> third_3r0 (third_3 (makeTuple3 ?x0 ?x1 ?x2)) ?x2)
  (declare-fun snd_3 (Tuple3) Nat)
  (=> snd_3r0 (snd_3 (makeTuple3 ?x0 ?x1 ?x2)) ?x1)
  (declare-fun tf7 (CList) Tuple3)
  (=> tf7r0 (tf7 (single ?tv25)) (makeTuple3 true ?tv25 ?tv25))
  (=> tf7r1 (tf7 (concat ?tv26 ?tv27)) (makeTuple3 (and (and (fst_3 (tf6 ?tv26)) (fst_3 (tf6 ?tv27))) (lq (third_3 (tf6 ?tv26)) (snd_3 (tf6 ?tv27)))) (snd_3 (tf6 ?tv26)) (third_3 (tf6 ?tv27))))
  (declare-fun tf6 (CList) Tuple3)
  (=> tf6r0 (tf6 ?tv23) (tf7 ?tv23))
  (declare-fun repr_ (CList) Tuple3)
  (=> repr_r0 (repr_ ?tv22) (tf6 ?tv22))
  (declare-fun main_ (CList) Bool)
  (=> main_r0 (main_ ?tv28) (fst_3 (repr_ ?tv28)))
  (prove (forall ((inp0 CList)) (= (main inp0) (main_ inp0))))
