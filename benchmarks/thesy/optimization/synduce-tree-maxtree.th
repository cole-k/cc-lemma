  (datatype Bool () ((true Bool) (false Bool)))
  (datatype Unit () ((null Unit)))
  (datatype Nat () ((zero Nat) (succ Nat Nat)))
  (datatype Tree () ((nil Unit Tree) (node Nat Tree Tree Tree)))
  (declare-fun lq (Nat Nat) Bool)
  (=> lqr0 (lq zero (succ ?x)) true)
  (=> lqr1 (lq ?x zero) false)
  (=> lqr2 (lq (succ ?x) (succ ?y)) (lq ?x ?y))
  (declare-fun ite1 (Bool Nat Nat) Nat)
  (=> ite1r0 (ite1 true ?x ?y) ?x)
  (=> ite1r1 (ite1 false ?x ?y) ?y)
  (declare-fun max (Nat Nat) Nat)
  (=> maxr0 (max ?tv0 ?tv1) (ite1 (lq ?tv0 ?tv1) ?tv1 ?tv0))
  (declare-fun tf1 (Nat Tree) Nat)
  (=> tf1r0 (tf1 ?tv6 (nil ?tv7)) ?tv6)
  (=> tf1r1 (tf1 ?tv6 (node ?tv8 ?tv9 ?tv10)) (tf0 (max (tf0 ?tv6 ?tv9) ?tv8) ?tv10))
  (declare-fun tf0 (Nat Tree) Nat)
  (=> tf0r0 (tf0 ?tv3 ?tv4) (tf1 ?tv3 ?tv4))
  (declare-fun spec (Tree) Nat)
  (=> specr0 (spec ?tv2) (tf0 zero ?tv2))
  (declare-fun tf3 (Tree) Tree)
  (=> tf3r0 (tf3 (nil ?tv14)) (nil null))
  (=> tf3r1 (tf3 (node ?tv15 ?tv16 ?tv17)) (node ?tv15 (tf2 ?tv16) (tf2 ?tv17)))
  (declare-fun tf2 (Tree) Tree)
  (=> tf2r0 (tf2 ?tv12) (tf3 ?tv12))
  (declare-fun repr (Tree) Tree)
  (=> reprr0 (repr ?tv11) (tf2 ?tv11))
  (declare-fun main (Tree) Nat)
  (=> mainr0 (main ?tv18) (spec (repr ?tv18)))
  (declare-fun tf5 (Tree) Nat)
  (=> tf5r0 (tf5 (nil ?tv22)) zero)
  (=> tf5r1 (tf5 (node ?tv23 ?tv24 ?tv25)) (max ?tv23 (max (tf4 ?tv25) (tf4 ?tv24))))
  (declare-fun tf4 (Tree) Nat)
  (=> tf4r0 (tf4 ?tv20) (tf5 ?tv20))
  (declare-fun repr_ (Tree) Nat)
  (=> repr_r0 (repr_ ?tv19) (tf4 ?tv19))
  (declare-fun main_ (Tree) Nat)
  (=> main_r0 (main_ ?tv26) (repr_ ?tv26))
  (prove (forall ((inp0 Tree)) (= (main inp0) (main_ inp0))))
