  (datatype Bool () ((true Bool) (false Bool)))
  (datatype Nat () ((zero Nat) (succ Nat Nat)))
  (datatype UList () ((uelt Nat UList) (usplit UList Nat Nat UList UList)))
  (datatype List () ((elt Nat List) (cons Nat List List)))
  (declare-fun tf1 (List UList) List)
  (=> tf1r0 (tf1 ?tv4 (uelt ?tv5)) (cons ?tv5 ?tv4))
  (=> tf1r1 (tf1 ?tv4 (usplit ?tv6 ?tv7 ?tv8 ?tv9)) (tf0 (cons ?tv7 (cons ?tv8 (tf0 ?tv4 ?tv9))) ?tv6))
  (declare-fun tf0 (List UList) List)
  (=> tf0r0 (tf0 ?tv1 ?tv2) (tf1 ?tv1 ?tv2))
  (declare-fun tf3 (UList) List)
  (=> tf3r0 (tf3 (uelt ?tv12)) (elt ?tv12))
  (=> tf3r1 (tf3 (usplit ?tv13 ?tv14 ?tv15 ?tv16)) (tf0 (cons ?tv14 (cons ?tv15 (tf2 ?tv16))) ?tv13))
  (declare-fun tf2 (UList) List)
  (=> tf2r0 (tf2 ?tv10) (tf3 ?tv10))
  (declare-fun repr (UList) List)
  (=> reprr0 (repr ?tv0) (tf2 ?tv0))
  (declare-fun gq (Nat Nat) Bool)
  (=> gqr0 (gq zero ?x) false)
  (=> gqr1 (gq (succ ?x) zero) true)
  (=> gqr2 (gq (succ ?x) (succ ?y)) (gq ?x ?y))
  (declare-fun and (Bool Bool) Bool)
  (=> andr0 (and false ?x) false)
  (=> andr1 (and ?x false) false)
  (=> andr2 (and true true) true)
  (declare-fun tf5 (Nat List) Bool)
  (=> tf5r0 (tf5 ?tv21 (elt ?tv22)) (gq ?tv21 ?tv22))
  (=> tf5r1 (tf5 ?tv21 (cons ?tv23 ?tv24)) (and (gq ?tv21 ?tv23) (tf4 ?tv23 ?tv24)))
  (declare-fun tf4 (Nat List) Bool)
  (=> tf4r0 (tf4 ?tv18 ?tv19) (tf5 ?tv18 ?tv19))
  (declare-fun lq (Nat Nat) Bool)
  (=> lqr0 (lq zero (succ ?x)) true)
  (=> lqr1 (lq ?x zero) false)
  (=> lqr2 (lq (succ ?x) (succ ?y)) (lq ?x ?y))
  (declare-fun ite2 (Bool Bool Bool) Bool)
  (=> ite2r0 (ite2 true ?x ?y) ?x)
  (=> ite2r1 (ite2 false ?x ?y) ?y)
  (declare-fun tf7 (Nat List) Bool)
  (=> tf7r0 (tf7 ?tv28 (elt ?tv29)) (lq ?tv28 ?tv29))
  (=> tf7r1 (tf7 ?tv28 (cons ?tv30 ?tv31)) (ite2 (lq ?tv28 ?tv30) (tf6 ?tv30 ?tv31) (tf4 ?tv30 ?tv31)))
  (declare-fun tf6 (Nat List) Bool)
  (=> tf6r0 (tf6 ?tv25 ?tv26) (tf7 ?tv25 ?tv26))
  (declare-fun tf9 (List) Bool)
  (=> tf9r0 (tf9 (elt ?tv33)) true)
  (=> tf9r1 (tf9 (cons ?tv34 ?tv35)) (tf6 ?tv34 ?tv35))
  (declare-fun tf8 (List) Bool)
  (=> tf8r0 (tf8 ?tv32) (tf9 ?tv32))
  (declare-fun is_unimodal (List) Bool)
  (=> is_unimodalr0 (is_unimodal ?tv17) (tf8 ?tv17))
  (declare-fun ite3 (Bool Nat Nat) Nat)
  (=> ite3r0 (ite3 true ?x ?y) ?x)
  (=> ite3r1 (ite3 false ?x ?y) ?y)
  (declare-fun max (Nat Nat) Nat)
  (=> maxr0 (max ?tv36 ?tv37) (ite3 (lq ?tv36 ?tv37) ?tv37 ?tv36))
  (declare-fun tf11 (List) Nat)
  (=> tf11r0 (tf11 (elt ?tv41)) ?tv41)
  (=> tf11r1 (tf11 (cons ?tv42 ?tv43)) (max ?tv42 (tf10 ?tv43)))
  (declare-fun tf10 (List) Nat)
  (=> tf10r0 (tf10 ?tv39) (tf11 ?tv39))
  (declare-fun spec (List) Nat)
  (=> specr0 (spec ?tv38) (tf10 ?tv38))
  (declare-fun ite4 (Bool UList UList) UList)
  (=> ite4r0 (ite4 true ?x ?y) ?x)
  (=> ite4r1 (ite4 false ?x ?y) ?y)
  (declare-fun tf13 (UList) UList)
  (=> tf13r0 (tf13 (uelt ?tv47)) (uelt ?tv47))
  (=> tf13r1 (tf13 (usplit ?tv48 ?tv49 ?tv50 ?tv51)) (ite4 (gq ?tv49 ?tv50) (usplit (tf12 ?tv48) ?tv49 ?tv50 ?tv51) (usplit ?tv48 ?tv49 ?tv50 (tf12 ?tv51))))
  (declare-fun tf12 (UList) UList)
  (=> tf12r0 (tf12 ?tv45) (tf13 ?tv45))
  (declare-fun target (UList) UList)
  (=> targetr0 (target ?tv44) (tf12 ?tv44))
  (declare-fun main (UList) Nat)
  (=> mainr0 (main ?tv52) (ite3 (is_unimodal (repr ?tv52)) (spec (repr (target ?tv52))) zero))
  (declare-fun tf15 (UList) Nat)
  (=> tf15r0 (tf15 (uelt ?tv56)) ?tv56)
  (=> tf15r1 (tf15 (usplit ?tv57 ?tv58 ?tv59 ?tv60)) (ite3 (gq ?tv58 ?tv59) (max ?tv58 (tf14 ?tv57)) (max ?tv59 (tf14 ?tv60))))
  (declare-fun tf14 (UList) Nat)
  (=> tf14r0 (tf14 ?tv54) (tf15 ?tv54))
  (declare-fun target_ (UList) Nat)
  (=> target_r0 (target_ ?tv53) (tf14 ?tv53))
  (declare-fun main_ (UList) Nat)
  (=> main_r0 (main_ ?tv61) (ite3 (is_unimodal (repr ?tv61)) (target_ ?tv61) zero))
  (prove (forall ((inp0 UList)) (= (main inp0) (main_ inp0))))
