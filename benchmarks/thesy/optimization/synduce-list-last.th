  (datatype Bool () ((true Bool) (false Bool)))
  (datatype Nat () ((zero Nat) (succ Nat Nat)))
  (datatype List () ((elt Nat List) (cons Nat List List)))
  (datatype CList () ((single Nat CList) (concat CList CList CList)))
  (declare-fun tf1 (List) Nat)
  (=> tf1r0 (tf1 (elt ?tv3)) ?tv3)
  (=> tf1r1 (tf1 (cons ?tv4 ?tv5)) (tf0 ?tv5))
  (declare-fun tf0 (List) Nat)
  (=> tf0r0 (tf0 ?tv1) (tf1 ?tv1))
  (declare-fun spec (List) Nat)
  (=> specr0 (spec ?tv0) (tf0 ?tv0))
  (declare-fun tf3 (List List) List)
  (=> tf3r0 (tf3 ?tv11 (elt ?tv12)) (cons ?tv12 ?tv11))
  (=> tf3r1 (tf3 ?tv11 (cons ?tv13 ?tv14)) (cons ?tv13 (tf2 ?tv14 ?tv11)))
  (declare-fun tf2 (List List) List)
  (=> tf2r0 (tf2 ?tv8 ?tv9) (tf3 ?tv9 ?tv8))
  (declare-fun cat (List List) List)
  (=> catr0 (cat ?tv6 ?tv7) (tf2 ?tv6 ?tv7))
  (declare-fun tf5 (CList) List)
  (=> tf5r0 (tf5 (single ?tv18)) (elt ?tv18))
  (=> tf5r1 (tf5 (concat ?tv19 ?tv20)) (cat (tf4 ?tv19) (tf4 ?tv20)))
  (declare-fun tf4 (CList) List)
  (=> tf4r0 (tf4 ?tv16) (tf5 ?tv16))
  (declare-fun repr (CList) List)
  (=> reprr0 (repr ?tv15) (tf4 ?tv15))
  (declare-fun main (CList) Nat)
  (=> mainr0 (main ?tv21) (spec (repr ?tv21)))
  (declare-fun tf7 (CList) Nat)
  (=> tf7r0 (tf7 (single ?tv25)) ?tv25)
  (=> tf7r1 (tf7 (concat ?tv26 ?tv27)) (tf6 ?tv27))
  (declare-fun tf6 (CList) Nat)
  (=> tf6r0 (tf6 ?tv23) (tf7 ?tv23))
  (declare-fun repr_ (CList) Nat)
  (=> repr_r0 (repr_ ?tv22) (tf6 ?tv22))
  (declare-fun main_ (CList) Nat)
  (=> main_r0 (main_ ?tv28) (repr_ ?tv28))
  (prove (forall ((inp0 CList)) (= (main inp0) (main_ inp0))))
