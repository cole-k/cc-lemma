  (datatype Bool () ((true Bool) (false Bool)))
  (datatype Unit () ((null Unit)))
  (datatype Nat () ((zero Nat) (succ Nat Nat)))
  (datatype List () ((nil Unit List) (cons Nat List List)))
  (datatype NList () ((single List NList) (ncons List NList NList)))
  (declare-fun tf1 (NList) List)
  (=> tf1r0 (tf1 (single ?tv6)) (cons (product ?tv6) (nil null)))
  (=> tf1r1 (tf1 (ncons ?tv7 ?tv8)) (cons (product ?tv7) (tf0 ?tv8)))
  (declare-fun tf0 (NList) List)
  (=> tf0r0 (tf0 ?tv3) (tf1 ?tv3))
  (declare-fun map (NList) List)
  (=> mapr0 (map ?tv1) (tf0 ?tv1))
  (declare-fun plus (Nat Nat) Nat)
  (=> plusr0 (plus zero ?x) ?x)
  (=> plusr1 (plus (succ ?x) ?y) (succ (plus ?x ?y)))
  (declare-fun tf3 (List) Nat)
  (=> tf3r0 (tf3 (nil ?tv12)) zero)
  (=> tf3r1 (tf3 (cons ?tv13 ?tv14)) (plus ?tv13 (tf2 ?tv14)))
  (declare-fun tf2 (List) Nat)
  (=> tf2r0 (tf2 ?tv10) (tf3 ?tv10))
  (declare-fun sum (List) Nat)
  (=> sumr0 (sum ?tv9) (tf2 ?tv9))
  (declare-fun times (Nat Nat) Nat)
  (=> timesr0 (times zero ?x) zero)
  (=> timesr1 (times (succ ?x) ?y) (plus (times ?x ?y) ?y))
  (declare-fun tf5 (List) Nat)
  (=> tf5r0 (tf5 (nil ?tv18)) (succ zero))
  (=> tf5r1 (tf5 (cons ?tv19 ?tv20)) (times ?tv19 (tf4 ?tv20)))
  (declare-fun tf4 (List) Nat)
  (=> tf4r0 (tf4 ?tv16) (tf5 ?tv16))
  (declare-fun product (List) Nat)
  (=> productr0 (product ?tv15) (tf4 ?tv15))
  (declare-fun tf7 (List List) NList)
  (=> tf7r0 (tf7 ?tv24 (nil ?tv25)) (single ?tv24))
  (=> tf7r1 (tf7 ?tv24 (cons ?tv26 ?tv27)) (ncons ?tv24 (tf6 ?tv27)))
  (declare-fun tf6 (List) NList)
  (=> tf6r0 (tf6 ?tv22) (tf7 ?tv22 ?tv22))
  (declare-fun tails (List) NList)
  (=> tailsr0 (tails ?tv21) (tf6 ?tv21))
  (declare-fun main (List) Nat)
  (=> mainr0 (main ?tv28) (sum (map (tails ?tv28))))
  (datatype Tuple2 () ((makeTuple2 Nat Nat Tuple2)))
  (declare-fun fst_2 (Tuple2) Nat)
  (=> fst_2r0 (fst_2 (makeTuple2 ?x0 ?x1)) ?x0)
  (declare-fun snd_2 (Tuple2) Nat)
  (=> snd_2r0 (snd_2 (makeTuple2 ?x0 ?x1)) ?x1)
  (declare-fun tf9 (List) Tuple2)
  (=> tf9r0 (tf9 (nil ?tv32)) (makeTuple2 (succ zero) (succ zero)))
  (=> tf9r1 (tf9 (cons ?tv33 ?tv34)) (makeTuple2 (plus (fst_2 (tf8 ?tv34)) (times ?tv33 (snd_2 (tf8 ?tv34)))) (times ?tv33 (snd_2 (tf8 ?tv34)))))
  (declare-fun tf8 (List) Tuple2)
  (=> tf8r0 (tf8 ?tv30) (tf9 ?tv30))
  (declare-fun tails_ (List) Tuple2)
  (=> tails_r0 (tails_ ?tv29) (tf8 ?tv29))
  (declare-fun main_ (List) Nat)
  (=> main_r0 (main_ ?tv35) (fst_2 (tails_ ?tv35)))
  (prove (forall ((inp0 List)) (= (main inp0) (main_ inp0))))
