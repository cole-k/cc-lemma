  (datatype Bool () ((true Bool) (false Bool)))
  (datatype Unit () ((null Unit)))
  (datatype Nat () ((zero Nat) (succ Nat Nat)))
  (datatype List () ((nil Unit List) (cons Nat List List)))
  (datatype BoolList () ((bnil Unit BoolList) (bcons Bool BoolList BoolList)))
  (declare-fun tf1 (List) BoolList)
  (=> tf1r0 (tf1 (nil ?tv6)) (bnil null))
  (=> tf1r1 (tf1 (cons ?tv7 ?tv8)) (bcons (p ?tv7) (tf0 ?tv8)))
  (declare-fun tf0 (List) BoolList)
  (=> tf0r0 (tf0 ?tv3) (tf1 ?tv3))
  (declare-fun map (List) BoolList)
  (=> mapr0 (map ?tv1) (tf0 ?tv1))
  (declare-fun geq (Nat Nat) Bool)
  (=> geqr0 (geq zero (succ ?x)) false)
  (=> geqr1 (geq ?x zero) true)
  (=> geqr2 (geq (succ ?x) (succ ?y)) (geq ?x ?y))
  (declare-fun p (Nat) Bool)
  (=> pr0 (p ?tv9) (geq zero ?tv9))
  (declare-fun and (Bool Bool) Bool)
  (=> andr0 (and false ?x) false)
  (=> andr1 (and ?x false) false)
  (=> andr2 (and true true) true)
  (declare-fun tf3 (BoolList) Bool)
  (=> tf3r0 (tf3 (bnil ?tv13)) true)
  (=> tf3r1 (tf3 (bcons ?tv14 ?tv15)) (and ?tv14 (tf2 ?tv15)))
  (declare-fun tf2 (BoolList) Bool)
  (=> tf2r0 (tf2 ?tv11) (tf3 ?tv11))
  (declare-fun all (BoolList) Bool)
  (=> allr0 (all ?tv10) (tf2 ?tv10))
  (declare-fun main (List) Bool)
  (=> mainr0 (main ?tv16) (all (map ?tv16)))
  (declare-fun lq (Nat Nat) Bool)
  (=> lqr0 (lq zero (succ ?x)) true)
  (=> lqr1 (lq ?x zero) false)
  (=> lqr2 (lq (succ ?x) (succ ?y)) (lq ?x ?y))
  (declare-fun tf5 (List) Bool)
  (=> tf5r0 (tf5 (nil ?tv21)) true)
  (=> tf5r1 (tf5 (cons ?tv22 ?tv23)) (and (tf4 ?tv23) (lq ?tv22 (succ zero))))
  (declare-fun tf4 (List) Bool)
  (=> tf4r0 (tf4 ?tv19) (tf5 ?tv19))
  (declare-fun map_ (List) Bool)
  (=> map_r0 (map_ ?tv18) (tf4 ?tv18))
  (declare-fun main_ (List) Bool)
  (=> main_r0 (main_ ?tv24) (map_ ?tv24))
  (prove (forall ((inp0 List)) (= (main inp0) (main_ inp0))))
