  (datatype Bool () ((true Bool) (false Bool)))
  (datatype Nat () ((zero Nat) (succ Nat Nat)))
  (datatype Tree () ((leaf Nat Tree) (node Tree Tree Tree)))
  (datatype Unit () ((null Unit)))
  (datatype List () ((nil Unit List) (cons Nat List List)))
  (declare-fun tf1 (List List) List)
  (=> tf1r0 (tf1 ?tv5 (nil ?tv6)) ?tv5)
  (=> tf1r1 (tf1 ?tv5 (cons ?tv7 ?tv8)) (cons ?tv7 (tf0 ?tv8 ?tv5)))
  (declare-fun tf0 (List List) List)
  (=> tf0r0 (tf0 ?tv2 ?tv3) (tf1 ?tv3 ?tv2))
  (declare-fun cat (List List) List)
  (=> catr0 (cat ?tv0 ?tv1) (tf0 ?tv0 ?tv1))
  (declare-fun lq (Nat Nat) Bool)
  (=> lqr0 (lq zero (succ ?x)) true)
  (=> lqr1 (lq ?x zero) false)
  (=> lqr2 (lq (succ ?x) (succ ?y)) (lq ?x ?y))
  (declare-fun ite2 (Bool Nat Nat) Nat)
  (=> ite2r0 (ite2 true ?x ?y) ?x)
  (=> ite2r1 (ite2 false ?x ?y) ?y)
  (declare-fun max (Nat Nat) Nat)
  (=> maxr0 (max ?tv9 ?tv10) (ite2 (lq ?tv9 ?tv10) ?tv10 ?tv9))
  (declare-fun plus (Nat Nat) Nat)
  (=> plusr0 (plus zero ?x) ?x)
  (=> plusr1 (plus (succ ?x) ?y) (succ (plus ?x ?y)))
  (declare-fun tf3 (Tree) Nat)
  (=> tf3r0 (tf3 (leaf ?tv14)) zero)
  (=> tf3r1 (tf3 (node ?tv15 ?tv16)) (plus (succ zero) (max (tf2 ?tv15) (tf2 ?tv16))))
  (declare-fun tf2 (Tree) Nat)
  (=> tf2r0 (tf2 ?tv12) (tf3 ?tv12))
  (declare-fun depth (Tree) Nat)
  (=> depthr0 (depth ?tv11) (tf2 ?tv11))
  (datatype Tuple3 () ((makeTuple3 List Tree Tuple3)))
  (declare-fun gq (Nat Nat) Bool)
  (=> gqr0 (gq zero ?x) false)
  (=> gqr1 (gq (succ ?x) zero) true)
  (=> gqr2 (gq (succ ?x) (succ ?y)) (gq ?x ?y))
  (declare-fun snd_3 (Tuple3) Tree)
  (=> snd_3r0 (snd_3 (makeTuple3 ?x0 ?x1)) ?x1)
  (declare-fun fst_3 (Tuple3) List)
  (=> fst_3r0 (fst_3 (makeTuple3 ?x0 ?x1)) ?x0)
  (declare-fun nat_eq (Nat Nat) Bool)
  (=> nat_eqr0 (nat_eq zero zero) true)
  (=> nat_eqr1 (nat_eq zero (succ ?x)) false)
  (=> nat_eqr2 (nat_eq (succ ?x) zero) false)
  (=> nat_eqr3 (nat_eq (succ ?x) (succ ?y)) (nat_eq ?x ?y))
  (declare-fun ite3 (Bool Tuple3 Tuple3) Tuple3)
  (=> ite3r0 (ite3 true ?x ?y) ?x)
  (=> ite3r1 (ite3 false ?x ?y) ?y)
  (declare-fun tf5 (Tree Tree) Tuple3)
  (=> tf5r0 (tf5 ?tv20 (leaf ?tv21)) (makeTuple3 (cons ?tv21 (nil null)) ?tv20))
  (=> tf5r1 (tf5 ?tv20 (node ?tv22 ?tv23)) (ite3 (gq (depth (snd_3 (tf4 ?tv22))) (depth (snd_3 (tf4 ?tv23)))) (makeTuple3 (fst_3 (tf4 ?tv22)) ?tv20) (ite3 (nat_eq (depth (snd_3 (tf4 ?tv22))) (depth (snd_3 (tf4 ?tv23)))) (makeTuple3 (cat (fst_3 (tf4 ?tv22)) (fst_3 (tf4 ?tv23))) ?tv20) (makeTuple3 (fst_3 (tf4 ?tv23)) ?tv20))))
  (declare-fun tf4 (Tree) Tuple3)
  (=> tf4r0 (tf4 ?tv18) (tf5 ?tv18 ?tv18))
  (declare-fun deepest (Tree) Tuple3)
  (=> deepestr0 (deepest ?tv17) (tf4 ?tv17))
  (declare-fun main (Tree) List)
  (=> mainr0 (main ?tv24) (fst_3 (deepest ?tv24)))
  (datatype Tuple4 () ((makeTuple4 List Nat Tuple4)))
  (declare-fun snd_4 (Tuple4) Nat)
  (=> snd_4r0 (snd_4 (makeTuple4 ?x0 ?x1)) ?x1)
  (declare-fun fst_4 (Tuple4) List)
  (=> fst_4r0 (fst_4 (makeTuple4 ?x0 ?x1)) ?x0)
  (declare-fun ite4 (Bool Tuple4 Tuple4) Tuple4)
  (=> ite4r0 (ite4 true ?x ?y) ?x)
  (=> ite4r1 (ite4 false ?x ?y) ?y)
  (declare-fun tf7 (Tree) Tuple4)
  (=> tf7r0 (tf7 (leaf ?tv28)) (makeTuple4 (cons ?tv28 (nil null)) zero))
  (=> tf7r1 (tf7 (node ?tv29 ?tv30)) (ite4 (gq (snd_4 (tf6 ?tv29)) (snd_4 (tf6 ?tv30))) (makeTuple4 (fst_4 (tf6 ?tv29)) (plus (succ zero) (snd_4 (tf6 ?tv29)))) (ite4 (nat_eq (snd_4 (tf6 ?tv29)) (snd_4 (tf6 ?tv30))) (makeTuple4 (cat (fst_4 (tf6 ?tv29)) (fst_4 (tf6 ?tv30))) (plus (snd_4 (tf6 ?tv29)) (succ zero))) (makeTuple4 (fst_4 (tf6 ?tv30)) (plus (snd_4 (tf6 ?tv30)) (succ zero))))))
  (declare-fun tf6 (Tree) Tuple4)
  (=> tf6r0 (tf6 ?tv26) (tf7 ?tv26))
  (declare-fun deepest_ (Tree) Tuple4)
  (=> deepest_r0 (deepest_ ?tv25) (tf6 ?tv25))
  (declare-fun main_ (Tree) List)
  (=> main_r0 (main_ ?tv31) (fst_4 (deepest_ ?tv31)))
  (prove (forall ((inp0 Tree)) (= (main inp0) (main_ inp0))))
