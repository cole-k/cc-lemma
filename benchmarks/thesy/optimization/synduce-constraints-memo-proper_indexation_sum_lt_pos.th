  (datatype Bool () ((true Bool) (false Bool)))
  (datatype Unit () ((null Unit)))
  (datatype Nat () ((zero Nat) (succ Nat Nat)))
  (datatype List () ((nil Unit List) (cons Nat List List)))
  (datatype IDList () ((inil Unit IDList) (icons Nat Nat IDList IDList)))
  (declare-fun plus (Nat Nat) Nat)
  (=> plusr0 (plus zero ?x) ?x)
  (=> plusr1 (plus (succ ?x) ?y) (succ (plus ?x ?y)))
  (declare-fun tf1 (IDList) Nat)
  (=> tf1r0 (tf1 (inil ?tv3)) zero)
  (=> tf1r1 (tf1 (icons ?tv4 ?tv5 ?tv6)) (plus (succ zero) (tf0 ?tv6)))
  (declare-fun tf0 (IDList) Nat)
  (=> tf0r0 (tf0 ?tv1) (tf1 ?tv1))
  (declare-fun length (IDList) Nat)
  (=> lengthr0 (length ?tv0) (tf0 ?tv0))
  (declare-fun and (Bool Bool) Bool)
  (=> andr0 (and false ?x) false)
  (=> andr1 (and ?x false) false)
  (=> andr2 (and true true) true)
  (declare-fun nat_eq (Nat Nat) Bool)
  (=> nat_eqr0 (nat_eq zero zero) true)
  (=> nat_eqr1 (nat_eq zero (succ ?x)) false)
  (=> nat_eqr2 (nat_eq (succ ?x) zero) false)
  (=> nat_eqr3 (nat_eq (succ ?x) (succ ?y)) (nat_eq ?x ?y))
  (declare-fun tf3 (IDList) Bool)
  (=> tf3r0 (tf3 (inil ?tv10)) true)
  (=> tf3r1 (tf3 (icons ?tv11 ?tv12 ?tv13)) (and (tf2 ?tv13) (nat_eq ?tv12 (length ?tv13))))
  (declare-fun tf2 (IDList) Bool)
  (=> tf2r0 (tf2 ?tv8) (tf3 ?tv8))
  (declare-fun is_indexed (IDList) Bool)
  (=> is_indexedr0 (is_indexed ?tv7) (tf2 ?tv7))
  (declare-fun tf5 (IDList) List)
  (=> tf5r0 (tf5 (inil ?tv17)) (nil null))
  (=> tf5r1 (tf5 (icons ?tv18 ?tv19 ?tv20)) (cons ?tv18 (tf4 ?tv20)))
  (declare-fun tf4 (IDList) List)
  (=> tf4r0 (tf4 ?tv15) (tf5 ?tv15))
  (declare-fun repr (IDList) List)
  (=> reprr0 (repr ?tv14) (tf4 ?tv14))
  (declare-fun tf7 (List) Nat)
  (=> tf7r0 (tf7 (nil ?tv24)) zero)
  (=> tf7r1 (tf7 (cons ?tv25 ?tv26)) (plus (succ zero) (tf6 ?tv26)))
  (declare-fun tf6 (List) Nat)
  (=> tf6r0 (tf6 ?tv22) (tf7 ?tv22))
  (declare-fun len (List) Nat)
  (=> lenr0 (len ?tv21) (tf6 ?tv21))
  (declare-fun gq (Nat Nat) Bool)
  (=> gqr0 (gq zero ?x) false)
  (=> gqr1 (gq (succ ?x) zero) true)
  (=> gqr2 (gq (succ ?x) (succ ?y)) (gq ?x ?y))
  (declare-fun ite2 (Bool Nat Nat) Nat)
  (=> ite2r0 (ite2 true ?x ?y) ?x)
  (=> ite2r1 (ite2 false ?x ?y) ?y)
  (declare-fun tf9 (List) Nat)
  (=> tf9r0 (tf9 (nil ?tv30)) zero)
  (=> tf9r1 (tf9 (cons ?tv31 ?tv32)) (ite2 (gq ?tv31 (len ?tv32)) (plus ?tv31 (tf8 ?tv32)) (tf8 ?tv32)))
  (declare-fun tf8 (List) Nat)
  (=> tf8r0 (tf8 ?tv28) (tf9 ?tv28))
  (declare-fun spec (List) Nat)
  (=> specr0 (spec ?tv27) (tf8 ?tv27))
  (declare-fun tf11 (IDList IDList) IDList)
  (=> tf11r0 (tf11 ?tv36 (inil ?tv37)) ?tv36)
  (=> tf11r1 (tf11 ?tv36 (icons ?tv38 ?tv39 ?tv40)) (icons ?tv38 ?tv39 (tf10 ?tv40)))
  (declare-fun tf10 (IDList) IDList)
  (=> tf10r0 (tf10 ?tv34) (tf11 ?tv34 ?tv34))
  (declare-fun target (IDList) IDList)
  (=> targetr0 (target ?tv33) (tf10 ?tv33))
  (declare-fun main (IDList) Nat)
  (=> mainr0 (main ?tv41) (ite2 (is_indexed ?tv41) (spec (repr (target ?tv41))) zero))
  (datatype Tuple3 () ((makeTuple3 Nat Nat Tuple3)))
  (declare-fun leq (Nat Nat) Bool)
  (=> leqr0 (leq zero ?x) true)
  (=> leqr1 (leq (succ ?x) zero) false)
  (=> leqr2 (leq (succ ?x) (succ ?y)) (leq ?x ?y))
  (declare-fun snd_3 (Tuple3) Nat)
  (=> snd_3r0 (snd_3 (makeTuple3 ?x0 ?x1)) ?x1)
  (declare-fun fst_3 (Tuple3) Nat)
  (=> fst_3r0 (fst_3 (makeTuple3 ?x0 ?x1)) ?x0)
  (declare-fun tf13 (IDList) Tuple3)
  (=> tf13r0 (tf13 (inil ?tv45)) (makeTuple3 zero zero))
  (=> tf13r1 (tf13 (icons ?tv46 ?tv47 ?tv48)) (makeTuple3 (ite2 (leq ?tv46 (snd_3 (tf12 ?tv48))) (fst_3 (tf12 ?tv48)) (plus ?tv46 (fst_3 (tf12 ?tv48)))) (plus (snd_3 (tf12 ?tv48)) (succ zero))))
  (declare-fun tf12 (IDList) Tuple3)
  (=> tf12r0 (tf12 ?tv43) (tf13 ?tv43))
  (declare-fun target_ (IDList) Tuple3)
  (=> target_r0 (target_ ?tv42) (tf12 ?tv42))
  (declare-fun main_ (IDList) Nat)
  (=> main_r0 (main_ ?tv49) (ite2 (is_indexed ?tv49) (fst_3 (target_ ?tv49)) zero))
  (prove (forall ((inp0 IDList)) (= (main inp0) (main_ inp0))))
