  (datatype Bool () ((true Bool) (false Bool)))
  (datatype Nat () ((zero Nat) (succ Nat Nat)))
  (datatype Tuple0 () ((makeTuple0 Nat Nat Tuple0)))
  (datatype CList () ((ctwo Nat Nat CList) (concat CList CList CList)))
  (datatype List () ((two Nat Nat List) (cons Nat List List)))
  (declare-fun tf1 (List List) List)
  (=> tf1r0 (tf1 ?tv5 (two ?tv6 ?tv7)) (cons ?tv6 (cons ?tv7 ?tv5)))
  (=> tf1r1 (tf1 ?tv5 (cons ?tv8 ?tv9)) (cons ?tv8 (tf0 ?tv9 ?tv5)))
  (declare-fun tf0 (List List) List)
  (=> tf0r0 (tf0 ?tv2 ?tv3) (tf1 ?tv3 ?tv2))
  (declare-fun cat (List List) List)
  (=> catr0 (cat ?tv0 ?tv1) (tf0 ?tv0 ?tv1))
  (declare-fun tf3 (CList) List)
  (=> tf3r0 (tf3 (ctwo ?tv13 ?tv14)) (two ?tv13 ?tv14))
  (=> tf3r1 (tf3 (concat ?tv15 ?tv16)) (cat (tf2 ?tv15) (tf2 ?tv16)))
  (declare-fun tf2 (CList) List)
  (=> tf2r0 (tf2 ?tv11) (tf3 ?tv11))
  (declare-fun repr (CList) List)
  (=> reprr0 (repr ?tv10) (tf2 ?tv10))
  (declare-fun lq (Nat Nat) Bool)
  (=> lqr0 (lq zero (succ ?x)) true)
  (=> lqr1 (lq ?x zero) false)
  (=> lqr2 (lq (succ ?x) (succ ?y)) (lq ?x ?y))
  (declare-fun ite3 (Bool Nat Nat) Nat)
  (=> ite3r0 (ite3 true ?x ?y) ?x)
  (=> ite3r1 (ite3 false ?x ?y) ?y)
  (declare-fun min (Nat Nat) Nat)
  (=> minr0 (min ?tv17 ?tv18) (ite3 (lq ?tv17 ?tv18) ?tv17 ?tv18))
  (declare-fun max (Nat Nat) Nat)
  (=> maxr0 (max ?tv19 ?tv20) (ite3 (lq ?tv19 ?tv20) ?tv20 ?tv19))
  (declare-fun fst_0 (Tuple0) Nat)
  (=> fst_0r0 (fst_0 (makeTuple0 ?x0 ?x1)) ?x0)
  (declare-fun snd_0 (Tuple0) Nat)
  (=> snd_0r0 (snd_0 (makeTuple0 ?x0 ?x1)) ?x1)
  (declare-fun tf5 (List) Tuple0)
  (=> tf5r0 (tf5 (two ?tv24 ?tv25)) (makeTuple0 (min ?tv24 ?tv25) (max ?tv24 ?tv25)))
  (=> tf5r1 (tf5 (cons ?tv26 ?tv27)) (makeTuple0 (min (fst_0 (tf4 ?tv27)) ?tv26) (min (snd_0 (tf4 ?tv27)) (max (fst_0 (tf4 ?tv27)) ?tv26))))
  (declare-fun tf4 (List) Tuple0)
  (=> tf4r0 (tf4 ?tv22) (tf5 ?tv22))
  (declare-fun spec (List) Nat)
  (=> specr0 (spec ?tv21) (snd_0 (tf4 ?tv21)))
  (declare-fun and (Bool Bool) Bool)
  (=> andr0 (and false ?x) false)
  (=> andr1 (and ?x false) false)
  (=> andr2 (and true true) true)
  (declare-fun gq (Nat Nat) Bool)
  (=> gqr0 (gq zero ?x) false)
  (=> gqr1 (gq (succ ?x) zero) true)
  (=> gqr2 (gq (succ ?x) (succ ?y)) (gq ?x ?y))
  (declare-fun tf7 (Nat List) Bool)
  (=> tf7r0 (tf7 ?tv32 (two ?tv33 ?tv34)) (and (gq ?tv32 ?tv33) (gq ?tv33 ?tv34)))
  (=> tf7r1 (tf7 ?tv32 (cons ?tv35 ?tv36)) (and (gq ?tv32 ?tv35) (tf6 ?tv35 ?tv36)))
  (declare-fun tf6 (Nat List) Bool)
  (=> tf6r0 (tf6 ?tv29 ?tv30) (tf7 ?tv29 ?tv30))
  (declare-fun tf9 (List) Bool)
  (=> tf9r0 (tf9 (two ?tv38 ?tv39)) (gq ?tv38 ?tv39))
  (=> tf9r1 (tf9 (cons ?tv40 ?tv41)) (tf6 ?tv40 ?tv41))
  (declare-fun tf8 (List) Bool)
  (=> tf8r0 (tf8 ?tv37) (tf9 ?tv37))
  (declare-fun is_sorted (List) Bool)
  (=> is_sortedr0 (is_sorted ?tv28) (tf8 ?tv28))
  (declare-fun tf11 (CList CList) CList)
  (=> tf11r0 (tf11 ?tv45 (ctwo ?tv46 ?tv47)) ?tv45)
  (=> tf11r1 (tf11 ?tv45 (concat ?tv48 ?tv49)) (concat ?tv48 (tf10 ?tv49)))
  (declare-fun tf10 (CList) CList)
  (=> tf10r0 (tf10 ?tv43) (tf11 ?tv43 ?tv43))
  (declare-fun target (CList) CList)
  (=> targetr0 (target ?tv42) (tf10 ?tv42))
  (declare-fun main (CList) Nat)
  (=> mainr0 (main ?tv50) (ite3 (is_sorted (repr ?tv50)) (spec (repr (target ?tv50))) zero))
  (declare-fun tf13 (CList) Nat)
  (=> tf13r0 (tf13 (ctwo ?tv54 ?tv55)) ?tv54)
  (=> tf13r1 (tf13 (concat ?tv56 ?tv57)) (tf12 ?tv57))
  (declare-fun tf12 (CList) Nat)
  (=> tf12r0 (tf12 ?tv52) (tf13 ?tv52))
  (declare-fun target_ (CList) Nat)
  (=> target_r0 (target_ ?tv51) (tf12 ?tv51))
  (declare-fun main_ (CList) Nat)
  (=> main_r0 (main_ ?tv58) (ite3 (is_sorted (repr ?tv58)) (target_ ?tv58) zero))
  (prove (forall ((inp0 CList)) (= (main inp0) (main_ inp0))))
