  (datatype Bool () ((true Bool) (false Bool)))
  (datatype Nat () ((zero Nat) (succ Nat Nat)))
  (datatype List () ((elt Nat List) (cons Nat List List)))
  (datatype CList () ((single Nat CList) (concat Nat CList CList CList)))
  (declare-fun tf1 (List List) List)
  (=> tf1r0 (tf1 ?tv5 (elt ?tv6)) (cons ?tv6 ?tv5))
  (=> tf1r1 (tf1 ?tv5 (cons ?tv7 ?tv8)) (cons ?tv7 (tf0 ?tv8 ?tv5)))
  (declare-fun tf0 (List List) List)
  (=> tf0r0 (tf0 ?tv2 ?tv3) (tf1 ?tv3 ?tv2))
  (declare-fun cat (List List) List)
  (=> catr0 (cat ?tv0 ?tv1) (tf0 ?tv0 ?tv1))
  (declare-fun tf3 (CList) List)
  (=> tf3r0 (tf3 (single ?tv12)) (elt ?tv12))
  (=> tf3r1 (tf3 (concat ?tv13 ?tv14 ?tv15)) (cat (tf2 ?tv14) (tf2 ?tv15)))
  (declare-fun tf2 (CList) List)
  (=> tf2r0 (tf2 ?tv10) (tf3 ?tv10))
  (declare-fun repr (CList) List)
  (=> reprr0 (repr ?tv9) (tf2 ?tv9))
  (declare-fun lq (Nat Nat) Bool)
  (=> lqr0 (lq zero (succ ?x)) true)
  (=> lqr1 (lq ?x zero) false)
  (=> lqr2 (lq (succ ?x) (succ ?y)) (lq ?x ?y))
  (declare-fun ite2 (Bool Nat Nat) Nat)
  (=> ite2r0 (ite2 true ?x ?y) ?x)
  (=> ite2r1 (ite2 false ?x ?y) ?y)
  (declare-fun max (Nat Nat) Nat)
  (=> maxr0 (max ?tv16 ?tv17) (ite2 (lq ?tv16 ?tv17) ?tv17 ?tv16))
  (declare-fun min (Nat Nat) Nat)
  (=> minr0 (min ?tv18 ?tv19) (ite2 (lq ?tv18 ?tv19) ?tv18 ?tv19))
  (declare-fun tf5 (CList) Nat)
  (=> tf5r0 (tf5 (single ?tv23)) ?tv23)
  (=> tf5r1 (tf5 (concat ?tv24 ?tv25 ?tv26)) (max (tf4 ?tv25) (tf4 ?tv26)))
  (declare-fun tf4 (CList) Nat)
  (=> tf4r0 (tf4 ?tv21) (tf5 ?tv21))
  (declare-fun tf7 (CList) Nat)
  (=> tf7r0 (tf7 (single ?tv29)) ?tv29)
  (=> tf7r1 (tf7 (concat ?tv30 ?tv31 ?tv32)) (min (tf6 ?tv31) (tf6 ?tv32)))
  (declare-fun tf6 (CList) Nat)
  (=> tf6r0 (tf6 ?tv27) (tf7 ?tv27))
  (declare-fun and (Bool Bool) Bool)
  (=> andr0 (and false ?x) false)
  (=> andr1 (and ?x false) false)
  (=> andr2 (and true true) true)
  (declare-fun tf9 (CList) Bool)
  (=> tf9r0 (tf9 (single ?tv35)) true)
  (=> tf9r1 (tf9 (concat ?tv36 ?tv37 ?tv38)) (and (and (lq (tf4 ?tv37) ?tv36) (lq ?tv36 (tf6 ?tv38))) (and (tf8 ?tv37) (tf8 ?tv38))))
  (declare-fun tf8 (CList) Bool)
  (=> tf8r0 (tf8 ?tv33) (tf9 ?tv33))
  (declare-fun is_parti (CList) Bool)
  (=> is_partir0 (is_parti ?tv20) (tf8 ?tv20))
  (datatype Tuple3 () ((makeTuple3 Nat Bool Tuple3)))
  (declare-fun geq (Nat Nat) Bool)
  (=> geqr0 (geq zero (succ ?x)) false)
  (=> geqr1 (geq ?x zero) true)
  (=> geqr2 (geq (succ ?x) (succ ?y)) (geq ?x ?y))
  (declare-fun snd_3 (Tuple3) Bool)
  (=> snd_3r0 (snd_3 (makeTuple3 ?x0 ?x1)) ?x1)
  (declare-fun plus (Nat Nat) Nat)
  (=> plusr0 (plus zero ?x) ?x)
  (=> plusr1 (plus (succ ?x) ?y) (succ (plus ?x ?y)))
  (declare-fun fst_3 (Tuple3) Nat)
  (=> fst_3r0 (fst_3 (makeTuple3 ?x0 ?x1)) ?x0)
  (declare-fun tf11 (List) Tuple3)
  (=> tf11r0 (tf11 (elt ?tv42)) (makeTuple3 (max zero ?tv42) (geq ?tv42 zero)))
  (=> tf11r1 (tf11 (cons ?tv43 ?tv44)) (makeTuple3 (ite2 (and (geq ?tv43 zero) (snd_3 (tf10 ?tv44))) (plus (fst_3 (tf10 ?tv44)) ?tv43) (fst_3 (tf10 ?tv44))) (and (geq ?tv43 zero) (snd_3 (tf10 ?tv44)))))
  (declare-fun tf10 (List) Tuple3)
  (=> tf10r0 (tf10 ?tv40) (tf11 ?tv40))
  (declare-fun spec (List) Nat)
  (=> specr0 (spec ?tv39) (fst_3 (tf10 ?tv39)))
  (declare-fun leq (Nat Nat) Bool)
  (=> leqr0 (leq zero ?x) true)
  (=> leqr1 (leq (succ ?x) zero) false)
  (=> leqr2 (leq (succ ?x) (succ ?y)) (leq ?x ?y))
  (declare-fun ite4 (Bool CList CList) CList)
  (=> ite4r0 (ite4 true ?x ?y) ?x)
  (=> ite4r1 (ite4 false ?x ?y) ?y)
  (declare-fun tf13 (CList CList) CList)
  (=> tf13r0 (tf13 ?tv48 (single ?tv49)) ?tv48)
  (=> tf13r1 (tf13 ?tv48 (concat ?tv50 ?tv51 ?tv52)) (ite4 (leq ?tv50 zero) (concat ?tv50 ?tv51 (tf12 ?tv52)) (concat ?tv50 (tf12 ?tv51) (tf12 ?tv52))))
  (declare-fun tf12 (CList) CList)
  (=> tf12r0 (tf12 ?tv46) (tf13 ?tv46 ?tv46))
  (declare-fun target (CList) CList)
  (=> targetr0 (target ?tv45) (tf12 ?tv45))
  (declare-fun main (CList) Nat)
  (=> mainr0 (main ?tv53) (ite2 (is_parti ?tv53) (spec (repr (target ?tv53))) zero))
  (declare-fun tf15 (CList) Nat)
  (=> tf15r0 (tf15 (single ?tv57)) (max ?tv57 zero))
  (=> tf15r1 (tf15 (concat ?tv58 ?tv59 ?tv60)) (ite2 (leq ?tv58 zero) (tf14 ?tv60) (plus (tf14 ?tv60) (tf14 ?tv59))))
  (declare-fun tf14 (CList) Nat)
  (=> tf14r0 (tf14 ?tv55) (tf15 ?tv55))
  (declare-fun target_ (CList) Nat)
  (=> target_r0 (target_ ?tv54) (tf14 ?tv54))
  (declare-fun main_ (CList) Nat)
  (=> main_r0 (main_ ?tv61) (ite2 (is_parti ?tv61) (target_ ?tv61) zero))
  (prove (forall ((inp0 CList)) (= (main inp0) (main_ inp0))))
