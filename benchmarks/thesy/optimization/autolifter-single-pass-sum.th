  (datatype Bool () ((true Bool) (false Bool)))
  (datatype Nat () ((zero Nat) (succ Nat Nat)))
  (datatype Unit () ((null Unit)))
  (datatype List () ((cons Nat List List) (nil Unit List)))
  (declare-fun tf1 (List List) List)
  (=> tf1r0 (tf1 ?tv4 (nil ?tv5)) ?tv4)
  (=> tf1r1 (tf1 ?tv4 (cons ?tv6 ?tv7)) (cons ?tv6 (tf0 ?tv7)))
  (declare-fun tf0 (List) List)
  (=> tf0r0 (tf0 ?tv2) (tf1 ?tv2 ?tv2))
  (declare-fun tf2 (List) Nat)
  (=> tf2r0 (tf2 ?tv9) (sum (tf0 ?tv9)))
  (declare-fun single_pass (List) Nat)
  (=> single_passr0 (single_pass ?tv1) (tf2 ?tv1))
  (declare-fun plus (Nat Nat) Nat)
  (=> plusr0 (plus zero ?x) ?x)
  (=> plusr1 (plus (succ ?x) ?y) (succ (plus ?x ?y)))
  (declare-fun tf4 (List) Nat)
  (=> tf4r0 (tf4 (nil ?tv13)) zero)
  (=> tf4r1 (tf4 (cons ?tv14 ?tv15)) (plus ?tv14 (tf3 ?tv15)))
  (declare-fun tf3 (List) Nat)
  (=> tf3r0 (tf3 ?tv11) (tf4 ?tv11))
  (declare-fun sum (List) Nat)
  (=> sumr0 (sum ?tv10) (tf3 ?tv10))
  (declare-fun main (List) Nat)
  (=> mainr0 (main ?tv16) (single_pass ?tv16))
  (declare-fun tf6 (List) Nat)
  (=> tf6r0 (tf6 (nil ?tv21)) zero)
  (=> tf6r1 (tf6 (cons ?tv22 ?tv23)) (plus ?tv22 (tf5 ?tv23)))
  (declare-fun tf5 (List) Nat)
  (=> tf5r0 (tf5 ?tv19) (tf6 ?tv19))
  (declare-fun tf7 (List) Nat)
  (=> tf7r0 (tf7 ?tv24) (tf5 ?tv24))
  (declare-fun single_pass_ (List) Nat)
  (=> single_pass_r0 (single_pass_ ?tv18) (tf7 ?tv18))
  (declare-fun main_ (List) Nat)
  (=> main_r0 (main_ ?tv25) (single_pass_ ?tv25))
  (prove (forall ((inp0 List)) (= (main inp0) (main_ inp0))))
