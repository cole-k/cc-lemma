  (datatype Bool () ((true Bool) (false Bool)))
  (datatype Nat () ((zero Nat) (succ Nat Nat)))
  (datatype List () ((elt Nat List) (cons Nat List List)))
  (declare-fun leq (Nat Nat) Bool)
  (=> leqr0 (leq zero ?x) true)
  (=> leqr1 (leq (succ ?x) zero) false)
  (=> leqr2 (leq (succ ?x) (succ ?y)) (leq ?x ?y))
  (declare-fun and (Bool Bool) Bool)
  (=> andr0 (and false ?x) false)
  (=> andr1 (and ?x false) false)
  (=> andr2 (and true true) true)
  (declare-fun tf1 (Nat List) Bool)
  (=> tf1r0 (tf1 ?tv4 (elt ?tv5)) (leq ?tv4 ?tv5))
  (=> tf1r1 (tf1 ?tv4 (cons ?tv6 ?tv7)) (and (leq ?tv4 ?tv6) (tf0 ?tv6 ?tv7)))
  (declare-fun tf0 (Nat List) Bool)
  (=> tf0r0 (tf0 ?tv1 ?tv2) (tf1 ?tv1 ?tv2))
  (declare-fun tf3 (List) Bool)
  (=> tf3r0 (tf3 (elt ?tv9)) true)
  (=> tf3r1 (tf3 (cons ?tv10 ?tv11)) (tf0 ?tv10 ?tv11))
  (declare-fun tf2 (List) Bool)
  (=> tf2r0 (tf2 ?tv8) (tf3 ?tv8))
  (declare-fun is_sorted (List) Bool)
  (=> is_sortedr0 (is_sorted ?tv0) (tf2 ?tv0))
  (declare-fun gq (Nat Nat) Bool)
  (=> gqr0 (gq zero ?x) false)
  (=> gqr1 (gq (succ ?x) zero) true)
  (=> gqr2 (gq (succ ?x) (succ ?y)) (gq ?x ?y))
  (declare-fun ite1 (Bool Nat Nat) Nat)
  (=> ite1r0 (ite1 true ?x ?y) ?x)
  (=> ite1r1 (ite1 false ?x ?y) ?y)
  (declare-fun min (Nat Nat) Nat)
  (=> minr0 (min ?tv12 ?tv13) (ite1 (gq ?tv12 ?tv13) ?tv13 ?tv12))
  (declare-fun tf5 (List) Nat)
  (=> tf5r0 (tf5 (elt ?tv17)) ?tv17)
  (=> tf5r1 (tf5 (cons ?tv18 ?tv19)) (min ?tv18 (tf4 ?tv19)))
  (declare-fun tf4 (List) Nat)
  (=> tf4r0 (tf4 ?tv15) (tf5 ?tv15))
  (declare-fun spec (List) Nat)
  (=> specr0 (spec ?tv14) (tf4 ?tv14))
  (declare-fun tf7 (List List) List)
  (=> tf7r0 (tf7 ?tv22 (elt ?tv23)) ?tv22)
  (=> tf7r1 (tf7 ?tv22 (cons ?tv24 ?tv25)) ?tv22)
  (declare-fun tf6 (List) List)
  (=> tf6r0 (tf6 ?tv21) (tf7 ?tv21 ?tv21))
  (declare-fun target (List) List)
  (=> targetr0 (target ?tv20) (tf6 ?tv20))
  (declare-fun main (List) Nat)
  (=> mainr0 (main ?tv26) (ite1 (is_sorted ?tv26) (spec (target ?tv26)) zero))
  (declare-fun tf9 (List) Nat)
  (=> tf9r0 (tf9 (elt ?tv29)) ?tv29)
  (=> tf9r1 (tf9 (cons ?tv30 ?tv31)) ?tv30)
  (declare-fun tf8 (List) Nat)
  (=> tf8r0 (tf8 ?tv28) (tf9 ?tv28))
  (declare-fun target_ (List) Nat)
  (=> target_r0 (target_ ?tv27) (tf8 ?tv27))
  (declare-fun main_ (List) Nat)
  (=> main_r0 (main_ ?tv32) (ite1 (is_sorted ?tv32) (target_ ?tv32) zero))
  (prove (forall ((inp0 List)) (= (main inp0) (main_ inp0))))
