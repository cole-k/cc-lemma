  (datatype Bool () ((true Bool) (false Bool)))
  (datatype Unit () ((null Unit)))
  (datatype Nat () ((zero Nat) (succ Nat Nat)))
  (datatype List () ((nil Unit List) (cons Nat List List)))
  (declare-fun plus (Nat Nat) Nat)
  (=> plusr0 (plus zero ?x) ?x)
  (=> plusr1 (plus (succ ?x) ?y) (succ (plus ?x ?y)))
  (declare-fun tf1 (List) Nat)
  (=> tf1r0 (tf1 (nil ?tv3)) zero)
  (=> tf1r1 (tf1 (cons ?tv4 ?tv5)) (plus ?tv4 (tf0 ?tv5)))
  (declare-fun tf0 (List) Nat)
  (=> tf0r0 (tf0 ?tv1) (tf1 ?tv1))
  (declare-fun spec (List) Nat)
  (=> specr0 (spec ?tv0) (tf0 ?tv0))
  (declare-fun tf3 (Nat List) List)
  (=> tf3r0 (tf3 ?tv11 (nil ?tv12)) (cons ?tv11 (nil null)))
  (=> tf3r1 (tf3 ?tv11 (cons ?tv13 ?tv14)) (cons ?tv13 (tf2 ?tv14 ?tv11)))
  (declare-fun tf2 (List Nat) List)
  (=> tf2r0 (tf2 ?tv8 ?tv9) (tf3 ?tv9 ?tv8))
  (declare-fun snoc (List Nat) List)
  (=> snocr0 (snoc ?tv6 ?tv7) (tf2 ?tv6 ?tv7))
  (declare-fun tf5 (List List) List)
  (=> tf5r0 (tf5 ?tv19 (nil ?tv20)) ?tv19)
  (=> tf5r1 (tf5 ?tv19 (cons ?tv21 ?tv22)) (tf4 (snoc ?tv19 ?tv21) ?tv22))
  (declare-fun tf4 (List List) List)
  (=> tf4r0 (tf4 ?tv16 ?tv17) (tf5 ?tv16 ?tv17))
  (declare-fun repr (List) List)
  (=> reprr0 (repr ?tv15) (tf4 (nil null) ?tv15))
  (declare-fun main (List) Nat)
  (=> mainr0 (main ?tv23) (spec (repr ?tv23)))
  (declare-fun tf7 (Nat List) Nat)
  (=> tf7r0 (tf7 ?tv28 (nil ?tv29)) ?tv28)
  (=> tf7r1 (tf7 ?tv28 (cons ?tv30 ?tv31)) (tf6 (plus ?tv28 ?tv30) ?tv31))
  (declare-fun tf6 (Nat List) Nat)
  (=> tf6r0 (tf6 ?tv25 ?tv26) (tf7 ?tv25 ?tv26))
  (declare-fun repr_ (List) Nat)
  (=> repr_r0 (repr_ ?tv24) (tf6 zero ?tv24))
  (declare-fun main_ (List) Nat)
  (=> main_r0 (main_ ?tv32) (repr_ ?tv32))
  (prove (forall ((inp0 List)) (= (main inp0) (main_ inp0))))
