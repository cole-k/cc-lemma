  (datatype Bool () ((true Bool) (false Bool)))
  (datatype Unit () ((null Unit)))
  (datatype Nat () ((zero Nat) (succ Nat Nat)))
  (datatype List () ((nil Unit List) (cons Nat List List)))
  (datatype NList () ((nnil Unit NList) (ncons List NList NList)))
  (declare-fun max (Nat Nat) Nat)
  (=> maxr0 (max zero zero) zero)
  (=> maxr1 (max zero (succ ?x)) (succ ?x))
  (=> maxr2 (max (succ ?x) zero) (succ ?x))
  (=> maxr3 (max (succ ?x) (succ ?y)) (succ (max ?x ?y)))
  (declare-fun tf1 (List) Nat)
  (=> tf1r0 (tf1 (nil ?tv5)) zero)
  (=> tf1r1 (tf1 (cons ?tv6 ?tv7)) (max ?tv6 (tf0 ?tv7)))
  (declare-fun tf0 (List) Nat)
  (=> tf0r0 (tf0 ?tv3) (tf1 ?tv3))
  (declare-fun maximum (List) Nat)
  (=> maximumr0 (maximum ?tv2) (tf0 ?tv2))
  (declare-fun plus (Nat Nat) Nat)
  (=> plusr0 (plus zero ?x) ?x)
  (=> plusr1 (plus (succ ?x) ?y) (succ (plus ?x ?y)))
  (declare-fun times (Nat Nat) Nat)
  (=> timesr0 (times zero ?x) zero)
  (=> timesr1 (times (succ ?x) ?y) (plus (times ?x ?y) ?y))
  (declare-fun tf3 (List) Nat)
  (=> tf3r0 (tf3 (nil ?tv11)) (succ zero))
  (=> tf3r1 (tf3 (cons ?tv12 ?tv13)) (times ?tv12 (tf2 ?tv13)))
  (declare-fun tf2 (List) Nat)
  (=> tf2r0 (tf2 ?tv9) (tf3 ?tv9))
  (declare-fun product (List) Nat)
  (=> productr0 (product ?tv8) (tf2 ?tv8))
  (declare-fun tf5 (NList) List)
  (=> tf5r0 (tf5 (nnil ?tv17)) (nil null))
  (=> tf5r1 (tf5 (ncons ?tv18 ?tv19)) (cons (product ?tv18) (tf4 ?tv19)))
  (declare-fun tf4 (NList) List)
  (=> tf4r0 (tf4 ?tv15) (tf5 ?tv15))
  (declare-fun map (NList) List)
  (=> mapr0 (map ?tv14) (tf4 ?tv14))
  (declare-fun tf7 (List List) NList)
  (=> tf7r0 (tf7 ?tv22 (nil ?tv24)) (ncons (nil null) (nnil null)))
  (=> tf7r1 (tf7 ?tv22 (cons ?tv25 ?tv26)) (ncons ?tv22 (tf6 ?tv26)))
  (declare-fun tf6 (List) NList)
  (=> tf6r0 (tf6 ?tv21) (tf7 ?tv21 ?tv21))
  (declare-fun tails (List) NList)
  (=> tailsr0 (tails ?tv20) (tf6 ?tv20))
  (declare-fun main (List) Nat)
  (=> mainr0 (main ?tv27) (maximum (map (tails ?tv27))))
  (datatype Tuple3 () ((makeTuple3 Nat Nat Tuple3)))
  (declare-fun fst_3 (Tuple3) Nat)
  (=> fst_3r0 (fst_3 (makeTuple3 ?x0 ?x1)) ?x0)
  (declare-fun snd_3 (Tuple3) Nat)
  (=> snd_3r0 (snd_3 (makeTuple3 ?x0 ?x1)) ?x1)
  (declare-fun step (Nat Tuple3) Tuple3)
  (=> stepr0 (step ?tv28 ?tv29) (makeTuple3 (max (fst_3 ?tv29) (times ?tv28 (snd_3 ?tv29))) (times ?tv28 (snd_3 ?tv29))))
  (declare-fun tf9 (Tuple3 List) Tuple3)
  (=> tf9r0 (tf9 ?tv35 (nil ?tv36)) ?tv35)
  (=> tf9r1 (tf9 ?tv35 (cons ?tv37 ?tv38)) (step ?tv37 (tf8 ?tv38 ?tv35)))
  (declare-fun tf8 (List Tuple3) Tuple3)
  (=> tf8r0 (tf8 ?tv32 ?tv33) (tf9 ?tv33 ?tv32))
  (declare-fun fold (List) Tuple3)
  (=> foldr0 (fold ?tv30) (tf8 ?tv30 (makeTuple3 (succ zero) (succ zero))))
  (declare-fun main_ (List) Nat)
  (=> main_r0 (main_ ?tv39) (fst_3 (fold ?tv39)))
  (prove (forall ((inp0 List)) (= (main inp0) (main_ inp0))))
