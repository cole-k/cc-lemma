  (datatype Bool () ((true Bool) (false Bool)))
  (datatype List () ((elt Bool List) (cons Bool List List)))
  (datatype CList () ((single Bool CList) (concat CList CList CList)))
  (declare-fun tf1 (List List) List)
  (=> tf1r0 (tf1 ?tv5 (elt ?tv6)) (cons ?tv6 ?tv5))
  (=> tf1r1 (tf1 ?tv5 (cons ?tv7 ?tv8)) (cons ?tv7 (tf0 ?tv8 ?tv5)))
  (declare-fun tf0 (List List) List)
  (=> tf0r0 (tf0 ?tv2 ?tv3) (tf1 ?tv3 ?tv2))
  (declare-fun cat_list (List List) List)
  (=> cat_listr0 (cat_list ?tv0 ?tv1) (tf0 ?tv0 ?tv1))
  (declare-fun tf3 (CList) List)
  (=> tf3r0 (tf3 (single ?tv12)) (elt ?tv12))
  (=> tf3r1 (tf3 (concat ?tv13 ?tv14)) (cat_list (tf2 ?tv13) (tf2 ?tv14)))
  (declare-fun tf2 (CList) List)
  (=> tf2r0 (tf2 ?tv10) (tf3 ?tv10))
  (declare-fun repr (CList) List)
  (=> reprr0 (repr ?tv9) (tf2 ?tv9))
  (datatype Tuple2 () ((makeTuple2 Bool Bool Bool Tuple2)))
  (declare-fun and (Bool Bool) Bool)
  (=> andr0 (and false ?x) false)
  (=> andr1 (and ?x false) false)
  (=> andr2 (and true true) true)
  (declare-fun fst_2 (Tuple2) Bool)
  (=> fst_2r0 (fst_2 (makeTuple2 ?x0 ?x1 ?x2)) ?x0)
  (declare-fun snd_2 (Tuple2) Bool)
  (=> snd_2r0 (snd_2 (makeTuple2 ?x0 ?x1 ?x2)) ?x1)
  (declare-fun or (Bool Bool) Bool)
  (=> orr0 (or true ?x) true)
  (=> orr1 (or ?x true) true)
  (=> orr2 (or false false) false)
  (declare-fun not (Bool) Bool)
  (=> notr0 (not true) false)
  (=> notr1 (not false) true)
  (declare-fun third_2 (Tuple2) Bool)
  (=> third_2r0 (third_2 (makeTuple2 ?x0 ?x1 ?x2)) ?x2)
  (declare-fun tf5 (List) Tuple2)
  (=> tf5r0 (tf5 (elt ?tv18)) (makeTuple2 ?tv18 true ?tv18))
  (=> tf5r1 (tf5 (cons ?tv19 ?tv20)) (makeTuple2 (and (fst_2 (tf4 ?tv20)) ?tv19) (and (snd_2 (tf4 ?tv20)) (or (fst_2 (tf4 ?tv20)) (not ?tv19))) (third_2 (tf4 ?tv20))))
  (declare-fun tf4 (List) Tuple2)
  (=> tf4r0 (tf4 ?tv16) (tf5 ?tv16))
  (declare-fun spec (List) Bool)
  (=> specr0 (spec ?tv15) (snd_2 (tf4 ?tv15)))
  (declare-fun main (CList) Bool)
  (=> mainr0 (main ?tv21) (spec (repr ?tv21)))
  (declare-fun tf7 (CList) Tuple2)
  (=> tf7r0 (tf7 (single ?tv25)) (makeTuple2 true ?tv25 ?tv25))
  (=> tf7r1 (tf7 (concat ?tv26 ?tv27)) (makeTuple2 (or (and (and (not (third_2 (tf6 ?tv26))) (fst_2 (tf6 ?tv26))) (fst_2 (tf6 ?tv27))) (and (and (fst_2 (tf6 ?tv26)) (fst_2 (tf6 ?tv27))) (snd_2 (tf6 ?tv27)))) (snd_2 (tf6 ?tv26)) (third_2 (tf6 ?tv27))))
  (declare-fun tf6 (CList) Tuple2)
  (=> tf6r0 (tf6 ?tv23) (tf7 ?tv23))
  (declare-fun repr_ (CList) Tuple2)
  (=> repr_r0 (repr_ ?tv22) (tf6 ?tv22))
  (declare-fun main_ (CList) Bool)
  (=> main_r0 (main_ ?tv28) (fst_2 (repr_ ?tv28)))
  (prove (forall ((inp0 CList)) (= (main inp0) (main_ inp0))))
