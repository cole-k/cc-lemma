  (datatype Bool () ((true Bool) (false Bool)))
  (datatype Nat () ((zero Nat) (succ Nat Nat)))
  (datatype List () ((elt Nat List) (cons Nat List List)))
  (datatype IdxList () ((ielt Nat IdxList) (icons Nat Nat IdxList IdxList)))
  (declare-fun lq (Nat Nat) Bool)
  (=> lqr0 (lq zero (succ ?x)) true)
  (=> lqr1 (lq ?x zero) false)
  (=> lqr2 (lq (succ ?x) (succ ?y)) (lq ?x ?y))
  (declare-fun ite2 (Bool Nat Nat) Nat)
  (=> ite2r0 (ite2 true ?x ?y) ?x)
  (=> ite2r1 (ite2 false ?x ?y) ?y)
  (declare-fun max (Nat Nat) Nat)
  (=> maxr0 (max ?tv0 ?tv1) (ite2 (lq ?tv0 ?tv1) ?tv1 ?tv0))
  (declare-fun plus (Nat Nat) Nat)
  (=> plusr0 (plus zero ?x) ?x)
  (=> plusr1 (plus (succ ?x) ?y) (succ (plus ?x ?y)))
  (declare-fun tf1 (List) Nat)
  (=> tf1r0 (tf1 (elt ?tv5)) ?tv5)
  (=> tf1r1 (tf1 (cons ?tv6 ?tv7)) (plus ?tv6 (tf0 ?tv7)))
  (declare-fun tf0 (List) Nat)
  (=> tf0r0 (tf0 ?tv3) (tf1 ?tv3))
  (declare-fun hsum (List) Nat)
  (=> hsumr0 (hsum ?tv2) (tf0 ?tv2))
  (datatype Tuple3 () ((makeTuple3 Nat Nat Nat Tuple3)))
  (declare-fun gq (Nat Nat) Bool)
  (=> gqr0 (gq zero ?x) false)
  (=> gqr1 (gq (succ ?x) zero) true)
  (=> gqr2 (gq (succ ?x) (succ ?y)) (gq ?x ?y))
  (declare-fun ite3 (Bool Tuple3) Tuple3)
  (=> ite3r0 (ite3 true ?x) ?x)
  (=> ite3r1 (ite3 false ?x) (makeTuple3 zero zero zero))
  (declare-fun fst_3 (Tuple3) Nat)
  (=> fst_3r0 (fst_3 (makeTuple3 ?x0 ?x1 ?x2)) ?x0)
  (declare-fun snd_3 (Tuple3) Nat)
  (=> snd_3r0 (snd_3 (makeTuple3 ?x0 ?x1 ?x2)) ?x1)
  (declare-fun third_3 (Tuple3) Nat)
  (=> third_3r0 (third_3 (makeTuple3 ?x0 ?x1 ?x2)) ?x2)
  (declare-fun tf3 (List) Tuple3)
  (=> tf3r0 (tf3 (elt ?tv11)) (ite3 (gq ?tv11 zero) (makeTuple3 ?tv11 ?tv11 ?tv11)))
  (=> tf3r1 (tf3 (cons ?tv12 ?tv13)) (makeTuple3 (max (plus ?tv12 (hsum ?tv13)) (fst_3 (tf2 ?tv13))) (max (plus ?tv12 (snd_3 (tf2 ?tv13))) zero) (max (max (plus ?tv12 (snd_3 (tf2 ?tv13))) zero) (third_3 (tf2 ?tv13)))))
  (declare-fun tf2 (List) Tuple3)
  (=> tf2r0 (tf2 ?tv9) (tf3 ?tv9))
  (declare-fun mss (List) Nat)
  (=> mssr0 (mss ?tv8) (third_3 (tf2 ?tv8)))
  (declare-fun spec (List) Nat)
  (=> specr0 (spec ?tv14) (mss ?tv14))
  (declare-fun tf5 (IdxList) List)
  (=> tf5r0 (tf5 (ielt ?tv18)) (elt ?tv18))
  (=> tf5r1 (tf5 (icons ?tv19 ?tv20 ?tv21)) (cons ?tv19 (tf4 ?tv21)))
  (declare-fun tf4 (IdxList) List)
  (=> tf4r0 (tf4 ?tv16) (tf5 ?tv16))
  (declare-fun repr (IdxList) List)
  (=> reprr0 (repr ?tv15) (tf4 ?tv15))
  (declare-fun main (IdxList) Nat)
  (=> mainr0 (main ?tv22) (spec (repr ?tv22)))
  (datatype Tuple4 () ((makeTuple4 Nat Nat Tuple4)))
  (declare-fun and (Bool Bool) Bool)
  (=> andr0 (and false ?x) false)
  (=> andr1 (and ?x false) false)
  (=> andr2 (and true true) true)
  (declare-fun snd_4 (Tuple4) Nat)
  (=> snd_4r0 (snd_4 (makeTuple4 ?x0 ?x1)) ?x1)
  (declare-fun fst_4 (Tuple4) Nat)
  (=> fst_4r0 (fst_4 (makeTuple4 ?x0 ?x1)) ?x0)
  (declare-fun tf7 (IdxList) Tuple4)
  (=> tf7r0 (tf7 (ielt ?tv26)) (makeTuple4 (max ?tv26 zero) ?tv26))
  (=> tf7r1 (tf7 (icons ?tv27 ?tv28 ?tv29)) (makeTuple4 (ite2 (and (lq (plus ?tv27 (snd_4 (tf6 ?tv29))) (fst_4 (tf6 ?tv29))) (lq ?tv27 (fst_4 (tf6 ?tv29)))) (fst_4 (tf6 ?tv29)) (ite2 (lq (snd_4 (tf6 ?tv29)) zero) ?tv27 (plus ?tv27 (snd_4 (tf6 ?tv29))))) (plus ?tv27 (max (snd_4 (tf6 ?tv29)) zero))))
  (declare-fun tf6 (IdxList) Tuple4)
  (=> tf6r0 (tf6 ?tv24) (tf7 ?tv24))
  (declare-fun repr_ (IdxList) Tuple4)
  (=> repr_r0 (repr_ ?tv23) (tf6 ?tv23))
  (declare-fun main_ (IdxList) Nat)
  (=> main_r0 (main_ ?tv30) (fst_4 (repr_ ?tv30)))
  (prove (forall ((inp0 IdxList)) (= (main inp0) (main_ inp0))))
