  (datatype Bool () ((true Bool) (false Bool)))
  (datatype Unit () ((null Unit)))
  (datatype Nat () ((zero Nat) (succ Nat Nat)))
  (datatype Tree () ((nil Unit Tree) (node Nat Tree Tree Tree)))
  (declare-fun lq (Nat Nat) Bool)
  (=> lqr0 (lq zero (succ ?x)) true)
  (=> lqr1 (lq ?x zero) false)
  (=> lqr2 (lq (succ ?x) (succ ?y)) (lq ?x ?y))
  (declare-fun ite1 (Bool Nat Nat) Nat)
  (=> ite1r0 (ite1 true ?x ?y) ?x)
  (=> ite1r1 (ite1 false ?x ?y) ?y)
  (declare-fun max (Nat Nat) Nat)
  (=> maxr0 (max ?tv0 ?tv1) (ite1 (lq ?tv0 ?tv1) ?tv1 ?tv0))
  (declare-fun plus (Nat Nat) Nat)
  (=> plusr0 (plus zero ?x) ?x)
  (=> plusr1 (plus (succ ?x) ?y) (succ (plus ?x ?y)))
  (declare-fun tf1 (Tree) Nat)
  (=> tf1r0 (tf1 (nil ?tv5)) zero)
  (=> tf1r1 (tf1 (node ?tv6 ?tv7 ?tv8)) (plus (succ zero) (max (tf0 ?tv7) (tf0 ?tv8))))
  (declare-fun tf0 (Tree) Nat)
  (=> tf0r0 (tf0 ?tv3) (tf1 ?tv3))
  (declare-fun height (Tree) Nat)
  (=> heightr0 (height ?tv2) (tf0 ?tv2))
  (declare-fun and (Bool Bool) Bool)
  (=> andr0 (and false ?x) false)
  (=> andr1 (and ?x false) false)
  (=> andr2 (and true true) true)
  (declare-fun nat_eq (Nat Nat) Bool)
  (=> nat_eqr0 (nat_eq zero zero) true)
  (=> nat_eqr1 (nat_eq zero (succ ?x)) false)
  (=> nat_eqr2 (nat_eq (succ ?x) zero) false)
  (=> nat_eqr3 (nat_eq (succ ?x) (succ ?y)) (nat_eq ?x ?y))
  (declare-fun tf3 (Tree) Bool)
  (=> tf3r0 (tf3 (nil ?tv12)) true)
  (=> tf3r1 (tf3 (node ?tv13 ?tv14 ?tv15)) (and (and (nat_eq (height ?tv14) (height ?tv15)) (tf2 ?tv14)) (tf2 ?tv15)))
  (declare-fun tf2 (Tree) Bool)
  (=> tf2r0 (tf2 ?tv10) (tf3 ?tv10))
  (declare-fun balanced (Tree) Bool)
  (=> balancedr0 (balanced ?tv9) (tf2 ?tv9))
  (declare-fun tf5 (Tree) Nat)
  (=> tf5r0 (tf5 (nil ?tv19)) zero)
  (=> tf5r1 (tf5 (node ?tv20 ?tv21 ?tv22)) (plus (succ zero) (plus (tf4 ?tv21) (tf4 ?tv22))))
  (declare-fun tf4 (Tree) Nat)
  (=> tf4r0 (tf4 ?tv17) (tf5 ?tv17))
  (declare-fun spec (Tree) Nat)
  (=> specr0 (spec ?tv16) (tf4 ?tv16))
  (declare-fun tf7 (Tree) Tree)
  (=> tf7r0 (tf7 (nil ?tv26)) (nil null))
  (=> tf7r1 (tf7 (node ?tv27 ?tv28 ?tv29)) (node ?tv27 (tf6 ?tv28) ?tv29))
  (declare-fun tf6 (Tree) Tree)
  (=> tf6r0 (tf6 ?tv24) (tf7 ?tv24))
  (declare-fun target (Tree) Tree)
  (=> targetr0 (target ?tv23) (tf6 ?tv23))
  (declare-fun main (Tree) Nat)
  (=> mainr0 (main ?tv30) (ite1 (balanced ?tv30) (spec (target ?tv30)) zero))
  (declare-fun times (Nat Nat) Nat)
  (=> timesr0 (times zero ?x) zero)
  (=> timesr1 (times (succ ?x) ?y) (plus (times ?x ?y) ?y))
  (declare-fun tf9 (Tree) Nat)
  (=> tf9r0 (tf9 (nil ?tv34)) zero)
  (=> tf9r1 (tf9 (node ?tv35 ?tv36 ?tv37)) (plus (times (succ (succ zero)) (tf8 ?tv36)) (max (tf8 ?tv36) (succ zero))))
  (declare-fun tf8 (Tree) Nat)
  (=> tf8r0 (tf8 ?tv32) (tf9 ?tv32))
  (declare-fun target_ (Tree) Nat)
  (=> target_r0 (target_ ?tv31) (tf8 ?tv31))
  (declare-fun main_ (Tree) Nat)
  (=> main_r0 (main_ ?tv38) (ite1 (balanced ?tv38) (target_ ?tv38) zero))
  (prove (forall ((inp0 Tree)) (= (main inp0) (main_ inp0))))
