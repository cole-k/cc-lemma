  (datatype Bool () ((true Bool) (false Bool)))
  (datatype Unit () ((null Unit)))
  (datatype Nat () ((zero Nat) (succ Nat Nat)))
  (datatype Tree () ((nil Unit Tree) (leaf Nat Tree) (node Nat Tree Tree Tree)))
  (declare-fun plus (Nat Nat) Nat)
  (=> plusr0 (plus zero ?x) ?x)
  (=> plusr1 (plus (succ ?x) ?y) (succ (plus ?x ?y)))
  (declare-fun tf1 (Tree) Nat)
  (=> tf1r0 (tf1 (nil ?tv3)) zero)
  (=> tf1r1 (tf1 (leaf ?tv4)) (succ zero))
  (=> tf1r2 (tf1 (node ?tv5 ?tv6 ?tv7)) (plus (succ zero) (plus (tf0 ?tv6) (tf0 ?tv7))))
  (declare-fun tf0 (Tree) Nat)
  (=> tf0r0 (tf0 ?tv1) (tf1 ?tv1))
  (declare-fun size (Tree) Nat)
  (=> sizer0 (size ?tv0) (tf0 ?tv0))
  (declare-fun and (Bool Bool) Bool)
  (=> andr0 (and false ?x) false)
  (=> andr1 (and ?x false) false)
  (=> andr2 (and true true) true)
  (declare-fun nat_eq (Nat Nat) Bool)
  (=> nat_eqr0 (nat_eq zero zero) true)
  (=> nat_eqr1 (nat_eq zero (succ ?x)) false)
  (=> nat_eqr2 (nat_eq (succ ?x) zero) false)
  (=> nat_eqr3 (nat_eq (succ ?x) (succ ?y)) (nat_eq ?x ?y))
  (declare-fun tf3 (Tree) Bool)
  (=> tf3r0 (tf3 (node ?tv11 ?tv12 ?tv13)) (and (nat_eq zero (size ?tv13)) (tf2 ?tv12)))
  (=> tf3r1 (tf3 (nil ?tv14)) true)
  (=> tf3r2 (tf3 (leaf ?tv15)) true)
  (declare-fun tf2 (Tree) Bool)
  (=> tf2r0 (tf2 ?tv9) (tf3 ?tv9))
  (declare-fun empty_right (Tree) Bool)
  (=> empty_rightr0 (empty_right ?tv8) (tf2 ?tv8))
  (declare-fun tf5 (Tree) Nat)
  (=> tf5r0 (tf5 (nil ?tv19)) zero)
  (=> tf5r1 (tf5 (leaf ?tv20)) ?tv20)
  (=> tf5r2 (tf5 (node ?tv21 ?tv22 ?tv23)) (plus ?tv21 (plus (tf4 ?tv22) (tf4 ?tv23))))
  (declare-fun tf4 (Tree) Nat)
  (=> tf4r0 (tf4 ?tv17) (tf5 ?tv17))
  (declare-fun spec (Tree) Nat)
  (=> specr0 (spec ?tv16) (tf4 ?tv16))
  (declare-fun tf7 (Tree) Tree)
  (=> tf7r0 (tf7 (nil ?tv27)) (nil null))
  (=> tf7r1 (tf7 (leaf ?tv28)) (leaf ?tv28))
  (=> tf7r2 (tf7 (node ?tv29 ?tv30 ?tv31)) (node ?tv29 (tf6 ?tv30) ?tv31))
  (declare-fun tf6 (Tree) Tree)
  (=> tf6r0 (tf6 ?tv25) (tf7 ?tv25))
  (declare-fun target (Tree) Tree)
  (=> targetr0 (target ?tv24) (tf6 ?tv24))
  (declare-fun ite1 (Bool Nat) Nat)
  (=> ite1r0 (ite1 true ?x) ?x)
  (=> ite1r1 (ite1 false ?x) zero)
  (declare-fun main (Tree) Nat)
  (=> mainr0 (main ?tv32) (ite1 (empty_right ?tv32) (spec (target ?tv32))))
  (declare-fun tf9 (Tree) Nat)
  (=> tf9r0 (tf9 (nil ?tv36)) zero)
  (=> tf9r1 (tf9 (leaf ?tv37)) ?tv37)
  (=> tf9r2 (tf9 (node ?tv38 ?tv39 ?tv40)) (plus (tf8 ?tv39) ?tv38))
  (declare-fun tf8 (Tree) Nat)
  (=> tf8r0 (tf8 ?tv34) (tf9 ?tv34))
  (declare-fun target_ (Tree) Nat)
  (=> target_r0 (target_ ?tv33) (tf8 ?tv33))
  (declare-fun main_ (Tree) Nat)
  (=> main_r0 (main_ ?tv41) (ite1 (empty_right ?tv41) (target_ ?tv41)))
  (prove (forall ((inp0 Tree)) (= (main inp0) (main_ inp0))))
