  (datatype Bool () ((true Bool) (false Bool)))
  (datatype Nat () ((zero Nat) (succ Nat Nat)))
  (datatype List () ((elt Nat List) (cons Nat List List)))
  (datatype CList () ((single Nat CList) (concat CList CList CList)))
  (declare-fun tf1 (List List) List)
  (=> tf1r0 (tf1 ?tv5 (elt ?tv6)) (cons ?tv6 ?tv5))
  (=> tf1r1 (tf1 ?tv5 (cons ?tv7 ?tv8)) (cons ?tv7 (tf0 ?tv8 ?tv5)))
  (declare-fun tf0 (List List) List)
  (=> tf0r0 (tf0 ?tv2 ?tv3) (tf1 ?tv3 ?tv2))
  (declare-fun cat (List List) List)
  (=> catr0 (cat ?tv0 ?tv1) (tf0 ?tv0 ?tv1))
  (declare-fun tf3 (CList) List)
  (=> tf3r0 (tf3 (single ?tv12)) (elt ?tv12))
  (=> tf3r1 (tf3 (concat ?tv13 ?tv14)) (cat (tf2 ?tv13) (tf2 ?tv14)))
  (declare-fun tf2 (CList) List)
  (=> tf2r0 (tf2 ?tv10) (tf3 ?tv10))
  (declare-fun repr (CList) List)
  (=> reprr0 (repr ?tv9) (tf2 ?tv9))
  (declare-fun lq (Nat Nat) Bool)
  (=> lqr0 (lq zero (succ ?x)) true)
  (=> lqr1 (lq ?x zero) false)
  (=> lqr2 (lq (succ ?x) (succ ?y)) (lq ?x ?y))
  (declare-fun ite2 (Bool Nat Nat) Nat)
  (=> ite2r0 (ite2 true ?x ?y) ?x)
  (=> ite2r1 (ite2 false ?x ?y) ?y)
  (declare-fun max (Nat Nat) Nat)
  (=> maxr0 (max ?tv15 ?tv16) (ite2 (lq ?tv15 ?tv16) ?tv16 ?tv15))
  (declare-fun tf5 (CList) Nat)
  (=> tf5r0 (tf5 (single ?tv20)) ?tv20)
  (=> tf5r1 (tf5 (concat ?tv21 ?tv22)) (max (tf4 ?tv21) (tf4 ?tv22)))
  (declare-fun tf4 (CList) Nat)
  (=> tf4r0 (tf4 ?tv18) (tf5 ?tv18))
  (declare-fun lmax (CList) Nat)
  (=> lmaxr0 (lmax ?tv17) (tf4 ?tv17))
  (declare-fun min (Nat Nat) Nat)
  (=> minr0 (min ?tv23 ?tv24) (ite2 (lq ?tv23 ?tv24) ?tv23 ?tv24))
  (declare-fun tf7 (CList) Nat)
  (=> tf7r0 (tf7 (single ?tv28)) ?tv28)
  (=> tf7r1 (tf7 (concat ?tv29 ?tv30)) (min (tf6 ?tv29) (tf6 ?tv30)))
  (declare-fun tf6 (CList) Nat)
  (=> tf6r0 (tf6 ?tv26) (tf7 ?tv26))
  (declare-fun lmin (CList) Nat)
  (=> lminr0 (lmin ?tv25) (tf6 ?tv25))
  (declare-fun and (Bool Bool) Bool)
  (=> andr0 (and false ?x) false)
  (=> andr1 (and ?x false) false)
  (=> andr2 (and true true) true)
  (declare-fun gq (Nat Nat) Bool)
  (=> gqr0 (gq zero ?x) false)
  (=> gqr1 (gq (succ ?x) zero) true)
  (=> gqr2 (gq (succ ?x) (succ ?y)) (gq ?x ?y))
  (declare-fun tf9 (CList) Bool)
  (=> tf9r0 (tf9 (single ?tv34)) true)
  (=> tf9r1 (tf9 (concat ?tv35 ?tv36)) (and (gq (lmin ?tv35) (lmax ?tv36)) (and (tf8 ?tv35) (tf8 ?tv36))))
  (declare-fun tf8 (CList) Bool)
  (=> tf8r0 (tf8 ?tv32) (tf9 ?tv32))
  (declare-fun is_part (CList) Bool)
  (=> is_partr0 (is_part ?tv31) (tf8 ?tv31))
  (declare-fun tf11 (List) Nat)
  (=> tf11r0 (tf11 (elt ?tv40)) ?tv40)
  (=> tf11r1 (tf11 (cons ?tv41 ?tv42)) (max ?tv41 (tf10 ?tv42)))
  (declare-fun tf10 (List) Nat)
  (=> tf10r0 (tf10 ?tv38) (tf11 ?tv38))
  (declare-fun spec (List) Nat)
  (=> specr0 (spec ?tv37) (tf10 ?tv37))
  (declare-fun tf13 (CList CList) CList)
  (=> tf13r0 (tf13 ?tv46 (single ?tv47)) ?tv46)
  (=> tf13r1 (tf13 ?tv46 (concat ?tv48 ?tv49)) (concat (tf12 ?tv48) ?tv49))
  (declare-fun tf12 (CList) CList)
  (=> tf12r0 (tf12 ?tv44) (tf13 ?tv44 ?tv44))
  (declare-fun target (CList) CList)
  (=> targetr0 (target ?tv43) (tf12 ?tv43))
  (declare-fun main (CList) Nat)
  (=> mainr0 (main ?tv50) (ite2 (is_part ?tv50) (spec (repr (target ?tv50))) zero))
  (declare-fun tf15 (CList) Nat)
  (=> tf15r0 (tf15 (single ?tv54)) ?tv54)
  (=> tf15r1 (tf15 (concat ?tv55 ?tv56)) (tf14 ?tv55))
  (declare-fun tf14 (CList) Nat)
  (=> tf14r0 (tf14 ?tv52) (tf15 ?tv52))
  (declare-fun target_ (CList) Nat)
  (=> target_r0 (target_ ?tv51) (tf14 ?tv51))
  (declare-fun main_ (CList) Nat)
  (=> main_r0 (main_ ?tv57) (ite2 (is_part ?tv57) (target_ ?tv57) zero))
  (prove (forall ((inp0 CList)) (= (main inp0) (main_ inp0))))
