  (datatype Bool () ((true Bool) (false Bool)))
  (datatype Nat () ((zero Nat) (succ Nat Nat)))
  (datatype Tree () ((leaf Nat Tree) (branch Tree Tree Tree)))
  (declare-fun plus (Nat Nat) Nat)
  (=> plusr0 (plus zero ?x) ?x)
  (=> plusr1 (plus (succ ?x) ?y) (succ (plus ?x ?y)))
  (declare-fun times (Nat Nat) Nat)
  (=> timesr0 (times zero ?x) zero)
  (=> timesr1 (times (succ ?x) ?y) (plus (times ?x ?y) ?y))
  (declare-fun square (Nat) Nat)
  (=> squarer0 (square ?tv0) (times ?tv0 ?tv0))
  (declare-fun tf1 (Tree) Tree)
  (=> tf1r0 (tf1 (leaf ?tv4)) (leaf (square ?tv4)))
  (=> tf1r1 (tf1 (branch ?tv5 ?tv6)) (branch (tf0 ?tv5) (tf0 ?tv6)))
  (declare-fun tf0 (Tree) Tree)
  (=> tf0r0 (tf0 ?tv2) (tf1 ?tv2))
  (declare-fun squaretr (Tree) Tree)
  (=> squaretrr0 (squaretr ?tv1) (tf0 ?tv1))
  (declare-fun tf3 (Tree) Nat)
  (=> tf3r0 (tf3 (leaf ?tv10)) ?tv10)
  (=> tf3r1 (tf3 (branch ?tv11 ?tv12)) (plus (tf2 ?tv11) (tf2 ?tv12)))
  (declare-fun tf2 (Tree) Nat)
  (=> tf2r0 (tf2 ?tv8) (tf3 ?tv8))
  (declare-fun sumtr (Tree) Nat)
  (=> sumtrr0 (sumtr ?tv7) (tf2 ?tv7))
  (declare-fun main (Tree) Nat)
  (=> mainr0 (main ?tv13) (sumtr (squaretr ?tv13)))
  (declare-fun tf5 (Tree) Nat)
  (=> tf5r0 (tf5 (leaf ?tv17)) (square ?tv17))
  (=> tf5r1 (tf5 (branch ?tv18 ?tv19)) (plus (tf4 ?tv18) (tf4 ?tv19)))
  (declare-fun tf4 (Tree) Nat)
  (=> tf4r0 (tf4 ?tv15) (tf5 ?tv15))
  (declare-fun squaretr_ (Tree) Nat)
  (=> squaretr_r0 (squaretr_ ?tv14) (tf4 ?tv14))
  (declare-fun main_ (Tree) Nat)
  (=> main_r0 (main_ ?tv20) (squaretr_ ?tv20))
  (prove (forall ((inp0 Tree)) (= (main inp0) (main_ inp0))))
