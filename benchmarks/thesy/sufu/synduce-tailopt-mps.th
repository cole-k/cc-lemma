  (datatype Bool () ((true Bool) (false Bool)))
  (datatype Unit () ((null Unit)))
  (datatype Nat () ((zero Nat) (succ Nat Nat)))
  (datatype List () ((nil Unit List) (cons Nat List List)))
  (declare-fun gq (Nat Nat) Bool)
  (=> gqr0 (gq zero ?x) false)
  (=> gqr1 (gq (succ ?x) zero) true)
  (=> gqr2 (gq (succ ?x) (succ ?y)) (gq ?x ?y))
  (declare-fun ite1 (Bool Nat Nat) Nat)
  (=> ite1r0 (ite1 true ?x ?y) ?x)
  (=> ite1r1 (ite1 false ?x ?y) ?y)
  (declare-fun max (Nat Nat) Nat)
  (=> maxr0 (max ?tv0 ?tv1) (ite1 (gq ?tv0 ?tv1) ?tv0 ?tv1))
  (datatype Tuple2 () ((makeTuple2 Nat Nat Tuple2)))
  (declare-fun plus (Nat Nat) Nat)
  (=> plusr0 (plus zero ?x) ?x)
  (=> plusr1 (plus (succ ?x) ?y) (succ (plus ?x ?y)))
  (declare-fun fst_2 (Tuple2) Nat)
  (=> fst_2r0 (fst_2 (makeTuple2 ?x0 ?x1)) ?x0)
  (declare-fun snd_2 (Tuple2) Nat)
  (=> snd_2r0 (snd_2 (makeTuple2 ?x0 ?x1)) ?x1)
  (declare-fun tf1 (List) Tuple2)
  (=> tf1r0 (tf1 (nil ?tv5)) (makeTuple2 zero zero))
  (=> tf1r1 (tf1 (cons ?tv6 ?tv7)) (makeTuple2 (plus ?tv6 (fst_2 (tf0 ?tv7))) (max zero (plus ?tv6 (snd_2 (tf0 ?tv7))))))
  (declare-fun tf0 (List) Tuple2)
  (=> tf0r0 (tf0 ?tv3) (tf1 ?tv3))
  (declare-fun spec (List) Nat)
  (=> specr0 (spec ?tv2) (snd_2 (tf0 ?tv2)))
  (declare-fun tf3 (Nat List) List)
  (=> tf3r0 (tf3 ?tv13 (nil ?tv14)) (cons ?tv13 (nil null)))
  (=> tf3r1 (tf3 ?tv13 (cons ?tv15 ?tv16)) (cons ?tv15 (tf2 ?tv16 ?tv13)))
  (declare-fun tf2 (List Nat) List)
  (=> tf2r0 (tf2 ?tv10 ?tv11) (tf3 ?tv11 ?tv10))
  (declare-fun snoc (List Nat) List)
  (=> snocr0 (snoc ?tv8 ?tv9) (tf2 ?tv8 ?tv9))
  (declare-fun tf5 (List List) List)
  (=> tf5r0 (tf5 ?tv21 (nil ?tv22)) ?tv21)
  (=> tf5r1 (tf5 ?tv21 (cons ?tv23 ?tv24)) (tf4 (snoc ?tv21 ?tv23) ?tv24))
  (declare-fun tf4 (List List) List)
  (=> tf4r0 (tf4 ?tv18 ?tv19) (tf5 ?tv18 ?tv19))
  (declare-fun repr (List) List)
  (=> reprr0 (repr ?tv17) (tf4 (nil null) ?tv17))
  (declare-fun main (List) Nat)
  (=> mainr0 (main ?tv25) (spec (repr ?tv25)))
  (declare-fun tf7 (Tuple2 List) Tuple2)
  (=> tf7r0 (tf7 ?tv30 (nil ?tv31)) ?tv30)
  (=> tf7r1 (tf7 ?tv30 (cons ?tv32 ?tv33)) (tf6 (makeTuple2 (max (fst_2 ?tv30) (plus ?tv32 (snd_2 ?tv30))) (plus ?tv32 (snd_2 ?tv30))) ?tv33))
  (declare-fun tf6 (Tuple2 List) Tuple2)
  (=> tf6r0 (tf6 ?tv27 ?tv28) (tf7 ?tv27 ?tv28))
  (declare-fun repr_ (List) Tuple2)
  (=> repr_r0 (repr_ ?tv26) (tf6 (makeTuple2 zero zero) ?tv26))
  (declare-fun main_ (List) Nat)
  (=> main_r0 (main_ ?tv34) (fst_2 (repr_ ?tv34)))
  (prove (forall ((inp0 List)) (= (main inp0) (main_ inp0))))
