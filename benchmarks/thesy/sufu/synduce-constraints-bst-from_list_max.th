  (datatype Bool () ((true Bool) (false Bool)))
  (datatype Nat () ((zero Nat) (succ Nat Nat)))
  (datatype Tree () ((leaf Nat Tree) (node Nat Tree Tree Tree)))
  (datatype List () ((elt Nat List) (cons Nat List List)))
  (declare-fun lq (Nat Nat) Bool)
  (=> lqr0 (lq zero (succ ?x)) true)
  (=> lqr1 (lq ?x zero) false)
  (=> lqr2 (lq (succ ?x) (succ ?y)) (lq ?x ?y))
  (declare-fun ite2 (Bool Nat Nat) Nat)
  (=> ite2r0 (ite2 true ?x ?y) ?x)
  (=> ite2r1 (ite2 false ?x ?y) ?y)
  (declare-fun min (Nat Nat) Nat)
  (=> minr0 (min ?tv0 ?tv1) (ite2 (lq ?tv0 ?tv1) ?tv0 ?tv1))
  (declare-fun max (Nat Nat) Nat)
  (=> maxr0 (max ?tv2 ?tv3) (ite2 (lq ?tv2 ?tv3) ?tv3 ?tv2))
  (declare-fun tf1 (Tree) Nat)
  (=> tf1r0 (tf1 (leaf ?tv7)) ?tv7)
  (=> tf1r1 (tf1 (node ?tv8 ?tv9 ?tv10)) (min ?tv8 (min (tf0 ?tv9) (tf0 ?tv10))))
  (declare-fun tf0 (Tree) Nat)
  (=> tf0r0 (tf0 ?tv5) (tf1 ?tv5))
  (declare-fun tmin (Tree) Nat)
  (=> tminr0 (tmin ?tv4) (tf0 ?tv4))
  (declare-fun tf3 (Tree) Nat)
  (=> tf3r0 (tf3 (leaf ?tv14)) ?tv14)
  (=> tf3r1 (tf3 (node ?tv15 ?tv16 ?tv17)) (max ?tv15 (max (tf2 ?tv16) (tf2 ?tv17))))
  (declare-fun tf2 (Tree) Nat)
  (=> tf2r0 (tf2 ?tv12) (tf3 ?tv12))
  (declare-fun tmax (Tree) Nat)
  (=> tmaxr0 (tmax ?tv11) (tf2 ?tv11))
  (declare-fun and (Bool Bool) Bool)
  (=> andr0 (and false ?x) false)
  (=> andr1 (and ?x false) false)
  (=> andr2 (and true true) true)
  (declare-fun geq (Nat Nat) Bool)
  (=> geqr0 (geq zero (succ ?x)) false)
  (=> geqr1 (geq ?x zero) true)
  (=> geqr2 (geq (succ ?x) (succ ?y)) (geq ?x ?y))
  (declare-fun leq (Nat Nat) Bool)
  (=> leqr0 (leq zero ?x) true)
  (=> leqr1 (leq (succ ?x) zero) false)
  (=> leqr2 (leq (succ ?x) (succ ?y)) (leq ?x ?y))
  (declare-fun tf5 (Tree) Bool)
  (=> tf5r0 (tf5 (leaf ?tv21)) true)
  (=> tf5r1 (tf5 (node ?tv22 ?tv23 ?tv24)) (and (and (geq ?tv22 (tmax ?tv23)) (leq ?tv22 (tmin ?tv24))) (and (tf4 ?tv23) (tf4 ?tv24))))
  (declare-fun tf4 (Tree) Bool)
  (=> tf4r0 (tf4 ?tv19) (tf5 ?tv19))
  (declare-fun is_bst (Tree) Bool)
  (=> is_bstr0 (is_bst ?tv18) (tf4 ?tv18))
  (declare-fun tf7 (List List) List)
  (=> tf7r0 (tf7 ?tv29 (cons ?tv31 ?tv32)) (cons ?tv31 (tf6 ?tv32 ?tv29)))
  (=> tf7r1 (tf7 ?tv29 (elt ?tv33)) (cons ?tv33 ?tv29))
  (declare-fun tf6 (List List) List)
  (=> tf6r0 (tf6 ?tv27 ?tv28) (tf7 ?tv28 ?tv27))
  (declare-fun cat (List List) List)
  (=> catr0 (cat ?tv25 ?tv26) (tf6 ?tv25 ?tv26))
  (declare-fun tf9 (Tree) List)
  (=> tf9r0 (tf9 (leaf ?tv37)) (elt ?tv37))
  (=> tf9r1 (tf9 (node ?tv38 ?tv39 ?tv40)) (cat (tf8 ?tv39) (cons ?tv38 (tf8 ?tv40))))
  (declare-fun tf8 (Tree) List)
  (=> tf8r0 (tf8 ?tv35) (tf9 ?tv35))
  (declare-fun repr (Tree) List)
  (=> reprr0 (repr ?tv34) (tf8 ?tv34))
  (declare-fun tf11 (List) Nat)
  (=> tf11r0 (tf11 (elt ?tv44)) ?tv44)
  (=> tf11r1 (tf11 (cons ?tv45 ?tv46)) (max ?tv45 (tf10 ?tv46)))
  (declare-fun tf10 (List) Nat)
  (=> tf10r0 (tf10 ?tv42) (tf11 ?tv42))
  (declare-fun spec (List) Nat)
  (=> specr0 (spec ?tv41) (tf10 ?tv41))
  (declare-fun tf13 (Tree) Tree)
  (=> tf13r0 (tf13 (leaf ?tv50)) (leaf ?tv50))
  (=> tf13r1 (tf13 (node ?tv51 ?tv52 ?tv53)) (node ?tv51 ?tv52 (tf12 ?tv53)))
  (declare-fun tf12 (Tree) Tree)
  (=> tf12r0 (tf12 ?tv48) (tf13 ?tv48))
  (declare-fun target (Tree) Tree)
  (=> targetr0 (target ?tv47) (tf12 ?tv47))
  (declare-fun main (Tree) Nat)
  (=> mainr0 (main ?tv54) (ite2 (is_bst ?tv54) (spec (repr (target ?tv54))) zero))
  (declare-fun tf15 (Tree) Nat)
  (=> tf15r0 (tf15 (leaf ?tv58)) ?tv58)
  (=> tf15r1 (tf15 (node ?tv59 ?tv60 ?tv61)) (tf14 ?tv61))
  (declare-fun tf14 (Tree) Nat)
  (=> tf14r0 (tf14 ?tv56) (tf15 ?tv56))
  (declare-fun target_ (Tree) Nat)
  (=> target_r0 (target_ ?tv55) (tf14 ?tv55))
  (declare-fun main_ (Tree) Nat)
  (=> main_r0 (main_ ?tv62) (ite2 (is_bst ?tv62) (target_ ?tv62) zero))
  (prove (forall ((inp0 Tree)) (= (main inp0) (main_ inp0))))
