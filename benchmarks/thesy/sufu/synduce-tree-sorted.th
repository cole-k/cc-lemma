  (datatype Bool () ((true Bool) (false Bool)))
  (datatype Nat () ((zero Nat) (succ Nat Nat)))
  (datatype Tree () ((leaf Nat Tree) (node Nat Tree Tree Tree)))
  (datatype Tuple1 () ((makeTuple1 Nat Bool Tuple1)))
  (declare-fun and (Bool Bool) Bool)
  (=> andr0 (and false ?x) false)
  (=> andr1 (and ?x false) false)
  (=> andr2 (and true true) true)
  (declare-fun lq (Nat Nat) Bool)
  (=> lqr0 (lq zero (succ ?x)) true)
  (=> lqr1 (lq ?x zero) false)
  (=> lqr2 (lq (succ ?x) (succ ?y)) (lq ?x ?y))
  (declare-fun fst_1 (Tuple1) Nat)
  (=> fst_1r0 (fst_1 (makeTuple1 ?x0 ?x1)) ?x0)
  (declare-fun snd_1 (Tuple1) Bool)
  (=> snd_1r0 (snd_1 (makeTuple1 ?x0 ?x1)) ?x1)
  (declare-fun tf1 (Tree) Tuple1)
  (=> tf1r0 (tf1 (leaf ?tv3)) (makeTuple1 ?tv3 true))
  (=> tf1r1 (tf1 (node ?tv4 ?tv5 ?tv6)) (makeTuple1 ?tv4 (and (and (and (lq (fst_1 (tf0 ?tv5)) ?tv4) (lq ?tv4 (fst_1 (tf0 ?tv6)))) (snd_1 (tf0 ?tv5))) (snd_1 (tf0 ?tv6)))))
  (declare-fun tf0 (Tree) Tuple1)
  (=> tf0r0 (tf0 ?tv1) (tf1 ?tv1))
  (declare-fun spec (Tree) Bool)
  (=> specr0 (spec ?tv0) (snd_1 (tf0 ?tv0)))
  (declare-fun tf3 (Tree) Tree)
  (=> tf3r0 (tf3 (leaf ?tv10)) (leaf ?tv10))
  (=> tf3r1 (tf3 (node ?tv11 ?tv12 ?tv13)) (node ?tv11 (tf2 ?tv12) (tf2 ?tv13)))
  (declare-fun tf2 (Tree) Tree)
  (=> tf2r0 (tf2 ?tv8) (tf3 ?tv8))
  (declare-fun repr (Tree) Tree)
  (=> reprr0 (repr ?tv7) (tf2 ?tv7))
  (declare-fun main (Tree) Bool)
  (=> mainr0 (main ?tv14) (spec (repr ?tv14)))
  (datatype Tuple2 () ((makeTuple2 Bool Nat Tuple2)))
  (declare-fun snd_2 (Tuple2) Nat)
  (=> snd_2r0 (snd_2 (makeTuple2 ?x0 ?x1)) ?x1)
  (declare-fun fst_2 (Tuple2) Bool)
  (=> fst_2r0 (fst_2 (makeTuple2 ?x0 ?x1)) ?x0)
  (declare-fun tf5 (Tree) Tuple2)
  (=> tf5r0 (tf5 (leaf ?tv18)) (makeTuple2 true ?tv18))
  (=> tf5r1 (tf5 (node ?tv19 ?tv20 ?tv21)) (makeTuple2 (and (and (and (lq (snd_2 (tf4 ?tv20)) ?tv19) (fst_2 (tf4 ?tv21))) (fst_2 (tf4 ?tv20))) (lq ?tv19 (snd_2 (tf4 ?tv21)))) ?tv19))
  (declare-fun tf4 (Tree) Tuple2)
  (=> tf4r0 (tf4 ?tv16) (tf5 ?tv16))
  (declare-fun repr_ (Tree) Tuple2)
  (=> repr_r0 (repr_ ?tv15) (tf4 ?tv15))
  (declare-fun main_ (Tree) Bool)
  (=> main_r0 (main_ ?tv22) (fst_2 (repr_ ?tv22)))
  (prove (forall ((inp0 Tree)) (= (main inp0) (main_ inp0))))
