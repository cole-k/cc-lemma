  (datatype Bool () ((true Bool) (false Bool)))
  (datatype Nat () ((zero Nat) (succ Nat Nat)))
  (datatype Tree () ((tip Nat Tree) (bin Tree Tree Tree)))
  (datatype Tuple1 () ((makeTuple1 Nat Nat Tuple1)))
  (datatype PTree () ((ptip Nat Nat PTree) (pbin PTree PTree PTree)))
  (declare-fun plus (Nat Nat) Nat)
  (=> plusr0 (plus zero ?x) ?x)
  (=> plusr1 (plus (succ ?x) ?y) (succ (plus ?x ?y)))
  (declare-fun tf3 (PTree) PTree)
  (=> tf3r0 (tf3 (ptip ?tv8 ?tv9)) (ptip (plus ?tv8 (succ zero)) ?tv9))
  (=> tf3r1 (tf3 (pbin ?tv10 ?tv11)) (pbin (tf2 ?tv10) (tf2 ?tv11)))
  (declare-fun tf2 (PTree) PTree)
  (=> tf2r0 (tf2 ?tv6) (tf3 ?tv6))
  (declare-fun tf1 (Tree) PTree)
  (=> tf1r0 (tf1 (tip ?tv3)) (ptip zero ?tv3))
  (=> tf1r1 (tf1 (bin ?tv4 ?tv5)) (pbin (tf2 (tf0 ?tv4)) (tf2 (tf0 ?tv5))))
  (declare-fun tf0 (Tree) PTree)
  (=> tf0r0 (tf0 ?tv1) (tf1 ?tv1))
  (declare-fun tri (Tree) PTree)
  (=> trir0 (tri ?tv0) (tf0 ?tv0))
  (declare-fun times (Nat Nat) Nat)
  (=> timesr0 (times zero ?x) zero)
  (=> timesr1 (times (succ ?x) ?y) (plus (times ?x ?y) ?y))
  (declare-fun tf5 (PTree) Nat)
  (=> tf5r0 (tf5 (ptip ?tv15 ?tv16)) (times ?tv15 ?tv16))
  (=> tf5r1 (tf5 (pbin ?tv17 ?tv18)) (plus (tf4 ?tv17) (tf4 ?tv18)))
  (declare-fun tf4 (PTree) Nat)
  (=> tf4r0 (tf4 ?tv13) (tf5 ?tv13))
  (declare-fun tsum (PTree) Nat)
  (=> tsumr0 (tsum ?tv12) (tf4 ?tv12))
  (declare-fun main (Tree) Nat)
  (=> mainr0 (main ?tv19) (tsum (tri ?tv19)))
  (declare-fun fst_1 (Tuple1) Nat)
  (=> fst_1r0 (fst_1 (makeTuple1 ?x0 ?x1)) ?x0)
  (declare-fun snd_1 (Tuple1) Nat)
  (=> snd_1r0 (snd_1 (makeTuple1 ?x0 ?x1)) ?x1)
  (declare-fun tf7 (Tree) Tuple1)
  (=> tf7r0 (tf7 (tip ?tv23)) (makeTuple1 zero ?tv23))
  (=> tf7r1 (tf7 (bin ?tv24 ?tv25)) (makeTuple1 (plus (plus (plus (fst_1 (tf6 ?tv24)) (snd_1 (tf6 ?tv24))) (fst_1 (tf6 ?tv25))) (snd_1 (tf6 ?tv25))) (plus (snd_1 (tf6 ?tv24)) (snd_1 (tf6 ?tv25)))))
  (declare-fun tf6 (Tree) Tuple1)
  (=> tf6r0 (tf6 ?tv21) (tf7 ?tv21))
  (declare-fun tri_ (Tree) Tuple1)
  (=> tri_r0 (tri_ ?tv20) (tf6 ?tv20))
  (declare-fun main_ (Tree) Nat)
  (=> main_r0 (main_ ?tv26) (fst_1 (tri_ ?tv26)))
  (prove (forall ((inp0 Tree)) (= (main inp0) (main_ inp0))))
