  (datatype Bool () ((true Bool) (false Bool)))
  (datatype Unit () ((null Unit)))
  (datatype Nat () ((zero Nat) (succ Nat Nat)))
  (datatype List () ((nil Unit List) (cons Nat List List)))
  (datatype PList () ((pnil Unit PList) (pcons Nat Nat PList PList)))
  (declare-fun plus (Nat Nat) Nat)
  (=> plusr0 (plus zero ?x) ?x)
  (=> plusr1 (plus (succ ?x) ?y) (succ (plus ?x ?y)))
  (declare-fun tf3 (PList) PList)
  (=> tf3r0 (tf3 (pnil ?tv8)) (pnil null))
  (=> tf3r1 (tf3 (pcons ?tv9 ?tv10 ?tv11)) (pcons (plus ?tv9 (succ zero)) ?tv10 (tf2 ?tv11)))
  (declare-fun tf2 (PList) PList)
  (=> tf2r0 (tf2 ?tv6) (tf3 ?tv6))
  (declare-fun tf1 (List) PList)
  (=> tf1r0 (tf1 (nil ?tv3)) (pnil null))
  (=> tf1r1 (tf1 (cons ?tv4 ?tv5)) (pcons zero ?tv4 (tf2 (tf0 ?tv5))))
  (declare-fun tf0 (List) PList)
  (=> tf0r0 (tf0 ?tv1) (tf1 ?tv1))
  (declare-fun tri (List) PList)
  (=> trir0 (tri ?tv0) (tf0 ?tv0))
  (declare-fun times (Nat Nat) Nat)
  (=> timesr0 (times zero ?x) zero)
  (=> timesr1 (times (succ ?x) ?y) (plus (times ?x ?y) ?y))
  (declare-fun tf5 (PList) Nat)
  (=> tf5r0 (tf5 (pnil ?tv15)) zero)
  (=> tf5r1 (tf5 (pcons ?tv16 ?tv17 ?tv18)) (plus (times ?tv16 ?tv17) (tf4 ?tv18)))
  (declare-fun tf4 (PList) Nat)
  (=> tf4r0 (tf4 ?tv13) (tf5 ?tv13))
  (declare-fun tsum (PList) Nat)
  (=> tsumr0 (tsum ?tv12) (tf4 ?tv12))
  (declare-fun main (List) Nat)
  (=> mainr0 (main ?tv19) (tsum (tri ?tv19)))
  (datatype Tuple2 () ((makeTuple2 Nat Nat Tuple2)))
  (declare-fun fst_2 (Tuple2) Nat)
  (=> fst_2r0 (fst_2 (makeTuple2 ?x0 ?x1)) ?x0)
  (declare-fun snd_2 (Tuple2) Nat)
  (=> snd_2r0 (snd_2 (makeTuple2 ?x0 ?x1)) ?x1)
  (declare-fun tf7 (List) Tuple2)
  (=> tf7r0 (tf7 (nil ?tv23)) (makeTuple2 zero zero))
  (=> tf7r1 (tf7 (cons ?tv24 ?tv25)) (makeTuple2 (fst_2 (makeTuple2 (plus (fst_2 (tf6 ?tv25)) (snd_2 (tf6 ?tv25))) (snd_2 (tf6 ?tv25)))) (plus (snd_2 (makeTuple2 (plus (fst_2 (tf6 ?tv25)) (snd_2 (tf6 ?tv25))) (snd_2 (tf6 ?tv25)))) ?tv24)))
  (declare-fun tf6 (List) Tuple2)
  (=> tf6r0 (tf6 ?tv21) (tf7 ?tv21))
  (declare-fun tri_ (List) Tuple2)
  (=> tri_r0 (tri_ ?tv20) (tf6 ?tv20))
  (declare-fun main_ (List) Nat)
  (=> main_r0 (main_ ?tv26) (fst_2 (tri_ ?tv26)))
  (prove (forall ((inp0 List)) (= (main inp0) (main_ inp0))))
