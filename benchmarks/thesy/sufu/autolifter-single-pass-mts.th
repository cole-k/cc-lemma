  (datatype Bool () ((true Bool) (false Bool)))
  (datatype Nat () ((zero Nat) (succ Nat Nat)))
  (datatype Unit () ((null Unit)))
  (datatype List () ((cons Nat List List) (nil Unit List)))
  (declare-fun tf1 (List List) List)
  (=> tf1r0 (tf1 ?tv4 (nil ?tv5)) ?tv4)
  (=> tf1r1 (tf1 ?tv4 (cons ?tv6 ?tv7)) (cons ?tv6 (tf0 ?tv7)))
  (declare-fun tf0 (List) List)
  (=> tf0r0 (tf0 ?tv2) (tf1 ?tv2 ?tv2))
  (declare-fun tf2 (List) Nat)
  (=> tf2r0 (tf2 ?tv9) (mts (tf0 ?tv9)))
  (declare-fun single_pass (List) Nat)
  (=> single_passr0 (single_pass ?tv1) (tf2 ?tv1))
  (declare-fun lq (Nat Nat) Bool)
  (=> lqr0 (lq zero (succ ?x)) true)
  (=> lqr1 (lq ?x zero) false)
  (=> lqr2 (lq (succ ?x) (succ ?y)) (lq ?x ?y))
  (declare-fun ite1 (Bool Nat Nat) Nat)
  (=> ite1r0 (ite1 true ?x ?y) ?x)
  (=> ite1r1 (ite1 false ?x ?y) ?y)
  (declare-fun max (Nat Nat) Nat)
  (=> maxr0 (max ?tv10 ?tv11) (ite1 (lq ?tv10 ?tv11) ?tv11 ?tv10))
  (datatype Tuple2 () ((makeTuple2 Nat Nat Tuple2)))
  (declare-fun plus (Nat Nat) Nat)
  (=> plusr0 (plus zero ?x) ?x)
  (=> plusr1 (plus (succ ?x) ?y) (succ (plus ?x ?y)))
  (declare-fun snd_2 (Tuple2) Nat)
  (=> snd_2r0 (snd_2 (makeTuple2 ?x0 ?x1)) ?x1)
  (declare-fun fst_2 (Tuple2) Nat)
  (=> fst_2r0 (fst_2 (makeTuple2 ?x0 ?x1)) ?x0)
  (declare-fun tf4 (List) Tuple2)
  (=> tf4r0 (tf4 (nil ?tv15)) (makeTuple2 zero zero))
  (=> tf4r1 (tf4 (cons ?tv16 ?tv17)) (makeTuple2 (max (plus (snd_2 (tf3 ?tv17)) ?tv16) (fst_2 (tf3 ?tv17))) (plus (snd_2 (tf3 ?tv17)) ?tv16)))
  (declare-fun tf3 (List) Tuple2)
  (=> tf3r0 (tf3 ?tv13) (tf4 ?tv13))
  (declare-fun mts (List) Nat)
  (=> mtsr0 (mts ?tv12) (fst_2 (tf3 ?tv12)))
  (declare-fun main (List) Nat)
  (=> mainr0 (main ?tv18) (single_pass ?tv18))
  (declare-fun tf6 (List) Tuple2)
  (=> tf6r0 (tf6 (nil ?tv23)) (makeTuple2 zero zero))
  (=> tf6r1 (tf6 (cons ?tv24 ?tv25)) (makeTuple2 (ite1 (lq (plus ?tv24 (snd_2 (tf5 ?tv25))) (fst_2 (tf5 ?tv25))) (fst_2 (tf5 ?tv25)) (plus ?tv24 (snd_2 (tf5 ?tv25)))) (plus ?tv24 (snd_2 (tf5 ?tv25)))))
  (declare-fun tf5 (List) Tuple2)
  (=> tf5r0 (tf5 ?tv21) (tf6 ?tv21))
  (declare-fun tf7 (List) Nat)
  (=> tf7r0 (tf7 ?tv26) (fst_2 (tf5 ?tv26)))
  (declare-fun single_pass_ (List) Nat)
  (=> single_pass_r0 (single_pass_ ?tv20) (tf7 ?tv20))
  (declare-fun main_ (List) Nat)
  (=> main_r0 (main_ ?tv27) (single_pass_ ?tv27))
  (prove (forall ((inp0 List)) (= (main inp0) (main_ inp0))))
