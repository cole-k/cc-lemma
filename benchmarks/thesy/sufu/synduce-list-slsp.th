  (datatype Bool () ((true Bool) (false Bool)))
  (datatype Nat () ((zero Nat) (succ Nat Nat)))
  (datatype List () ((elt Nat List) (cons Nat List List)))
  (datatype CnList () ((sglt Nat CnList) (cat CnList Nat CnList CnList)))
  (declare-fun gq (Nat Nat) Bool)
  (=> gqr0 (gq zero ?x) false)
  (=> gqr1 (gq (succ ?x) zero) true)
  (=> gqr2 (gq (succ ?x) (succ ?y)) (gq ?x ?y))
  (declare-fun ite2 (Bool Nat Nat) Nat)
  (=> ite2r0 (ite2 true ?x ?y) ?x)
  (=> ite2r1 (ite2 false ?x ?y) ?y)
  (declare-fun max (Nat Nat) Nat)
  (=> maxr0 (max ?tv0 ?tv1) (ite2 (gq ?tv0 ?tv1) ?tv0 ?tv1))
  (declare-fun tf1 (List List) List)
  (=> tf1r0 (tf1 ?tv7 (elt ?tv8)) (cons ?tv8 ?tv7))
  (=> tf1r1 (tf1 ?tv7 (cons ?tv9 ?tv10)) (cons ?tv9 (tf0 ?tv10 ?tv7)))
  (declare-fun tf0 (List List) List)
  (=> tf0r0 (tf0 ?tv4 ?tv5) (tf1 ?tv5 ?tv4))
  (declare-fun cat_list (List List) List)
  (=> cat_listr0 (cat_list ?tv2 ?tv3) (tf0 ?tv2 ?tv3))
  (declare-fun tf3 (CnList) List)
  (=> tf3r0 (tf3 (sglt ?tv14)) (elt ?tv14))
  (=> tf3r1 (tf3 (cat ?tv15 ?tv16 ?tv17)) (cat_list (tf2 ?tv15) (tf2 ?tv17)))
  (declare-fun tf2 (CnList) List)
  (=> tf2r0 (tf2 ?tv12) (tf3 ?tv12))
  (declare-fun repr (CnList) List)
  (=> reprr0 (repr ?tv11) (tf2 ?tv11))
  (datatype Tuple3 () ((makeTuple3 Nat Bool Tuple3)))
  (declare-fun geq (Nat Nat) Bool)
  (=> geqr0 (geq zero (succ ?x)) false)
  (=> geqr1 (geq ?x zero) true)
  (=> geqr2 (geq (succ ?x) (succ ?y)) (geq ?x ?y))
  (declare-fun and (Bool Bool) Bool)
  (=> andr0 (and false ?x) false)
  (=> andr1 (and ?x false) false)
  (=> andr2 (and true true) true)
  (declare-fun snd_3 (Tuple3) Bool)
  (=> snd_3r0 (snd_3 (makeTuple3 ?x0 ?x1)) ?x1)
  (declare-fun plus (Nat Nat) Nat)
  (=> plusr0 (plus zero ?x) ?x)
  (=> plusr1 (plus (succ ?x) ?y) (succ (plus ?x ?y)))
  (declare-fun fst_3 (Tuple3) Nat)
  (=> fst_3r0 (fst_3 (makeTuple3 ?x0 ?x1)) ?x0)
  (declare-fun tf5 (List) Tuple3)
  (=> tf5r0 (tf5 (elt ?tv21)) (makeTuple3 (max zero ?tv21) (geq ?tv21 zero)))
  (=> tf5r1 (tf5 (cons ?tv22 ?tv23)) (makeTuple3 (ite2 (and (snd_3 (tf4 ?tv23)) (geq ?tv22 zero)) (plus ?tv22 (fst_3 (tf4 ?tv23))) (fst_3 (tf4 ?tv23))) (and (snd_3 (tf4 ?tv23)) (geq ?tv22 zero))))
  (declare-fun tf4 (List) Tuple3)
  (=> tf4r0 (tf4 ?tv19) (tf5 ?tv19))
  (declare-fun spec (List) Nat)
  (=> specr0 (spec ?tv18) (fst_3 (tf4 ?tv18)))
  (declare-fun main (CnList) Nat)
  (=> mainr0 (main ?tv24) (spec (repr ?tv24)))
  (datatype Tuple4 () ((makeTuple4 Nat Nat Nat Nat Tuple4)))
  (declare-fun times (Nat Nat) Nat)
  (=> timesr0 (times zero ?x) zero)
  (=> timesr1 (times (succ ?x) ?y) (plus (times ?x ?y) ?y))
  (declare-fun or (Bool Bool) Bool)
  (=> orr0 (or true ?x) true)
  (=> orr1 (or ?x true) true)
  (=> orr2 (or false false) false)
  (declare-fun nat_eq (Nat Nat) Bool)
  (=> nat_eqr0 (nat_eq zero zero) true)
  (=> nat_eqr1 (nat_eq zero (succ ?x)) false)
  (=> nat_eqr2 (nat_eq (succ ?x) zero) false)
  (=> nat_eqr3 (nat_eq (succ ?x) (succ ?y)) (nat_eq ?x ?y))
  (declare-fun fourth_4 (Tuple4) Nat)
  (=> fourth_4r0 (fourth_4 (makeTuple4 ?x0 ?x1 ?x2 ?x3)) ?x3)
  (declare-fun fst_4 (Tuple4) Nat)
  (=> fst_4r0 (fst_4 (makeTuple4 ?x0 ?x1 ?x2 ?x3)) ?x0)
  (declare-fun third_4 (Tuple4) Nat)
  (=> third_4r0 (third_4 (makeTuple4 ?x0 ?x1 ?x2 ?x3)) ?x2)
  (declare-fun lq (Nat Nat) Bool)
  (=> lqr0 (lq zero (succ ?x)) true)
  (=> lqr1 (lq ?x zero) false)
  (=> lqr2 (lq (succ ?x) (succ ?y)) (lq ?x ?y))
  (declare-fun snd_4 (Tuple4) Nat)
  (=> snd_4r0 (snd_4 (makeTuple4 ?x0 ?x1 ?x2 ?x3)) ?x1)
  (declare-fun tf7 (CnList) Tuple4)
  (=> tf7r0 (tf7 (sglt ?tv28)) (makeTuple4 (max ?tv28 zero) (times (succ (succ zero)) (max ?tv28 zero)) ?tv28 ?tv28))
  (=> tf7r1 (tf7 (cat ?tv29 ?tv30 ?tv31)) (makeTuple4 (ite2 (or (and (nat_eq (fourth_4 (tf6 ?tv31)) zero) (nat_eq (fst_4 (tf6 ?tv31)) (third_4 (tf6 ?tv31)))) (lq (fst_4 (tf6 ?tv31)) (snd_4 (tf6 ?tv31)))) (plus (fst_4 (tf6 ?tv31)) (fst_4 (tf6 ?tv29))) (fst_4 (tf6 ?tv31))) (ite2 (or (or (and (lq (fst_4 (tf6 ?tv31)) (snd_4 (tf6 ?tv31))) (lq (fst_4 (tf6 ?tv29)) (snd_4 (tf6 ?tv29)))) (and (nat_eq (fourth_4 (tf6 ?tv31)) zero) (nat_eq (fst_4 (tf6 ?tv31)) (third_4 (tf6 ?tv31))))) (and (nat_eq (fourth_4 (tf6 ?tv29)) zero) (nat_eq (fst_4 (tf6 ?tv29)) (third_4 (tf6 ?tv29))))) (plus (snd_4 (tf6 ?tv31)) (snd_4 (tf6 ?tv29))) (ite2 (or (and (lq zero (fourth_4 (tf6 ?tv31))) (nat_eq (fst_4 (tf6 ?tv31)) (snd_4 (tf6 ?tv31)))) (lq (third_4 (tf6 ?tv31)) (fst_4 (tf6 ?tv31)))) (fst_4 (tf6 ?tv31)) (plus (fst_4 (tf6 ?tv31)) (fst_4 (tf6 ?tv29))))) (plus (third_4 (tf6 ?tv31)) (third_4 (tf6 ?tv29))) (max (fourth_4 (tf6 ?tv31)) (fourth_4 (tf6 ?tv29)))))
  (declare-fun tf6 (CnList) Tuple4)
  (=> tf6r0 (tf6 ?tv26) (tf7 ?tv26))
  (declare-fun repr_ (CnList) Tuple4)
  (=> repr_r0 (repr_ ?tv25) (tf6 ?tv25))
  (declare-fun main_ (CnList) Nat)
  (=> main_r0 (main_ ?tv32) (fst_4 (repr_ ?tv32)))
  (prove (forall ((inp0 CnList)) (= (main inp0) (main_ inp0))))
