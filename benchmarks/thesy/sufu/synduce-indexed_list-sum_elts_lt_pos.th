  (datatype Bool () ((true Bool) (false Bool)))
  (datatype Unit () ((null Unit)))
  (datatype Nat () ((zero Nat) (succ Nat Nat)))
  (datatype List () ((nil Unit List) (cons Nat List List)))
  (datatype IndexedList () ((inil Unit IndexedList) (icons Nat Nat IndexedList IndexedList)))
  (declare-fun plus (Nat Nat) Nat)
  (=> plusr0 (plus zero ?x) ?x)
  (=> plusr1 (plus (succ ?x) ?y) (succ (plus ?x ?y)))
  (declare-fun tf1 (List) Nat)
  (=> tf1r0 (tf1 (nil ?tv3)) zero)
  (=> tf1r1 (tf1 (cons ?tv4 ?tv5)) (plus (succ zero) (tf0 ?tv5)))
  (declare-fun tf0 (List) Nat)
  (=> tf0r0 (tf0 ?tv1) (tf1 ?tv1))
  (declare-fun length (List) Nat)
  (=> lengthr0 (length ?tv0) (tf0 ?tv0))
  (declare-fun tf3 (List) IndexedList)
  (=> tf3r0 (tf3 (nil ?tv9)) (inil null))
  (=> tf3r1 (tf3 (cons ?tv10 ?tv11)) (icons ?tv10 (length ?tv11) (tf2 ?tv11)))
  (declare-fun tf2 (List) IndexedList)
  (=> tf2r0 (tf2 ?tv7) (tf3 ?tv7))
  (declare-fun repr (List) IndexedList)
  (=> reprr0 (repr ?tv6) (tf2 ?tv6))
  (declare-fun gq (Nat Nat) Bool)
  (=> gqr0 (gq zero ?x) false)
  (=> gqr1 (gq (succ ?x) zero) true)
  (=> gqr2 (gq (succ ?x) (succ ?y)) (gq ?x ?y))
  (declare-fun ite2 (Bool Nat Nat) Nat)
  (=> ite2r0 (ite2 true ?x ?y) ?x)
  (=> ite2r1 (ite2 false ?x ?y) ?y)
  (declare-fun tf5 (IndexedList) Nat)
  (=> tf5r0 (tf5 (inil ?tv15)) zero)
  (=> tf5r1 (tf5 (icons ?tv16 ?tv17 ?tv18)) (ite2 (gq ?tv16 ?tv17) (plus ?tv16 (tf4 ?tv18)) (tf4 ?tv18)))
  (declare-fun tf4 (IndexedList) Nat)
  (=> tf4r0 (tf4 ?tv13) (tf5 ?tv13))
  (declare-fun spec (IndexedList) Nat)
  (=> specr0 (spec ?tv12) (tf4 ?tv12))
  (declare-fun main (List) Nat)
  (=> mainr0 (main ?tv19) (spec (repr ?tv19)))
  (declare-fun lq (Nat Nat) Bool)
  (=> lqr0 (lq zero (succ ?x)) true)
  (=> lqr1 (lq ?x zero) false)
  (=> lqr2 (lq (succ ?x) (succ ?y)) (lq ?x ?y))
  (declare-fun tf7 (List) Nat)
  (=> tf7r0 (tf7 (nil ?tv23)) zero)
  (=> tf7r1 (tf7 (cons ?tv24 ?tv25)) (ite2 (lq (length ?tv25) ?tv24) (plus (tf6 ?tv25) ?tv24) (tf6 ?tv25)))
  (declare-fun tf6 (List) Nat)
  (=> tf6r0 (tf6 ?tv21) (tf7 ?tv21))
  (declare-fun repr_ (List) Nat)
  (=> repr_r0 (repr_ ?tv20) (tf6 ?tv20))
  (declare-fun main_ (List) Nat)
  (=> main_r0 (main_ ?tv26) (repr_ ?tv26))
  (prove (forall ((inp0 List)) (= (main inp0) (main_ inp0))))
