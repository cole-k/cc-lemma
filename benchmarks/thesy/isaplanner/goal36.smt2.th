(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun P (Nat) Bool)
(declare-fun take (Nat Lst) Lst)
(declare-fun takeWhile (Lst) Lst)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x0 ?__y1) (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)))
(=> rule1 (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)) (leq ?__x0 ?__y1))
(=> rule2 (take ?x nil) nil)
(=> rule3 (take zero ?x2) nil)
(=> rule4 (take (succ ?x) (cons ?y ?z)) (cons ?y (take ?x ?z)))
(=> rule5 (cons ?y (take ?x ?z)) (take (succ ?x) (cons ?y ?z)))
(=> rule6 (takeWhile nil) nil)
(=> rule7 nil (takeWhile nil))
(=> rule8 (takeWhile (cons ?x ?y3)) (ite (P ?x) (cons ?x (takeWhile ?y3)) nil))
(=> rule9 (ite (P ?x) (cons ?x (takeWhile ?y3)) nil) (takeWhile (cons ?x ?y3)))
(prove (forall ((xs Lst)) (=> (forall ((x Nat)) (P x)) (= (takeWhile xs) xs))))
