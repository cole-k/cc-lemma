(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun append (Lst Lst) Lst)
(declare-fun count (Nat Lst) Nat)
(declare-fun rev (Lst) Lst)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x0 ?__y1) (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)))
(=> rule1 (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)) (leq ?__x0 ?__y1))
(=> rule2 (append nil ?x) ?x)
(=> rule3 (append (cons ?x2 ?y) ?z) (cons ?x2 (append ?y ?z)))
(=> rule4 (cons ?x2 (append ?y ?z)) (append (cons ?x2 ?y) ?z))
(=> rule5 (count ?x3 nil) zero)
(=> rule6 (count ?x4 (cons ?y5 ?z)) (ite (= ?x4 ?y5) (succ (count ?x4 ?z)) (count ?x4 ?z)))
(=> rule7 (ite (= ?x4 ?y5) (succ (count ?x4 ?z)) (count ?x4 ?z)) (count ?x4 (cons ?y5 ?z)))
(=> rule8 (rev nil) nil)
(=> rule9 nil (rev nil))
(=> rule10 (rev (cons ?x6 ?y)) (append (rev ?y) (cons ?x6 nil)))
(=> rule11 (append (rev ?y) (cons ?x6 nil)) (rev (cons ?x6 ?y)))
(prove (forall ((n Nat)(l Lst)) (= (count n l) (count n (rev l)))))
