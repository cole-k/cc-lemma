(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun mem (Nat Lst) Bool)
(declare-fun ins1 (Nat Lst) Lst)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x0 ?__y1) (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)))
(=> rule1 (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)) (leq ?__x0 ?__y1))
(=> rule2 (mem ?x nil) false)
(=> rule3 (mem ?x (cons ?y ?z)) (or (= ?x ?y) (mem ?x ?z)))
(=> rule4 (or (= ?x ?y) (mem ?x ?z)) (mem ?x (cons ?y ?z)))
(=> rule5 (ins1 ?i nil) (cons ?i nil))
(=> rule6 (cons ?i nil) (ins1 ?i nil))
(=> rule7 (ins1 ?i (cons ?x ?y2)) (ite (= ?i ?x) (cons ?x ?y2) (cons ?x (ins1 ?i ?y2))))
(=> rule8 (ite (= ?i ?x) (cons ?x ?y2) (cons ?x (ins1 ?i ?y2))) (ins1 ?i (cons ?x ?y2)))
(prove (forall ((l Lst)(x Nat)) (= (mem x (ins1 x l)) true)))
