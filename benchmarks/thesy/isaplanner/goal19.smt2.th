(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun minus (Nat Nat) Nat)
(declare-fun len (Lst) Nat)
(declare-fun drop (Nat Lst) Lst)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x0 ?__y1) (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)))
(=> rule1 (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)) (leq ?__x0 ?__y1))
(=> rule2 (minus zero ?n) zero)
(=> rule3 (minus ?n zero) ?n)
(=> rule4 (minus (succ ?n) (succ ?m)) (minus ?n ?m))
(=> rule5 (minus ?n ?m) (minus (succ ?n) (succ ?m)))
(=> rule6 (len nil) zero)
(=> rule7 zero (len nil))
(=> rule8 (len (cons ?x ?y)) (succ (len ?y)))
(=> rule9 (drop ?x nil) nil)
(=> rule10 (drop zero ?x2) ?x2)
(=> rule11 (drop (succ ?x) (cons ?y3 ?z)) (drop ?x ?z))
(prove (forall ((xs Lst)(n Nat)) (= (len (drop n xs)) (minus (len xs) n))))
