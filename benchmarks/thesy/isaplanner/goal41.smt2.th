(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun f (Nat) Nat)
(declare-fun take (Nat Lst) Lst)
(declare-fun lmap (Lst) Lst)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x0 ?__y1) (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)))
(=> rule1 (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)) (leq ?__x0 ?__y1))
(=> rule2 (take ?x nil) nil)
(=> rule3 (take zero ?x2) nil)
(=> rule4 (take (succ ?x) (cons ?y ?z)) (cons ?y (take ?x ?z)))
(=> rule5 (cons ?y (take ?x ?z)) (take (succ ?x) (cons ?y ?z)))
(=> rule6 (lmap nil) nil)
(=> rule7 nil (lmap nil))
(=> rule8 (lmap (cons ?x ?y3)) (cons (f ?x) (lmap ?y3)))
(=> rule9 (cons (f ?x) (lmap ?y3)) (lmap (cons ?x ?y3)))
(prove (forall ((n Nat)(xs Lst)) (= (take n (lmap xs)) (lmap (take n xs)))))
