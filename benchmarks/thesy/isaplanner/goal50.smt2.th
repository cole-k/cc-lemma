(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun minus (Nat Nat) Nat)
(declare-fun len (Lst) Nat)
(declare-fun take (Nat Lst) Lst)
(declare-fun last (Lst) Nat)
(declare-fun butlast (Lst) Lst)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x0 ?__y1) (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)))
(=> rule1 (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)) (leq ?__x0 ?__y1))
(=> rule2 (minus zero ?n) zero)
(=> rule3 (minus ?n zero) ?n)
(=> rule4 (minus (succ ?n) (succ ?m)) (minus ?n ?m))
(=> rule5 (minus ?n ?m) (minus (succ ?n) (succ ?m)))
(=> rule6 (len nil) zero)
(=> rule7 zero (len nil))
(=> rule8 (len (cons ?x ?y)) (succ (len ?y)))
(=> rule9 (take ?x nil) nil)
(=> rule10 (take zero ?x2) nil)
(=> rule11 (take (succ ?x) (cons ?y3 ?z)) (cons ?y3 (take ?x ?z)))
(=> rule12 (cons ?y3 (take ?x ?z)) (take (succ ?x) (cons ?y3 ?z)))
(=> rule13 (last (cons ?x ?y)) (ite (= ?y nil) ?x (last ?y)))
(=> rule14 (ite (= ?y nil) ?x (last ?y)) (last (cons ?x ?y)))
(=> rule15 (butlast nil) nil)
(=> rule16 nil (butlast nil))
(=> rule17 (butlast (cons ?x ?y)) (ite (= ?y nil) nil (cons ?x (butlast ?y))))
(=> rule18 (ite (= ?y nil) nil (cons ?x (butlast ?y))) (butlast (cons ?x ?y)))
(prove (forall ((xs Lst)) (= (butlast xs) (take (minus (len xs) (succ zero)) xs))))
