(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun append (Lst Lst) Lst)
(declare-fun last (Lst) Nat)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x0 ?__y1) (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)))
(=> rule1 (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)) (leq ?__x0 ?__y1))
(=> rule2 (append nil ?x) ?x)
(=> rule3 (append (cons ?x2 ?y) ?z) (cons ?x2 (append ?y ?z)))
(=> rule4 (cons ?x2 (append ?y ?z)) (append (cons ?x2 ?y) ?z))
(=> rule5 (last (cons ?x3 ?y)) (ite (= ?y nil) ?x3 (last ?y)))
(=> rule6 (ite (= ?y nil) ?x3 (last ?y)) (last (cons ?x3 ?y)))
(prove (forall ((xs Lst)(ys Lst)) (= (last (append xs ys)) (ite (= ys nil) (last xs) (last ys)))))
