(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun P (Nat) Bool)
(declare-fun drop (Nat Lst) Lst)
(declare-fun dropWhile (Lst) Lst)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x0 ?__y1) (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)))
(=> rule1 (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)) (leq ?__x0 ?__y1))
(=> rule2 (drop ?x nil) nil)
(=> rule3 (drop zero ?x2) ?x2)
(=> rule4 (drop (succ ?x) (cons ?y ?z)) (drop ?x ?z))
(=> rule5 (dropWhile nil) nil)
(=> rule6 nil (dropWhile nil))
(=> rule7 (dropWhile (cons ?x ?y3)) (ite (P ?x) (dropWhile ?y3) (cons ?x ?y3)))
(=> rule8 (ite (P ?x) (dropWhile ?y3) (cons ?x ?y3)) (dropWhile (cons ?x ?y3)))
(prove (forall ((xs Lst)) (=> (forall ((x Nat)) (not (P x))) (= (dropWhile xs) xs))))
