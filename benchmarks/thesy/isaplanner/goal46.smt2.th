(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun zip (Lst Lst) ZLst)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x0 ?__y1) (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)))
(=> rule1 (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)) (leq ?__x0 ?__y1))
(=> rule2 (zip nil ?x) znil)
(=> rule3 (zip ?x nil) znil)
(=> rule4 (zip (cons ?x2 ?y) (cons ?z ?w)) (zcons (mkpair ?x2 ?z) (zip ?y ?w)))
(=> rule5 (zcons (mkpair ?x2 ?z) (zip ?y ?w)) (zip (cons ?x2 ?y) (cons ?z ?w)))
(prove (forall ((ys Lst)) (= (zip nil ys) znil)))
