(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Tree () ((node Nat Tree Tree Tree) (leaf Tree)))
(declare-fun less (Nat Nat) Bool)
(declare-fun nmax (Nat Nat) Nat)
(declare-fun mirror (Tree) Tree)
(declare-fun height (Tree) Nat)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x0 ?__y1) (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)))
(=> rule1 (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)) (leq ?__x0 ?__y1))
(=> rule2 (less ?x zero) false)
(=> rule3 (less zero (succ ?x)) true)
(=> rule4 (less (succ ?x) (succ ?y)) (less ?x ?y))
(=> rule5 (less ?x ?y) (less (succ ?x) (succ ?y)))
(=> rule6 (nmax ?n ?m) (ite (less ?n ?m) ?m ?n))
(=> rule7 (ite (less ?n ?m) ?m ?n) (nmax ?n ?m))
(=> rule8 (mirror leaf) leaf)
(=> rule9 leaf (mirror leaf))
(=> rule10 (mirror (node ?x ?y2 ?z)) (node ?x (mirror ?z) (mirror ?y2)))
(=> rule11 (node ?x (mirror ?z) (mirror ?y2)) (mirror (node ?x ?y2 ?z)))
(=> rule12 (height leaf) zero)
(=> rule13 zero (height leaf))
(=> rule14 (height (node ?x ?y3 ?z)) (succ (nmax (height ?y3) (height ?z))))
(prove (forall ((a Tree)) (= (height (mirror a)) (height a))))
