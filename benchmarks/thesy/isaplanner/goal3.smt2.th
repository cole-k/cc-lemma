(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun less (Nat Nat) Bool)
(declare-fun append (Lst Lst) Lst)
(declare-fun count (Nat Lst) Nat)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x0 ?__y1) (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)))
(=> rule1 (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)) (leq ?__x0 ?__y1))
(=> rule2 (less ?x zero) false)
(=> rule3 (less zero (succ ?x)) true)
(=> rule4 (less (succ ?x) (succ ?y)) (less ?x ?y))
(=> rule5 (less ?x ?y) (less (succ ?x) (succ ?y)))
(=> rule6 (append nil ?x2) ?x2)
(=> rule7 (append (cons ?x ?y3) ?z) (cons ?x (append ?y3 ?z)))
(=> rule8 (cons ?x (append ?y3 ?z)) (append (cons ?x ?y3) ?z))
(=> rule9 (count ?x nil) zero)
(=> rule10 (count ?x (cons ?y ?z)) (ite (= ?x ?y) (succ (count ?x ?z)) (count ?x ?z)))
(=> rule11 (ite (= ?x ?y) (succ (count ?x ?z)) (count ?x ?z)) (count ?x (cons ?y ?z)))
(prove (forall ((n Nat)(l Lst)(m Lst)) (= (or (= (count n l) (count n (append l m))) (less (count n l) (count n (append l m)))) true)))
