(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun append (Lst Lst) Lst)
(declare-fun drop (Nat Lst) Lst)
(declare-fun take (Nat Lst) Lst)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x0 ?__y1) (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)))
(=> rule1 (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)) (leq ?__x0 ?__y1))
(=> rule2 (append nil ?x) ?x)
(=> rule3 (append (cons ?x2 ?y) ?z) (cons ?x2 (append ?y ?z)))
(=> rule4 (cons ?x2 (append ?y ?z)) (append (cons ?x2 ?y) ?z))
(=> rule5 (drop ?x3 nil) nil)
(=> rule6 (drop zero ?x) ?x)
(=> rule7 (drop (succ ?x4) (cons ?y5 ?z)) (drop ?x4 ?z))
(=> rule8 (take ?x6 nil) nil)
(=> rule9 (take zero ?x) nil)
(=> rule10 (take (succ ?x7) (cons ?y8 ?z)) (cons ?y8 (take ?x7 ?z)))
(=> rule11 (cons ?y8 (take ?x7 ?z)) (take (succ ?x7) (cons ?y8 ?z)))
(prove (forall ((n Nat)(xs Lst)) (= (append (take n xs) (drop n xs)) xs)))
