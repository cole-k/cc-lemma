(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun P (Nat) Bool)
(declare-fun append (Lst Lst) Lst)
(declare-fun last (Lst) Nat)
(declare-fun filter (Lst) Lst)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x0 ?__y1) (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)))
(=> rule1 (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)) (leq ?__x0 ?__y1))
(=> rule2 (append nil ?x) ?x)
(=> rule3 (append (cons ?x2 ?y) ?z) (cons ?x2 (append ?y ?z)))
(=> rule4 (cons ?x2 (append ?y ?z)) (append (cons ?x2 ?y) ?z))
(=> rule5 (last (cons ?x3 ?y)) (ite (= ?y nil) ?x3 (last ?y)))
(=> rule6 (ite (= ?y nil) ?x3 (last ?y)) (last (cons ?x3 ?y)))
(=> rule7 (filter nil) nil)
(=> rule8 nil (filter nil))
(=> rule9 (filter (cons ?x4 ?y)) (ite (P ?x4) (cons ?x4 (filter ?y)) (filter ?y)))
(=> rule10 (ite (P ?x4) (cons ?x4 (filter ?y)) (filter ?y)) (filter (cons ?x4 ?y)))
(prove (forall ((xs Lst)(x5 Nat)) (= (last (append xs (cons x5 nil))) x5)))
