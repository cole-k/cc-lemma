(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun minus (Nat Nat) Nat)
(declare-fun drop (Nat Lst) Lst)
(declare-fun take (Nat Lst) Lst)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x0 ?__y1) (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)))
(=> rule1 (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)) (leq ?__x0 ?__y1))
(=> rule2 (minus zero ?n) zero)
(=> rule3 (minus ?n zero) ?n)
(=> rule4 (minus (succ ?n) (succ ?m)) (minus ?n ?m))
(=> rule5 (minus ?n ?m) (minus (succ ?n) (succ ?m)))
(=> rule6 (drop ?x nil) nil)
(=> rule7 (drop zero ?x2) ?x2)
(=> rule8 (drop (succ ?x) (cons ?y ?z)) (drop ?x ?z))
(=> rule9 (take ?x nil) nil)
(=> rule10 (take zero ?x3) nil)
(=> rule11 (take (succ ?x) (cons ?y ?z)) (cons ?y (take ?x ?z)))
(=> rule12 (cons ?y (take ?x ?z)) (take (succ ?x) (cons ?y ?z)))
(prove (forall ((xs Lst)(m Nat)(n Nat)) (= (drop n (take m xs)) (take (minus m n) (drop n xs)))))
