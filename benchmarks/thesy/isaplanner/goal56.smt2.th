(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun minus (Nat Nat) Nat)
(declare-fun append (Lst Lst) Lst)
(declare-fun len (Lst) Nat)
(declare-fun drop (Nat Lst) Lst)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x0 ?__y1) (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)))
(=> rule1 (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)) (leq ?__x0 ?__y1))
(=> rule2 (minus zero ?n) zero)
(=> rule3 (minus ?n zero) ?n)
(=> rule4 (minus (succ ?n) (succ ?m)) (minus ?n ?m))
(=> rule5 (minus ?n ?m) (minus (succ ?n) (succ ?m)))
(=> rule6 (append nil ?x) ?x)
(=> rule7 (append (cons ?x2 ?y) ?z) (cons ?x2 (append ?y ?z)))
(=> rule8 (cons ?x2 (append ?y ?z)) (append (cons ?x2 ?y) ?z))
(=> rule9 (len nil) zero)
(=> rule10 zero (len nil))
(=> rule11 (len (cons ?x3 ?y)) (succ (len ?y)))
(=> rule12 (drop ?x4 nil) nil)
(=> rule13 (drop zero ?x) ?x)
(=> rule14 (drop (succ ?x5) (cons ?y6 ?z)) (drop ?x5 ?z))
(prove (forall ((xs Lst)(ys Lst)(n Nat)) (= (drop n (append xs ys)) (append (drop n xs) (drop (minus n (len xs)) ys)))))
