(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun plus (Nat Nat) Nat)
(declare-fun count (Nat Lst) Nat)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x0 ?__y1) (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)))
(=> rule1 (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)) (leq ?__x0 ?__y1))
(=> rule2 (plus zero ?n) ?n)
(=> rule3 (plus (succ ?n) ?m) (succ (plus ?n ?m)))
(=> rule4 (succ (plus ?n ?m)) (plus (succ ?n) ?m))
(=> rule5 (count ?x nil) zero)
(=> rule6 (count ?x (cons ?y ?z)) (ite (= ?x ?y) (succ (count ?x ?z)) (count ?x ?z)))
(=> rule7 (ite (= ?x ?y) (succ (count ?x ?z)) (count ?x ?z)) (count ?x (cons ?y ?z)))
(prove (forall ((l Lst)(n Nat)) (= (plus (succ zero) (count n l)) (count n (cons n l)))))
