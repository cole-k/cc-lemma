(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun drop (Nat Lst) Lst)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x0 ?__y1) (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)))
(=> rule1 (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)) (leq ?__x0 ?__y1))
(=> rule2 (drop ?x nil) nil)
(=> rule3 (drop zero ?x2) ?x2)
(=> rule4 (drop (succ ?x) (cons ?y ?z)) (drop ?x ?z))
(prove (forall ((y Nat)(z Lst)(v Nat)(w Nat)(x Nat)) (= (drop (succ v) (drop (succ w) (cons x (cons y z)))) (drop (succ v) (drop w (cons x z))))))
