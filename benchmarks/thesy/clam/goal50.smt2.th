(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun less (Nat Nat) Bool)
(declare-fun count (Nat Lst) Nat)
(declare-fun insort (Nat Lst) Lst)
(declare-fun sort (Lst) Lst)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x0 ?__y1) (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)))
(=> rule1 (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)) (leq ?__x0 ?__y1))
(=> rule2 (less ?x zero) false)
(=> rule3 (less zero (succ ?x)) true)
(=> rule4 (less (succ ?x) (succ ?y)) (less ?x ?y))
(=> rule5 (less ?x ?y) (less (succ ?x) (succ ?y)))
(=> rule6 (count ?x nil) zero)
(=> rule7 (count ?x (cons ?y ?z)) (ite (= ?x ?y) (succ (count ?x ?z)) (count ?x ?z)))
(=> rule8 (ite (= ?x ?y) (succ (count ?x ?z)) (count ?x ?z)) (count ?x (cons ?y ?z)))
(=> rule9 (insort ?i nil) (cons ?i nil))
(=> rule10 (cons ?i nil) (insort ?i nil))
(=> rule11 (insort ?i (cons ?x ?y2)) (ite (less ?i ?x) (cons ?i (cons ?x ?y2)) (cons ?x (insort ?i ?y2))))
(=> rule12 (ite (less ?i ?x) (cons ?i (cons ?x ?y2)) (cons ?x (insort ?i ?y2))) (insort ?i (cons ?x ?y2)))
(=> rule13 (sort nil) nil)
(=> rule14 nil (sort nil))
(=> rule15 (sort (cons ?x ?y3)) (insort ?x (sort ?y3)))
(=> rule16 (insort ?x (sort ?y3)) (sort (cons ?x ?y3)))
(prove (forall ((x Nat)(y4 Lst)) (= (count x (sort y4)) (count x y4))))
