(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(datatype Tree () ((node Nat Tree Tree Tree) (leaf Tree)))
(declare-fun append (Lst Lst) Lst)
(declare-fun rev (Lst) Lst)
(declare-fun qreva (Lst Lst) Lst)
(declare-fun revflat (Tree) Lst)
(declare-fun qrevaflat (Tree Lst) Lst)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x0 ?__y1) (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)))
(=> rule1 (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)) (leq ?__x0 ?__y1))
(=> rule2 (qrevaflat leaf ?x) ?x)
(=> rule3 (qrevaflat (node ?d ?l ?r) ?x) (qrevaflat ?l (cons ?d (qrevaflat ?r ?x))))
(=> rule4 (qrevaflat ?l (cons ?d (qrevaflat ?r ?x))) (qrevaflat (node ?d ?l ?r) ?x))
(=> rule5 (append nil ?x) ?x)
(=> rule6 (append (cons ?x2 ?y) ?z) (cons ?x2 (append ?y ?z)))
(=> rule7 (cons ?x2 (append ?y ?z)) (append (cons ?x2 ?y) ?z))
(=> rule8 (rev nil) nil)
(=> rule9 nil (rev nil))
(=> rule10 (rev (cons ?x3 ?y)) (append (rev ?y) (cons ?x3 nil)))
(=> rule11 (append (rev ?y) (cons ?x3 nil)) (rev (cons ?x3 ?y)))
(=> rule12 (qreva nil ?x) ?x)
(=> rule13 (qreva (cons ?z4 ?x) ?y) (qreva ?x (cons ?z4 ?y)))
(=> rule14 (qreva ?x (cons ?z4 ?y)) (qreva (cons ?z4 ?x) ?y))
(=> rule15 (revflat leaf) nil)
(=> rule16 nil (revflat leaf))
(=> rule17 (revflat (node ?d ?l ?r)) (append (revflat ?l) (cons ?d (revflat ?r))))
(=> rule18 (append (revflat ?l) (cons ?d (revflat ?r))) (revflat (node ?d ?l ?r)))
(prove (forall ((x5 Tree)(y Lst)) (= (append (revflat x5) y) (qrevaflat x5 y))))
