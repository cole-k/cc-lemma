(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun append (Lst Lst) Lst)
(declare-fun rev (Lst) Lst)
(declare-fun qreva (Lst Lst) Lst)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x0 ?__y1) (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)))
(=> rule1 (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)) (leq ?__x0 ?__y1))
(=> rule2 (append nil ?x) ?x)
(=> rule3 (append (cons ?x2 ?y) ?z) (cons ?x2 (append ?y ?z)))
(=> rule4 (cons ?x2 (append ?y ?z)) (append (cons ?x2 ?y) ?z))
(=> rule5 (rev nil) nil)
(=> rule6 nil (rev nil))
(=> rule7 (rev (cons ?x3 ?y)) (append (rev ?y) (cons ?x3 nil)))
(=> rule8 (append (rev ?y) (cons ?x3 nil)) (rev (cons ?x3 ?y)))
(=> rule9 (qreva nil ?x) ?x)
(=> rule10 (qreva (cons ?z4 ?x) ?y) (qreva ?x (cons ?z4 ?y)))
(=> rule11 (qreva ?x (cons ?z4 ?y)) (qreva (cons ?z4 ?x) ?y))
(prove (forall ((x Lst)) (= (rev (qreva x nil)) x)))
