(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun append (Lst Lst) Lst)
(declare-fun len (Lst) Nat)
(declare-fun rotate (Nat Lst) Lst)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x0 ?__y1) (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)))
(=> rule1 (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)) (leq ?__x0 ?__y1))
(=> rule2 (append nil ?x) ?x)
(=> rule3 (append (cons ?x2 ?y) ?z) (cons ?x2 (append ?y ?z)))
(=> rule4 (cons ?x2 (append ?y ?z)) (append (cons ?x2 ?y) ?z))
(=> rule5 (len nil) zero)
(=> rule6 zero (len nil))
(=> rule7 (len (cons ?x3 ?y)) (succ (len ?y)))
(=> rule8 (rotate zero ?x) ?x)
(=> rule9 (rotate (succ ?n) nil) nil)
(=> rule10 (rotate (succ ?n) (cons ?y4 ?x)) (rotate ?n (append ?x (cons ?y4 nil))))
(=> rule11 (rotate ?n (append ?x (cons ?y4 nil))) (rotate (succ ?n) (cons ?y4 ?x)))
(prove (forall ((x Lst)) (= (rotate (len x) x) x)))
