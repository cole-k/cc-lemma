(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun double (Nat) Nat)
(declare-fun append (Lst Lst) Lst)
(declare-fun len (Lst) Nat)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x0 ?__y1) (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)))
(=> rule1 (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)) (leq ?__x0 ?__y1))
(=> rule2 (double zero) zero)
(=> rule3 zero (double zero))
(=> rule4 (double (succ ?n)) (succ (succ (double ?n))))
(=> rule5 (succ (succ (double ?n))) (double (succ ?n)))
(=> rule6 (append nil ?x) ?x)
(=> rule7 (append (cons ?x2 ?y) ?z) (cons ?x2 (append ?y ?z)))
(=> rule8 (cons ?x2 (append ?y ?z)) (append (cons ?x2 ?y) ?z))
(=> rule9 (len nil) zero)
(=> rule10 zero (len nil))
(=> rule11 (len (cons ?x3 ?y)) (succ (len ?y)))
(prove (forall ((x Lst)) (= (len (append x x)) (double (len x)))))
