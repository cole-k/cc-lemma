(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun append (Lst Lst) Lst)
(declare-fun mem (Nat Lst) Bool)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x0 ?__y1) (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)))
(=> rule1 (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)) (leq ?__x0 ?__y1))
(=> rule2 (append nil ?x) ?x)
(=> rule3 (append (cons ?x2 ?y) ?z) (cons ?x2 (append ?y ?z)))
(=> rule4 (cons ?x2 (append ?y ?z)) (append (cons ?x2 ?y) ?z))
(=> rule5 (mem ?x3 nil) false)
(=> rule6 (mem ?x4 (cons ?y5 ?z)) (or (= ?x4 ?y5) (mem ?x4 ?z)))
(=> rule7 (or (= ?x4 ?y5) (mem ?x4 ?z)) (mem ?x4 (cons ?y5 ?z)))
(prove (forall ((y Lst)(z Lst)(x6 Nat)) (=> (or (mem x6 y) (mem x6 z)) (mem x6 (append y z)))))
