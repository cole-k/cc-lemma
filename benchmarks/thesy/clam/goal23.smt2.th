(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun half (Nat) Nat)
(declare-fun append (Lst Lst) Lst)
(declare-fun len (Lst) Nat)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x0 ?__y1) (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)))
(=> rule1 (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)) (leq ?__x0 ?__y1))
(=> rule2 (half zero) zero)
(=> rule3 zero (half zero))
(=> rule4 (half (succ zero)) zero)
(=> rule5 zero (half (succ zero)))
(=> rule6 (half (succ (succ ?n))) (succ (half ?n)))
(=> rule7 (succ (half ?n)) (half (succ (succ ?n))))
(=> rule8 (append nil ?x) ?x)
(=> rule9 (append (cons ?x2 ?y) ?z) (cons ?x2 (append ?y ?z)))
(=> rule10 (cons ?x2 (append ?y ?z)) (append (cons ?x2 ?y) ?z))
(=> rule11 (len nil) zero)
(=> rule12 zero (len nil))
(=> rule13 (len (cons ?x3 ?y)) (succ (len ?y)))
(prove (forall ((x Lst)(y Lst)) (= (half (len (append x y))) (half (len (append y x))))))
