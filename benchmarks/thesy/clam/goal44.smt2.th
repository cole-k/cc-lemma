(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun mem (Nat Lst) Bool)
(declare-fun lst-mem (Nat Lst) Bool)
(declare-fun lst-intersection (Lst Lst) Lst)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x0 ?__y1) (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)))
(=> rule1 (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)) (leq ?__x0 ?__y1))
(=> rule2 (mem ?x nil) false)
(=> rule3 (mem ?x (cons ?y ?z)) (or (= ?x ?y) (mem ?x ?z)))
(=> rule4 (or (= ?x ?y) (mem ?x ?z)) (mem ?x (cons ?y ?z)))
(=> rule5 (lst-mem ?n ?x2) (mem ?n ?x2))
(=> rule6 (mem ?n ?x2) (lst-mem ?n ?x2))
(=> rule7 (lst-intersection nil ?x3) nil)
(=> rule8 (lst-intersection (cons ?n ?x4) ?y5) (ite (lst-mem ?n ?y5) (cons ?n (lst-intersection ?x4 ?y5)) (lst-intersection ?x4 ?y5)))
(=> rule9 (ite (lst-mem ?n ?y5) (cons ?n (lst-intersection ?x4 ?y5)) (lst-intersection ?x4 ?y5)) (lst-intersection (cons ?n ?x4) ?y5))
(prove (forall ((z Lst)(x Nat)(y6 Lst)) (=> (and (lst-mem x y6) (lst-mem x z)) (lst-mem x (lst-intersection y6 z)))))
