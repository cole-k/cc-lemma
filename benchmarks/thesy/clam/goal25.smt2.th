(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun plus (Nat Nat) Nat)
(declare-fun even (Nat) Bool)
(declare-fun append (Lst Lst) Lst)
(declare-fun len (Lst) Nat)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x0 ?__y1) (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)))
(=> rule1 (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)) (leq ?__x0 ?__y1))
(=> rule2 (plus zero ?n) ?n)
(=> rule3 (plus (succ ?n) ?m) (succ (plus ?n ?m)))
(=> rule4 (succ (plus ?n ?m)) (plus (succ ?n) ?m))
(=> rule5 (even zero) true)
(=> rule6 true (even zero))
(=> rule7 (even (succ ?n)) (not (even ?n)))
(=> rule8 (not (even ?n)) (even (succ ?n)))
(=> rule9 (append nil ?x) ?x)
(=> rule10 (append (cons ?x2 ?y) ?z) (cons ?x2 (append ?y ?z)))
(=> rule11 (cons ?x2 (append ?y ?z)) (append (cons ?x2 ?y) ?z))
(=> rule12 (len nil) zero)
(=> rule13 zero (len nil))
(=> rule14 (len (cons ?x3 ?y)) (succ (len ?y)))
(prove (forall ((y Lst)(x Lst)) (= (even (len (append x y))) (even (plus (len x) (len y))))))
