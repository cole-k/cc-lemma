(datatype Nat () ((succ Nat Nat) (zero Nat)))
(datatype Lst () ((cons Nat Lst Lst) (nil Lst)))
(declare-fun less (Nat Nat) Bool)
(declare-fun insort (Nat Lst) Lst)
(declare-fun sorted (Lst) Bool)
(declare-fun sort (Lst) Lst)
(declare-fun leq (Nat Nat) Bool)
(=> rule0 (leq ?__x0 ?__y1) (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)))
(=> rule1 (or (= ?__x0 ?__y1) (less ?__x0 ?__y1)) (leq ?__x0 ?__y1))
(=> rule2 (less ?x zero) false)
(=> rule3 (less zero (succ ?x)) true)
(=> rule4 (less (succ ?x) (succ ?y)) (less ?x ?y))
(=> rule5 (less ?x ?y) (less (succ ?x) (succ ?y)))
(=> rule6 (insort ?i nil) (cons ?i nil))
(=> rule7 (cons ?i nil) (insort ?i nil))
(=> rule8 (insort ?i (cons ?x ?y2)) (ite (less ?i ?x) (cons ?i (cons ?x ?y2)) (cons ?x (insort ?i ?y2))))
(=> rule9 (ite (less ?i ?x) (cons ?i (cons ?x ?y2)) (cons ?x (insort ?i ?y2))) (insort ?i (cons ?x ?y2)))
(=> rule10 (sorted nil) true)
(=> rule11 true (sorted nil))
(=> rule12 (sorted (cons ?x nil)) true)
(=> rule13 (sorted (cons ?x (cons ?z ?y3))) (and (sorted (cons ?z ?y3)) (or (= ?x ?z) (less ?x ?z))))
(=> rule14 (and (sorted (cons ?z ?y3)) (or (= ?x ?z) (less ?x ?z))) (sorted (cons ?x (cons ?z ?y3))))
(=> rule15 (sort nil) nil)
(=> rule16 nil (sort nil))
(=> rule17 (sort (cons ?x ?y4)) (insort ?x (sort ?y4)))
(=> rule18 (insort ?x (sort ?y4)) (sort (cons ?x ?y4)))
(prove (forall ((x5 Lst)) (= (sorted (sort x5)) true)))
