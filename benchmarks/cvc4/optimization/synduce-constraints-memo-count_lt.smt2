  (declare-datatypes () ((MyBool (MyTrue) (MyFalse))))
  (declare-datatypes () ((Nat (Zero) (Succ (proj_Succ_0 Nat)))))
  (declare-datatypes () ((Tree (Leaf (proj_Leaf_0 Nat)) (Node (proj_Node_0 Nat) (proj_Node_1 Tree) (proj_Node_2 Tree)))))
  (declare-datatypes () ((TreeMemo (Mleaf (proj_Mleaf_0 Nat) (proj_Mleaf_1 Nat)) (Mnode (proj_Mnode_0 Nat) (proj_Mnode_1 Nat) (proj_Mnode_2 TreeMemo) (proj_Mnode_3 TreeMemo)))))
  (declare-fun tf0 (TreeMemo) Nat)
  (declare-fun memo (TreeMemo) Nat)
  (declare-fun myand (MyBool MyBool) MyBool)
  (declare-fun geq (Nat Nat) MyBool)
  (declare-fun lq (Nat Nat) MyBool)
  (declare-fun nateq (Nat Nat) MyBool)
  (declare-fun ite3 (MyBool MyBool MyBool) MyBool)
  (declare-fun plus (Nat Nat) Nat)
  (declare-fun ite4 (MyBool Nat Nat) Nat)
  (declare-fun tf2 (TreeMemo) MyBool)
  (declare-fun tf1 (TreeMemo) MyBool)
  (declare-fun ismemo (TreeMemo) MyBool)
  (declare-fun tf4 (TreeMemo) Tree)
  (declare-fun tf3 (TreeMemo) Tree)
  (declare-fun repr (TreeMemo) Tree)
  (declare-fun tf6 (Tree) Nat)
  (declare-fun tf5 (Tree) Nat)
  (declare-fun spec (Tree) Nat)
  (declare-fun ite5 (MyBool TreeMemo TreeMemo) TreeMemo)
  (declare-fun tf8 (TreeMemo TreeMemo) TreeMemo)
  (declare-fun tf7 (TreeMemo) TreeMemo)
  (declare-fun target (TreeMemo) TreeMemo)
  (declare-fun main (TreeMemo) Nat)
  (declare-fun mainNew (TreeMemo) Nat)
  (assert (forall ((tv2 Nat) (tv1 Nat)) (= (tf0 (Mleaf tv1 tv2)) tv1)))
  (assert (forall ((tv5 TreeMemo) (tv4 Nat) (tv6 TreeMemo) (tv3 Nat)) (= (tf0 (Mnode tv3 tv4 tv5 tv6)) tv3)))
  (assert (forall ((tv0 TreeMemo)) (= (memo tv0) (tf0 tv0))))
  (assert (forall ((x MyBool)) (= (myand MyFalse x) MyFalse)))
  (assert (forall ((true MyBool)) (= (myand true MyFalse) MyFalse)))
  (assert (= (myand MyTrue MyTrue) MyTrue))
  (assert (= (geq Zero Zero) MyTrue))
  (assert (forall ((x Nat)) (= (geq Zero (Succ x)) MyFalse)))
  (assert (forall ((x Nat)) (= (geq (Succ x) Zero) MyTrue)))
  (assert (forall ((y Nat) (x Nat)) (= (geq (Succ x) (Succ y)) (geq x y))))
  (assert (= (lq Zero Zero) MyFalse))
  (assert (forall ((x Nat)) (= (lq Zero (Succ x)) MyTrue)))
  (assert (forall ((x Nat)) (= (lq (Succ x) Zero) MyFalse)))
  (assert (forall ((y Nat) (x Nat)) (= (lq (Succ x) (Succ y)) (lq x y))))
  (assert (= (nateq Zero Zero) MyTrue))
  (assert (forall ((x Nat)) (= (nateq Zero (Succ x)) MyFalse)))
  (assert (forall ((x Nat)) (= (nateq (Succ x) Zero) MyFalse)))
  (assert (forall ((y Nat) (x Nat)) (= (nateq (Succ x) (Succ y)) (nateq x y))))
  (assert (forall ((y MyBool) (x MyBool)) (= (ite3 MyTrue x y) x)))
  (assert (forall ((y MyBool) (x MyBool)) (= (ite3 MyFalse x y) y)))
  (assert (forall ((x Nat)) (= (plus Zero x) x)))
  (assert (forall ((y Nat) (x Nat)) (= (plus (Succ x) y) (Succ (plus x y)))))
  (assert (forall ((y Nat) (x Nat)) (= (ite4 MyTrue x y) x)))
  (assert (forall ((y Nat) (x Nat)) (= (ite4 MyFalse x y) y)))
  (assert (forall ((tv11 Nat) (tv10 Nat)) (= (tf2 (Mleaf tv10 tv11)) (myand (geq tv10 Zero) (ite3 (lq tv11 (Succ (Succ Zero))) (nateq tv10 (Succ Zero)) (nateq tv10 Zero))))))
  (assert (forall ((tv15 TreeMemo) (tv13 Nat) (tv14 TreeMemo) (tv12 Nat)) (= (tf2 (Mnode tv12 tv13 tv14 tv15)) (myand (myand (geq tv12 Zero) (nateq tv12 (plus (ite4 (lq tv13 (Succ (Succ Zero))) (Succ Zero) Zero) (plus (memo tv14) (memo tv15))))) (myand (tf1 tv14) (tf1 tv15))))))
  (assert (forall ((tv8 TreeMemo)) (= (tf1 tv8) (tf2 tv8))))
  (assert (forall ((tv7 TreeMemo)) (= (ismemo tv7) (tf1 tv7))))
  (assert (forall ((tv20 Nat) (tv19 Nat)) (= (tf4 (Mleaf tv19 tv20)) (Leaf tv20))))
  (assert (forall ((tv24 TreeMemo) (tv23 TreeMemo) (tv22 Nat) (tv21 Nat)) (= (tf4 (Mnode tv21 tv22 tv23 tv24)) (Node tv22 (tf3 tv23) (tf3 tv24)))))
  (assert (forall ((tv17 TreeMemo)) (= (tf3 tv17) (tf4 tv17))))
  (assert (forall ((tv16 TreeMemo)) (= (repr tv16) (tf3 tv16))))
  (assert (forall ((tv28 Nat)) (= (tf6 (Leaf tv28)) (ite4 (lq tv28 (Succ (Succ Zero))) (Succ Zero) Zero))))
  (assert (forall ((tv31 Tree) (tv30 Tree) (tv29 Nat)) (= (tf6 (Node tv29 tv30 tv31)) (ite4 (lq tv29 (Succ (Succ Zero))) (plus (Succ Zero) (plus (tf5 tv30) (tf5 tv31))) (plus (tf5 tv30) (tf5 tv31))))))
  (assert (forall ((tv26 Tree)) (= (tf5 tv26) (tf6 tv26))))
  (assert (forall ((tv25 Tree)) (= (spec tv25) (tf5 tv25))))
  (assert (forall ((y TreeMemo) (x TreeMemo)) (= (ite5 MyTrue x y) x)))
  (assert (forall ((y TreeMemo) (x TreeMemo)) (= (ite5 MyFalse x y) y)))
  (assert (forall ((tv35 Nat) (tv36 Nat) (tv34 TreeMemo)) (= (tf8 tv34 (Mleaf tv35 tv36)) (ite5 (lq tv36 (Succ (Succ Zero))) tv34 tv34))))
  (assert (forall ((tv40 TreeMemo) (tv39 TreeMemo) (tv38 Nat) (tv37 Nat) (tv34 TreeMemo)) (= (tf8 tv34 (Mnode tv37 tv38 tv39 tv40)) (ite5 (lq tv38 (Succ (Succ Zero))) tv34 tv34))))
  (assert (forall ((tv33 TreeMemo)) (= (tf7 tv33) (tf8 tv33 tv33))))
  (assert (forall ((tv32 TreeMemo)) (= (target tv32) (tf7 tv32))))
  (assert (forall ((tv41 TreeMemo)) (= (main tv41) (ite4 (ismemo tv41) (spec (repr (target tv41))) Zero))))
  (assert (forall ((tv42 TreeMemo)) (= (mainNew tv42) (ite4 (ismemo tv42) (memo tv42) Zero))))
  (assert (not (forall ((inp0 TreeMemo)) (= (main inp0) (mainNew inp0)))))
  (check-sat)
