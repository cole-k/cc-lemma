  (declare-datatypes () ((MyBool (MyTrue) (MyFalse))))
  (declare-datatypes () ((Nat (Zero) (Succ (proj_Succ_0 Nat)))))
  (declare-datatypes () ((Unit (Null))))
  (declare-datatypes () ((List (Cons (proj_Cons_0 Nat) (proj_Cons_1 List)) (Nil (proj_Nil_0 Unit)))))
  (declare-fun tf1 (List List) List)
  (declare-fun tf0 (List) List)
  (declare-fun tf2 (List) Nat)
  (declare-fun singlepass (List) Nat)
  (declare-fun lq (Nat Nat) MyBool)
  (declare-fun ite1 (MyBool Nat Nat) Nat)
  (declare-fun max (Nat Nat) Nat)
  (declare-fun plus (Nat Nat) Nat)
  (declare-fun tf4 (Nat Nat List) Nat)
  (declare-fun tf3 (Nat Nat List) Nat)
  (declare-fun mis (List) Nat)
  (declare-fun main (List) Nat)
  (declare-datatypes () ((Tuple2 (MakeTuple2 (proj_MakeTuple2_0 Nat) (proj_MakeTuple2_1 Nat)))))
  (declare-fun fst2 (Tuple2) Nat)
  (declare-fun snd2 (Tuple2) Nat)
  (declare-fun tf6 (List) Tuple2)
  (declare-fun tf5 (List) Tuple2)
  (declare-fun tf7 (List) Nat)
  (declare-fun singlepassNew (List) Nat)
  (declare-fun mainNew (List) Nat)
  (assert (forall ((tv5 Unit) (tv4 List)) (= (tf1 tv4 (Nil tv5)) tv4)))
  (assert (forall ((tv7 List) (tv6 Nat) (tv4 List)) (= (tf1 tv4 (Cons tv6 tv7)) (Cons tv6 (tf0 tv7)))))
  (assert (forall ((tv2 List)) (= (tf0 tv2) (tf1 tv2 tv2))))
  (assert (forall ((tv9 List)) (= (tf2 tv9) (mis (tf0 tv9)))))
  (assert (forall ((tv1 List)) (= (singlepass tv1) (tf2 tv1))))
  (assert (= (lq Zero Zero) MyFalse))
  (assert (forall ((x Nat)) (= (lq Zero (Succ x)) MyTrue)))
  (assert (forall ((x Nat)) (= (lq (Succ x) Zero) MyFalse)))
  (assert (forall ((y Nat) (x Nat)) (= (lq (Succ x) (Succ y)) (lq x y))))
  (assert (forall ((y Nat) (x Nat)) (= (ite1 MyTrue x y) x)))
  (assert (forall ((y Nat) (x Nat)) (= (ite1 MyFalse x y) y)))
  (assert (forall ((tv11 Nat) (tv10 Nat)) (= (max tv10 tv11) (ite1 (lq tv10 tv11) tv11 tv10))))
  (assert (forall ((x Nat)) (= (plus Zero x) x)))
  (assert (forall ((y Nat) (x Nat)) (= (plus (Succ x) y) (Succ (plus x y)))))
  (assert (forall ((tv19 Unit) (tv18 Nat) (tv17 Nat)) (= (tf4 tv17 tv18 (Nil tv19)) (max tv18 tv17))))
  (assert (forall ((tv21 List) (tv20 Nat) (tv18 Nat) (tv17 Nat)) (= (tf4 tv17 tv18 (Cons tv20 tv21)) (tf3 (plus tv20 tv17) (max tv18 tv17) tv21))))
  (assert (forall ((tv15 List) (tv14 Nat) (tv13 Nat)) (= (tf3 tv13 tv14 tv15) (tf4 tv14 tv13 tv15))))
  (assert (forall ((tv12 List)) (= (mis tv12) (tf3 Zero Zero tv12))))
  (assert (forall ((tv22 List)) (= (main tv22) (singlepass tv22))))
  (assert (forall ((x1 Nat) (x0 Nat)) (= (fst2 (MakeTuple2 x0 x1)) x0)))
  (assert (forall ((x1 Nat) (x0 Nat)) (= (snd2 (MakeTuple2 x0 x1)) x1)))
  (assert (forall ((tv27 Unit)) (= (tf6 (Nil tv27)) (MakeTuple2 Zero Zero))))
  (assert (forall ((tv29 List) (tv28 Nat)) (= (tf6 (Cons tv28 tv29)) (MakeTuple2 (ite1 (lq (fst2 (tf5 tv29)) (plus tv28 (snd2 (tf5 tv29)))) (plus tv28 (snd2 (tf5 tv29))) (fst2 (tf5 tv29))) (fst2 (tf5 tv29))))))
  (assert (forall ((tv25 List)) (= (tf5 tv25) (tf6 tv25))))
  (assert (forall ((tv30 List)) (= (tf7 tv30) (fst2 (tf5 tv30)))))
  (assert (forall ((tv24 List)) (= (singlepassNew tv24) (tf7 tv24))))
  (assert (forall ((tv31 List)) (= (mainNew tv31) (singlepassNew tv31))))
  (assert (not (forall ((inp0 List)) (= (main inp0) (mainNew inp0)))))
  (check-sat)
