  (declare-datatypes () ((MyBool (MyTrue) (MyFalse))))
  (declare-datatypes () ((Unit (Null))))
  (declare-datatypes () ((Nat (Zero) (Succ (proj_Succ_0 Nat)))))
  (declare-datatypes () ((UList (Unil (proj_Unil_0 Unit)) (Uelt (proj_Uelt_0 Nat)) (Usplit (proj_Usplit_0 UList) (proj_Usplit_1 Nat) (proj_Usplit_2 Nat) (proj_Usplit_3 UList)))))
  (declare-datatypes () ((List (Nil (proj_Nil_0 Unit)) (Cons (proj_Cons_0 Nat) (proj_Cons_1 List)))))
  (declare-fun tf1 (List UList) List)
  (declare-fun tf0 (List UList) List)
  (declare-fun repr (UList) List)
  (declare-fun gq (Nat Nat) MyBool)
  (declare-fun myand (MyBool MyBool) MyBool)
  (declare-fun tf3 (Nat List) MyBool)
  (declare-fun tf2 (Nat List) MyBool)
  (declare-fun lq (Nat Nat) MyBool)
  (declare-fun ite2 (MyBool MyBool MyBool) MyBool)
  (declare-fun tf5 (Nat List) MyBool)
  (declare-fun tf4 (Nat List) MyBool)
  (declare-fun tf7 (List) MyBool)
  (declare-fun tf6 (List) MyBool)
  (declare-fun isunimodal (List) MyBool)
  (declare-fun ite3 (MyBool Nat Nat) Nat)
  (declare-fun max (Nat Nat) Nat)
  (declare-fun tf9 (List) Nat)
  (declare-fun tf8 (List) Nat)
  (declare-fun spec (List) Nat)
  (declare-fun ite4 (MyBool UList UList) UList)
  (declare-fun tf11 (UList) UList)
  (declare-fun tf10 (UList) UList)
  (declare-fun target (UList) UList)
  (declare-fun main (UList) Nat)
  (declare-fun tf13 (UList) Nat)
  (declare-fun tf12 (UList) Nat)
  (declare-fun targetNew (UList) Nat)
  (declare-fun mainNew (UList) Nat)
  (assert (forall ((tv5 Unit) (tv4 List)) (= (tf1 tv4 (Unil tv5)) tv4)))
  (assert (forall ((tv6 Nat) (tv4 List)) (= (tf1 tv4 (Uelt tv6)) (Cons tv6 tv4))))
  (assert (forall ((tv10 UList) (tv9 Nat) (tv8 Nat) (tv7 UList) (tv4 List)) (= (tf1 tv4 (Usplit tv7 tv8 tv9 tv10)) (tf0 (Cons tv8 (Cons tv9 (tf0 tv4 tv10))) tv7))))
  (assert (forall ((tv2 UList) (tv1 List)) (= (tf0 tv1 tv2) (tf1 tv1 tv2))))
  (assert (forall ((tv0 UList)) (= (repr tv0) (tf0 (Nil Null) tv0))))
  (assert (forall ((x Nat)) (= (gq Zero x) MyFalse)))
  (assert (forall ((x Nat)) (= (gq (Succ x) Zero) MyTrue)))
  (assert (forall ((y Nat) (x Nat)) (= (gq (Succ x) (Succ y)) (gq x y))))
  (assert (forall ((x MyBool)) (= (myand MyFalse x) MyFalse)))
  (assert (forall ((true MyBool)) (= (myand true MyFalse) MyFalse)))
  (assert (= (myand MyTrue MyTrue) MyTrue))
  (assert (forall ((tv16 Unit) (tv15 Nat)) (= (tf3 tv15 (Nil tv16)) (gq tv15 Zero))))
  (assert (forall ((tv18 List) (tv17 Nat) (tv15 Nat)) (= (tf3 tv15 (Cons tv17 tv18)) (myand (gq tv15 Zero) (myand (gq tv15 tv17) (tf2 tv17 tv18))))))
  (assert (forall ((tv13 List) (tv12 Nat)) (= (tf2 tv12 tv13) (tf3 tv12 tv13))))
  (assert (= (lq Zero Zero) MyFalse))
  (assert (forall ((x Nat)) (= (lq Zero (Succ x)) MyTrue)))
  (assert (forall ((x Nat)) (= (lq (Succ x) Zero) MyFalse)))
  (assert (forall ((y Nat) (x Nat)) (= (lq (Succ x) (Succ y)) (lq x y))))
  (assert (forall ((y MyBool) (x MyBool)) (= (ite2 MyTrue x y) x)))
  (assert (forall ((y MyBool) (x MyBool)) (= (ite2 MyFalse x y) y)))
  (assert (forall ((tv23 Unit) (tv22 Nat)) (= (tf5 tv22 (Nil tv23)) (gq tv22 Zero))))
  (assert (forall ((tv25 List) (tv24 Nat) (tv22 Nat)) (= (tf5 tv22 (Cons tv24 tv25)) (myand (gq tv22 Zero) (ite2 (lq tv22 tv24) (tf4 tv24 tv25) (tf2 tv24 tv25))))))
  (assert (forall ((tv20 List) (tv19 Nat)) (= (tf4 tv19 tv20) (tf5 tv19 tv20))))
  (assert (forall ((tv27 Unit)) (= (tf7 (Nil tv27)) MyTrue)))
  (assert (forall ((tv29 List) (tv28 Nat)) (= (tf7 (Cons tv28 tv29)) (tf4 tv28 tv29))))
  (assert (forall ((tv26 List)) (= (tf6 tv26) (tf7 tv26))))
  (assert (forall ((tv11 List)) (= (isunimodal tv11) (tf6 tv11))))
  (assert (forall ((y Nat) (x Nat)) (= (ite3 MyTrue x y) x)))
  (assert (forall ((y Nat) (x Nat)) (= (ite3 MyFalse x y) y)))
  (assert (forall ((tv31 Nat) (tv30 Nat)) (= (max tv30 tv31) (ite3 (lq tv30 tv31) tv31 tv30))))
  (assert (forall ((tv35 Unit)) (= (tf9 (Nil tv35)) Zero)))
  (assert (forall ((tv37 List) (tv36 Nat)) (= (tf9 (Cons tv36 tv37)) (max tv36 (tf8 tv37)))))
  (assert (forall ((tv33 List)) (= (tf8 tv33) (tf9 tv33))))
  (assert (forall ((tv32 List)) (= (spec tv32) (tf8 tv32))))
  (assert (forall ((y UList) (x UList)) (= (ite4 MyTrue x y) x)))
  (assert (forall ((y UList) (x UList)) (= (ite4 MyFalse x y) y)))
  (assert (forall ((tv41 Unit)) (= (tf11 (Unil tv41)) (Unil Null))))
  (assert (forall ((tv42 Nat)) (= (tf11 (Uelt tv42)) (Uelt tv42))))
  (assert (forall ((tv45 Nat) (tv46 UList) (tv44 Nat) (tv43 UList)) (= (tf11 (Usplit tv43 tv44 tv45 tv46)) (ite4 (gq tv44 tv45) (Usplit (tf10 tv43) tv44 tv45 tv46) (Usplit tv43 tv44 tv45 (tf10 tv46))))))
  (assert (forall ((tv39 UList)) (= (tf10 tv39) (tf11 tv39))))
  (assert (forall ((tv38 UList)) (= (target tv38) (tf10 tv38))))
  (assert (forall ((tv47 UList)) (= (main tv47) (ite3 (isunimodal (repr tv47)) (spec (repr (target tv47))) Zero))))
  (assert (forall ((tv51 Unit)) (= (tf13 (Unil tv51)) Zero)))
  (assert (forall ((tv52 Nat)) (= (tf13 (Uelt tv52)) tv52)))
  (assert (forall ((tv56 UList) (tv54 Nat) (tv55 Nat) (tv53 UList)) (= (tf13 (Usplit tv53 tv54 tv55 tv56)) (ite3 (gq tv54 tv55) (max tv54 (tf12 tv53)) (ite3 (lq (tf12 tv56) tv55) tv55 (tf12 tv56))))))
  (assert (forall ((tv49 UList)) (= (tf12 tv49) (tf13 tv49))))
  (assert (forall ((tv48 UList)) (= (targetNew tv48) (tf12 tv48))))
  (assert (forall ((tv57 UList)) (= (mainNew tv57) (ite3 (isunimodal (repr tv57)) (targetNew tv57) Zero))))
  (assert (not (forall ((inp0 UList)) (= (main inp0) (mainNew inp0)))))
  (check-sat)
