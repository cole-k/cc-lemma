  (declare-datatypes () ((MyBool (MyTrue) (MyFalse))))
  (declare-datatypes () ((Unit (Null))))
  (declare-datatypes () ((Nat (Zero) (Succ (proj_Succ_0 Nat)))))
  (declare-datatypes () ((List (Nil (proj_Nil_0 Unit)) (Cons (proj_Cons_0 Nat) (proj_Cons_1 List)))))
  (declare-datatypes () ((IndexedList (Inil (proj_Inil_0 Unit)) (Icons (proj_Icons_0 Nat) (proj_Icons_1 Nat) (proj_Icons_2 IndexedList)))))
  (declare-fun plus (Nat Nat) Nat)
  (declare-fun tf1 (List) Nat)
  (declare-fun tf0 (List) Nat)
  (declare-fun length (List) Nat)
  (declare-fun tf3 (List) IndexedList)
  (declare-fun tf2 (List) IndexedList)
  (declare-fun repr (List) IndexedList)
  (declare-fun gq (Nat Nat) MyBool)
  (declare-fun ite2 (MyBool Nat Nat) Nat)
  (declare-fun tf5 (IndexedList) Nat)
  (declare-fun tf4 (IndexedList) Nat)
  (declare-fun spec (IndexedList) Nat)
  (declare-fun main (List) Nat)
  (declare-fun lq (Nat Nat) MyBool)
  (declare-fun tf7 (List) Nat)
  (declare-fun tf6 (List) Nat)
  (declare-fun reprNew (List) Nat)
  (declare-fun mainNew (List) Nat)
  (assert (forall ((x Nat)) (= (plus Zero x) x)))
  (assert (forall ((y Nat) (x Nat)) (= (plus (Succ x) y) (Succ (plus x y)))))
  (assert (forall ((tv3 Unit)) (= (tf1 (Nil tv3)) Zero)))
  (assert (forall ((tv5 List) (tv4 Nat)) (= (tf1 (Cons tv4 tv5)) (plus (Succ Zero) (tf0 tv5)))))
  (assert (forall ((tv1 List)) (= (tf0 tv1) (tf1 tv1))))
  (assert (forall ((tv0 List)) (= (length tv0) (tf0 tv0))))
  (assert (forall ((tv9 Unit)) (= (tf3 (Nil tv9)) (Inil Null))))
  (assert (forall ((tv11 List) (tv10 Nat)) (= (tf3 (Cons tv10 tv11)) (Icons tv10 (length tv11) (tf2 tv11)))))
  (assert (forall ((tv7 List)) (= (tf2 tv7) (tf3 tv7))))
  (assert (forall ((tv6 List)) (= (repr tv6) (tf2 tv6))))
  (assert (forall ((x Nat)) (= (gq Zero x) MyFalse)))
  (assert (forall ((x Nat)) (= (gq (Succ x) Zero) MyTrue)))
  (assert (forall ((y Nat) (x Nat)) (= (gq (Succ x) (Succ y)) (gq x y))))
  (assert (forall ((y Nat) (x Nat)) (= (ite2 MyTrue x y) x)))
  (assert (forall ((y Nat) (x Nat)) (= (ite2 MyFalse x y) y)))
  (assert (forall ((tv15 Unit)) (= (tf5 (Inil tv15)) Zero)))
  (assert (forall ((tv18 IndexedList) (tv17 Nat) (tv16 Nat)) (= (tf5 (Icons tv16 tv17 tv18)) (ite2 (gq tv16 tv17) (plus tv16 (tf4 tv18)) (tf4 tv18)))))
  (assert (forall ((tv13 IndexedList)) (= (tf4 tv13) (tf5 tv13))))
  (assert (forall ((tv12 IndexedList)) (= (spec tv12) (tf4 tv12))))
  (assert (forall ((tv19 List)) (= (main tv19) (spec (repr tv19)))))
  (assert (= (lq Zero Zero) MyFalse))
  (assert (forall ((x Nat)) (= (lq Zero (Succ x)) MyTrue)))
  (assert (forall ((x Nat)) (= (lq (Succ x) Zero) MyFalse)))
  (assert (forall ((y Nat) (x Nat)) (= (lq (Succ x) (Succ y)) (lq x y))))
  (assert (forall ((tv23 Unit)) (= (tf7 (Nil tv23)) Zero)))
  (assert (forall ((tv25 List) (tv24 Nat)) (= (tf7 (Cons tv24 tv25)) (ite2 (lq (length tv25) tv24) (plus (tf6 tv25) tv24) (tf6 tv25)))))
  (assert (forall ((tv21 List)) (= (tf6 tv21) (tf7 tv21))))
  (assert (forall ((tv20 List)) (= (reprNew tv20) (tf6 tv20))))
  (assert (forall ((tv26 List)) (= (mainNew tv26) (reprNew tv26))))
  (assert (not (forall ((inp0 List)) (= (main inp0) (mainNew inp0)))))
  (check-sat)
