  (declare-datatypes () ((MyBool (MyTrue) (MyFalse))))
  (declare-datatypes () ((Nat (Zero) (Succ (proj_Succ_0 Nat)))))
  (declare-datatypes () ((List (Elt (proj_Elt_0 Nat)) (Cons (proj_Cons_0 Nat) (proj_Cons_1 List)))))
  (declare-datatypes () ((IdxList (Ielt (proj_Ielt_0 Nat)) (Icons (proj_Icons_0 Nat) (proj_Icons_1 Nat) (proj_Icons_2 IdxList)))))
  (declare-fun lq (Nat Nat) MyBool)
  (declare-fun ite2 (MyBool Nat Nat) Nat)
  (declare-fun max (Nat Nat) Nat)
  (declare-fun plus (Nat Nat) Nat)
  (declare-fun tf1 (List) Nat)
  (declare-fun tf0 (List) Nat)
  (declare-fun hsum (List) Nat)
  (declare-datatypes () ((Tuple3 (MakeTuple3 (proj_MakeTuple3_0 Nat) (proj_MakeTuple3_1 Nat) (proj_MakeTuple3_2 Nat)))))
  (declare-fun gq (Nat Nat) MyBool)
  (declare-fun ite3 (MyBool Tuple3) Tuple3)
  (declare-fun fst3 (Tuple3) Nat)
  (declare-fun snd3 (Tuple3) Nat)
  (declare-fun third3 (Tuple3) Nat)
  (declare-fun tf3 (List) Tuple3)
  (declare-fun tf2 (List) Tuple3)
  (declare-fun mss (List) Nat)
  (declare-fun spec (List) Nat)
  (declare-fun tf5 (IdxList) List)
  (declare-fun tf4 (IdxList) List)
  (declare-fun repr (IdxList) List)
  (declare-fun main (IdxList) Nat)
  (declare-datatypes () ((Tuple4 (MakeTuple4 (proj_MakeTuple4_0 Nat) (proj_MakeTuple4_1 Nat)))))
  (declare-fun myand (MyBool MyBool) MyBool)
  (declare-fun snd4 (Tuple4) Nat)
  (declare-fun fst4 (Tuple4) Nat)
  (declare-fun tf7 (IdxList) Tuple4)
  (declare-fun tf6 (IdxList) Tuple4)
  (declare-fun reprNew (IdxList) Tuple4)
  (declare-fun mainNew (IdxList) Nat)
  (assert (= (lq Zero Zero) MyFalse))
  (assert (forall ((x Nat)) (= (lq Zero (Succ x)) MyTrue)))
  (assert (forall ((x Nat)) (= (lq (Succ x) Zero) MyFalse)))
  (assert (forall ((y Nat) (x Nat)) (= (lq (Succ x) (Succ y)) (lq x y))))
  (assert (forall ((y Nat) (x Nat)) (= (ite2 MyTrue x y) x)))
  (assert (forall ((y Nat) (x Nat)) (= (ite2 MyFalse x y) y)))
  (assert (forall ((tv1 Nat) (tv0 Nat)) (= (max tv0 tv1) (ite2 (lq tv0 tv1) tv1 tv0))))
  (assert (forall ((x Nat)) (= (plus Zero x) x)))
  (assert (forall ((y Nat) (x Nat)) (= (plus (Succ x) y) (Succ (plus x y)))))
  (assert (forall ((tv5 Nat)) (= (tf1 (Elt tv5)) tv5)))
  (assert (forall ((tv7 List) (tv6 Nat)) (= (tf1 (Cons tv6 tv7)) (plus tv6 (tf0 tv7)))))
  (assert (forall ((tv3 List)) (= (tf0 tv3) (tf1 tv3))))
  (assert (forall ((tv2 List)) (= (hsum tv2) (tf0 tv2))))
  (assert (forall ((x Nat)) (= (gq Zero x) MyFalse)))
  (assert (forall ((x Nat)) (= (gq (Succ x) Zero) MyTrue)))
  (assert (forall ((y Nat) (x Nat)) (= (gq (Succ x) (Succ y)) (gq x y))))
  (assert (forall ((x Tuple3)) (= (ite3 MyTrue x) x)))
  (assert (forall ((x Tuple3)) (= (ite3 MyFalse x) (MakeTuple3 Zero Zero Zero))))
  (assert (forall ((x2 Nat) (x1 Nat) (x0 Nat)) (= (fst3 (MakeTuple3 x0 x1 x2)) x0)))
  (assert (forall ((x2 Nat) (x1 Nat) (x0 Nat)) (= (snd3 (MakeTuple3 x0 x1 x2)) x1)))
  (assert (forall ((x2 Nat) (x1 Nat) (x0 Nat)) (= (third3 (MakeTuple3 x0 x1 x2)) x2)))
  (assert (forall ((tv11 Nat)) (= (tf3 (Elt tv11)) (ite3 (gq tv11 Zero) (MakeTuple3 tv11 tv11 tv11)))))
  (assert (forall ((tv13 List) (tv12 Nat)) (= (tf3 (Cons tv12 tv13)) (MakeTuple3 (max (plus tv12 (hsum tv13)) (fst3 (tf2 tv13))) (max (plus tv12 (snd3 (tf2 tv13))) Zero) (max (max (plus tv12 (snd3 (tf2 tv13))) Zero) (third3 (tf2 tv13)))))))
  (assert (forall ((tv9 List)) (= (tf2 tv9) (tf3 tv9))))
  (assert (forall ((tv8 List)) (= (mss tv8) (third3 (tf2 tv8)))))
  (assert (forall ((tv14 List)) (= (spec tv14) (mss tv14))))
  (assert (forall ((tv18 Nat)) (= (tf5 (Ielt tv18)) (Elt tv18))))
  (assert (forall ((tv21 IdxList) (tv20 Nat) (tv19 Nat)) (= (tf5 (Icons tv19 tv20 tv21)) (Cons tv19 (tf4 tv21)))))
  (assert (forall ((tv16 IdxList)) (= (tf4 tv16) (tf5 tv16))))
  (assert (forall ((tv15 IdxList)) (= (repr tv15) (tf4 tv15))))
  (assert (forall ((tv22 IdxList)) (= (main tv22) (spec (repr tv22)))))
  (assert (forall ((x MyBool)) (= (myand MyFalse x) MyFalse)))
  (assert (forall ((true MyBool)) (= (myand true MyFalse) MyFalse)))
  (assert (= (myand MyTrue MyTrue) MyTrue))
  (assert (forall ((x1 Nat) (x0 Nat)) (= (snd4 (MakeTuple4 x0 x1)) x1)))
  (assert (forall ((x1 Nat) (x0 Nat)) (= (fst4 (MakeTuple4 x0 x1)) x0)))
  (assert (forall ((tv26 Nat)) (= (tf7 (Ielt tv26)) (MakeTuple4 (max tv26 Zero) tv26))))
  (assert (forall ((tv29 IdxList) (tv28 Nat) (tv27 Nat)) (= (tf7 (Icons tv27 tv28 tv29)) (MakeTuple4 (ite2 (myand (lq (plus tv27 (snd4 (tf6 tv29))) (fst4 (tf6 tv29))) (lq tv27 (fst4 (tf6 tv29)))) (fst4 (tf6 tv29)) (ite2 (lq (snd4 (tf6 tv29)) Zero) tv27 (plus tv27 (snd4 (tf6 tv29))))) (plus tv27 (max (snd4 (tf6 tv29)) Zero))))))
  (assert (forall ((tv24 IdxList)) (= (tf6 tv24) (tf7 tv24))))
  (assert (forall ((tv23 IdxList)) (= (reprNew tv23) (tf6 tv23))))
  (assert (forall ((tv30 IdxList)) (= (mainNew tv30) (fst4 (reprNew tv30)))))
  (assert (not (forall ((inp0 IdxList)) (= (main inp0) (mainNew inp0)))))
  (check-sat)
