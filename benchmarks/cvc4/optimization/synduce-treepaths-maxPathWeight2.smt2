  (declare-datatypes () ((MyBool (MyTrue) (MyFalse))))
  (declare-datatypes () ((Unit (Null))))
  (declare-datatypes () ((Nat (Zero) (Succ (proj_Succ_0 Nat)))))
  (declare-datatypes () ((BTree (Empty (proj_Empty_0 Unit)) (Node (proj_Node_0 Nat) (proj_Node_1 BTree) (proj_Node_2 BTree)))))
  (declare-datatypes () ((Zipper (Top (proj_Top_0 Unit)) (Left (proj_Left_0 Nat) (proj_Left_1 BTree) (proj_Left_2 Zipper)) (Right (proj_Right_0 Nat) (proj_Right_1 BTree) (proj_Right_2 Zipper)))))
  (declare-fun lq (Nat Nat) MyBool)
  (declare-fun ite2 (MyBool Nat Nat) Nat)
  (declare-fun max (Nat Nat) Nat)
  (declare-fun plus (Nat Nat) Nat)
  (declare-fun tf1 (BTree) Nat)
  (declare-fun tf0 (BTree) Nat)
  (declare-fun mpath (BTree) Nat)
  (declare-fun tf3 (Zipper) BTree)
  (declare-fun tf2 (Zipper) BTree)
  (declare-fun repr (Zipper) BTree)
  (declare-fun tf5 (BTree) BTree)
  (declare-fun tf4 (BTree) BTree)
  (declare-fun treerec (BTree) BTree)
  (declare-fun tf7 (Zipper) Zipper)
  (declare-fun tf6 (Zipper) Zipper)
  (declare-fun ziprec (Zipper) Zipper)
  (declare-fun main (Zipper) Nat)
  (declare-fun tf9 (BTree) Nat)
  (declare-fun tf8 (BTree) Nat)
  (declare-fun treerecNew (BTree) Nat)
  (declare-fun tf11 (Zipper) Nat)
  (declare-fun tf10 (Zipper) Nat)
  (declare-fun ziprecNew (Zipper) Nat)
  (declare-fun mainNew (Zipper) Nat)
  (assert (= (lq Zero Zero) MyFalse))
  (assert (forall ((x Nat)) (= (lq Zero (Succ x)) MyTrue)))
  (assert (forall ((x Nat)) (= (lq (Succ x) Zero) MyFalse)))
  (assert (forall ((y Nat) (x Nat)) (= (lq (Succ x) (Succ y)) (lq x y))))
  (assert (forall ((y Nat) (x Nat)) (= (ite2 MyTrue x y) x)))
  (assert (forall ((y Nat) (x Nat)) (= (ite2 MyFalse x y) y)))
  (assert (forall ((tv1 Nat) (tv0 Nat)) (= (max tv0 tv1) (ite2 (lq tv0 tv1) tv1 tv0))))
  (assert (forall ((x Nat)) (= (plus Zero x) x)))
  (assert (forall ((y Nat) (x Nat)) (= (plus (Succ x) y) (Succ (plus x y)))))
  (assert (forall ((tv5 Unit)) (= (tf1 (Empty tv5)) Zero)))
  (assert (forall ((tv8 BTree) (tv7 BTree) (tv6 Nat)) (= (tf1 (Node tv6 tv7 tv8)) (plus tv6 (max (tf0 tv7) (tf0 tv8))))))
  (assert (forall ((tv3 BTree)) (= (tf0 tv3) (tf1 tv3))))
  (assert (forall ((tv2 BTree)) (= (mpath tv2) (tf0 tv2))))
  (assert (forall ((tv12 Unit)) (= (tf3 (Top tv12)) (Empty Null))))
  (assert (forall ((tv15 Zipper) (tv14 BTree) (tv13 Nat)) (= (tf3 (Left tv13 tv14 tv15)) (Node tv13 tv14 (tf2 tv15)))))
  (assert (forall ((tv18 Zipper) (tv17 BTree) (tv16 Nat)) (= (tf3 (Right tv16 tv17 tv18)) (Node tv16 (tf2 tv18) tv17))))
  (assert (forall ((tv10 Zipper)) (= (tf2 tv10) (tf3 tv10))))
  (assert (forall ((tv9 Zipper)) (= (repr tv9) (tf2 tv9))))
  (assert (forall ((tv22 Unit)) (= (tf5 (Empty tv22)) (Empty Null))))
  (assert (forall ((tv25 BTree) (tv24 BTree) (tv23 Nat)) (= (tf5 (Node tv23 tv24 tv25)) (Node tv23 (tf4 tv24) (tf4 tv25)))))
  (assert (forall ((tv20 BTree)) (= (tf4 tv20) (tf5 tv20))))
  (assert (forall ((tv19 BTree)) (= (treerec tv19) (tf4 tv19))))
  (assert (forall ((tv29 Unit)) (= (tf7 (Top tv29)) (Top Null))))
  (assert (forall ((tv32 Zipper) (tv31 BTree) (tv30 Nat)) (= (tf7 (Left tv30 tv31 tv32)) (Left tv30 (treerec tv31) (tf6 tv32)))))
  (assert (forall ((tv35 Zipper) (tv34 BTree) (tv33 Nat)) (= (tf7 (Right tv33 tv34 tv35)) (Right tv33 (treerec tv34) (tf6 tv35)))))
  (assert (forall ((tv27 Zipper)) (= (tf6 tv27) (tf7 tv27))))
  (assert (forall ((tv26 Zipper)) (= (ziprec tv26) (tf6 tv26))))
  (assert (forall ((tv36 Zipper)) (= (main tv36) (mpath (repr (ziprec tv36))))))
  (assert (forall ((tv40 Unit)) (= (tf9 (Empty tv40)) Zero)))
  (assert (forall ((tv43 BTree) (tv42 BTree) (tv41 Nat)) (= (tf9 (Node tv41 tv42 tv43)) (plus tv41 (max (tf8 tv43) (tf8 tv42))))))
  (assert (forall ((tv38 BTree)) (= (tf8 tv38) (tf9 tv38))))
  (assert (forall ((tv37 BTree)) (= (treerecNew tv37) (tf8 tv37))))
  (assert (forall ((tv47 Unit)) (= (tf11 (Top tv47)) Zero)))
  (assert (forall ((tv50 Zipper) (tv49 BTree) (tv48 Nat)) (= (tf11 (Left tv48 tv49 tv50)) (plus tv48 (max (tf10 tv50) (treerecNew tv49))))))
  (assert (forall ((tv53 Zipper) (tv52 BTree) (tv51 Nat)) (= (tf11 (Right tv51 tv52 tv53)) (plus tv51 (max (tf10 tv53) (treerecNew tv52))))))
  (assert (forall ((tv45 Zipper)) (= (tf10 tv45) (tf11 tv45))))
  (assert (forall ((tv44 Zipper)) (= (ziprecNew tv44) (tf10 tv44))))
  (assert (forall ((tv54 Zipper)) (= (mainNew tv54) (ziprecNew tv54))))
  (assert (not (forall ((inp0 Zipper)) (= (main inp0) (mainNew inp0)))))
  (check-sat)
