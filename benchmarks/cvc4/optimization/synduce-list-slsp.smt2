  (declare-datatypes () ((MyBool (MyTrue) (MyFalse))))
  (declare-datatypes () ((Nat (Zero) (Succ (proj_Succ_0 Nat)))))
  (declare-datatypes () ((List (Elt (proj_Elt_0 Nat)) (Cons (proj_Cons_0 Nat) (proj_Cons_1 List)))))
  (declare-datatypes () ((CnList (Sglt (proj_Sglt_0 Nat)) (Cat (proj_Cat_0 CnList) (proj_Cat_1 Nat) (proj_Cat_2 CnList)))))
  (declare-fun gq (Nat Nat) MyBool)
  (declare-fun ite2 (MyBool Nat Nat) Nat)
  (declare-fun max (Nat Nat) Nat)
  (declare-fun tf1 (List List) List)
  (declare-fun tf0 (List List) List)
  (declare-fun catlist (List List) List)
  (declare-fun tf3 (CnList) List)
  (declare-fun tf2 (CnList) List)
  (declare-fun repr (CnList) List)
  (declare-datatypes () ((Tuple3 (MakeTuple3 (proj_MakeTuple3_0 Nat) (proj_MakeTuple3_1 MyBool)))))
  (declare-fun geq (Nat Nat) MyBool)
  (declare-fun myand (MyBool MyBool) MyBool)
  (declare-fun snd3 (Tuple3) MyBool)
  (declare-fun plus (Nat Nat) Nat)
  (declare-fun fst3 (Tuple3) Nat)
  (declare-fun tf5 (List) Tuple3)
  (declare-fun tf4 (List) Tuple3)
  (declare-fun spec (List) Nat)
  (declare-fun main (CnList) Nat)
  (declare-datatypes () ((Tuple4 (MakeTuple4 (proj_MakeTuple4_0 Nat) (proj_MakeTuple4_1 Nat) (proj_MakeTuple4_2 Nat) (proj_MakeTuple4_3 Nat)))))
  (declare-fun times (Nat Nat) Nat)
  (declare-fun myor (MyBool MyBool) MyBool)
  (declare-fun nateq (Nat Nat) MyBool)
  (declare-fun fourth4 (Tuple4) Nat)
  (declare-fun fst4 (Tuple4) Nat)
  (declare-fun third4 (Tuple4) Nat)
  (declare-fun lq (Nat Nat) MyBool)
  (declare-fun snd4 (Tuple4) Nat)
  (declare-fun tf7 (CnList) Tuple4)
  (declare-fun tf6 (CnList) Tuple4)
  (declare-fun reprNew (CnList) Tuple4)
  (declare-fun mainNew (CnList) Nat)
  (assert (forall ((x Nat)) (= (gq Zero x) MyFalse)))
  (assert (forall ((x Nat)) (= (gq (Succ x) Zero) MyTrue)))
  (assert (forall ((y Nat) (x Nat)) (= (gq (Succ x) (Succ y)) (gq x y))))
  (assert (forall ((y Nat) (x Nat)) (= (ite2 MyTrue x y) x)))
  (assert (forall ((y Nat) (x Nat)) (= (ite2 MyFalse x y) y)))
  (assert (forall ((tv1 Nat) (tv0 Nat)) (= (max tv0 tv1) (ite2 (gq tv0 tv1) tv0 tv1))))
  (assert (forall ((tv8 Nat) (tv7 List)) (= (tf1 tv7 (Elt tv8)) (Cons tv8 tv7))))
  (assert (forall ((tv10 List) (tv9 Nat) (tv7 List)) (= (tf1 tv7 (Cons tv9 tv10)) (Cons tv9 (tf0 tv10 tv7)))))
  (assert (forall ((tv5 List) (tv4 List)) (= (tf0 tv4 tv5) (tf1 tv5 tv4))))
  (assert (forall ((tv3 List) (tv2 List)) (= (catlist tv2 tv3) (tf0 tv2 tv3))))
  (assert (forall ((tv14 Nat)) (= (tf3 (Sglt tv14)) (Elt tv14))))
  (assert (forall ((tv16 Nat) (tv17 CnList) (tv15 CnList)) (= (tf3 (Cat tv15 tv16 tv17)) (catlist (tf2 tv15) (tf2 tv17)))))
  (assert (forall ((tv12 CnList)) (= (tf2 tv12) (tf3 tv12))))
  (assert (forall ((tv11 CnList)) (= (repr tv11) (tf2 tv11))))
  (assert (= (geq Zero Zero) MyTrue))
  (assert (forall ((x Nat)) (= (geq Zero (Succ x)) MyFalse)))
  (assert (forall ((x Nat)) (= (geq (Succ x) Zero) MyTrue)))
  (assert (forall ((y Nat) (x Nat)) (= (geq (Succ x) (Succ y)) (geq x y))))
  (assert (forall ((x MyBool)) (= (myand MyFalse x) MyFalse)))
  (assert (forall ((true MyBool)) (= (myand true MyFalse) MyFalse)))
  (assert (= (myand MyTrue MyTrue) MyTrue))
  (assert (forall ((x1 MyBool) (x0 Nat)) (= (snd3 (MakeTuple3 x0 x1)) x1)))
  (assert (forall ((x Nat)) (= (plus Zero x) x)))
  (assert (forall ((y Nat) (x Nat)) (= (plus (Succ x) y) (Succ (plus x y)))))
  (assert (forall ((x1 MyBool) (x0 Nat)) (= (fst3 (MakeTuple3 x0 x1)) x0)))
  (assert (forall ((tv21 Nat)) (= (tf5 (Elt tv21)) (MakeTuple3 (max Zero tv21) (geq tv21 Zero)))))
  (assert (forall ((tv23 List) (tv22 Nat)) (= (tf5 (Cons tv22 tv23)) (MakeTuple3 (ite2 (myand (snd3 (tf4 tv23)) (geq tv22 Zero)) (plus tv22 (fst3 (tf4 tv23))) (fst3 (tf4 tv23))) (myand (snd3 (tf4 tv23)) (geq tv22 Zero))))))
  (assert (forall ((tv19 List)) (= (tf4 tv19) (tf5 tv19))))
  (assert (forall ((tv18 List)) (= (spec tv18) (fst3 (tf4 tv18)))))
  (assert (forall ((tv24 CnList)) (= (main tv24) (spec (repr tv24)))))
  (assert (forall ((x Nat)) (= (times Zero x) Zero)))
  (assert (forall ((y Nat) (x Nat)) (= (times (Succ x) y) (plus (times x y) y))))
  (assert (forall ((x MyBool)) (= (myor MyTrue x) MyTrue)))
  (assert (forall ((false MyBool)) (= (myor false MyTrue) MyTrue)))
  (assert (= (myor MyFalse MyFalse) MyFalse))
  (assert (= (nateq Zero Zero) MyTrue))
  (assert (forall ((x Nat)) (= (nateq Zero (Succ x)) MyFalse)))
  (assert (forall ((x Nat)) (= (nateq (Succ x) Zero) MyFalse)))
  (assert (forall ((y Nat) (x Nat)) (= (nateq (Succ x) (Succ y)) (nateq x y))))
  (assert (forall ((x2 Nat) (x3 Nat) (x1 Nat) (x0 Nat)) (= (fourth4 (MakeTuple4 x0 x1 x2 x3)) x3)))
  (assert (forall ((x2 Nat) (x3 Nat) (x1 Nat) (x0 Nat)) (= (fst4 (MakeTuple4 x0 x1 x2 x3)) x0)))
  (assert (forall ((x2 Nat) (x3 Nat) (x1 Nat) (x0 Nat)) (= (third4 (MakeTuple4 x0 x1 x2 x3)) x2)))
  (assert (= (lq Zero Zero) MyFalse))
  (assert (forall ((x Nat)) (= (lq Zero (Succ x)) MyTrue)))
  (assert (forall ((x Nat)) (= (lq (Succ x) Zero) MyFalse)))
  (assert (forall ((y Nat) (x Nat)) (= (lq (Succ x) (Succ y)) (lq x y))))
  (assert (forall ((x2 Nat) (x3 Nat) (x1 Nat) (x0 Nat)) (= (snd4 (MakeTuple4 x0 x1 x2 x3)) x1)))
  (assert (forall ((tv28 Nat)) (= (tf7 (Sglt tv28)) (MakeTuple4 (max tv28 Zero) (times (Succ (Succ Zero)) (max tv28 Zero)) tv28 tv28))))
  (assert (forall ((tv31 CnList) (tv30 Nat) (tv29 CnList)) (= (tf7 (Cat tv29 tv30 tv31)) (MakeTuple4 (ite2 (myor (myand (nateq (fourth4 (tf6 tv31)) Zero) (nateq (fst4 (tf6 tv31)) (third4 (tf6 tv31)))) (lq (fst4 (tf6 tv31)) (snd4 (tf6 tv31)))) (plus (fst4 (tf6 tv31)) (fst4 (tf6 tv29))) (fst4 (tf6 tv31))) (ite2 (myor (myor (myand (lq (fst4 (tf6 tv31)) (snd4 (tf6 tv31))) (lq (fst4 (tf6 tv29)) (snd4 (tf6 tv29)))) (myand (nateq (fourth4 (tf6 tv31)) Zero) (nateq (fst4 (tf6 tv31)) (third4 (tf6 tv31))))) (myand (nateq (fourth4 (tf6 tv29)) Zero) (nateq (fst4 (tf6 tv29)) (third4 (tf6 tv29))))) (plus (snd4 (tf6 tv31)) (snd4 (tf6 tv29))) (ite2 (myor (myand (lq Zero (fourth4 (tf6 tv31))) (nateq (fst4 (tf6 tv31)) (snd4 (tf6 tv31)))) (lq (third4 (tf6 tv31)) (fst4 (tf6 tv31)))) (fst4 (tf6 tv31)) (plus (fst4 (tf6 tv31)) (fst4 (tf6 tv29))))) (plus (third4 (tf6 tv31)) (third4 (tf6 tv29))) (max (fourth4 (tf6 tv31)) (fourth4 (tf6 tv29)))))))
  (assert (forall ((tv26 CnList)) (= (tf6 tv26) (tf7 tv26))))
  (assert (forall ((tv25 CnList)) (= (reprNew tv25) (tf6 tv25))))
  (assert (forall ((tv32 CnList)) (= (mainNew tv32) (fst4 (reprNew tv32)))))
  (assert (not (forall ((inp0 CnList)) (= (main inp0) (mainNew inp0)))))
  (check-sat)
