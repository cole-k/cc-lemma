  (declare-datatypes () ((MyBool (MyTrue) (MyFalse))))
  (declare-datatypes () ((Unit (Null))))
  (declare-datatypes () ((Nat (Zero) (Succ (proj_Succ_0 Nat)))))
  (declare-datatypes () ((UList (Unil (proj_Unil_0 Unit)) (Uelt (proj_Uelt_0 Nat)) (Usplit (proj_Usplit_0 UList) (proj_Usplit_1 Nat) (proj_Usplit_2 Nat) (proj_Usplit_3 UList)))))
  (declare-datatypes () ((List (Nil (proj_Nil_0 Unit)) (Cons (proj_Cons_0 Nat) (proj_Cons_1 List)))))
  (declare-fun tf1 (List UList) List)
  (declare-fun tf0 (List UList) List)
  (declare-fun repr (UList) List)
  (declare-fun myand (MyBool MyBool) MyBool)
  (declare-fun geq (Nat Nat) MyBool)
  (declare-fun tf3 (Nat List) MyBool)
  (declare-fun tf2 (Nat List) MyBool)
  (declare-fun leq (Nat Nat) MyBool)
  (declare-fun ite2 (MyBool MyBool MyBool) MyBool)
  (declare-fun tf5 (Nat List) MyBool)
  (declare-fun tf4 (Nat List) MyBool)
  (declare-fun tf7 (List) MyBool)
  (declare-fun tf6 (List) MyBool)
  (declare-fun isunimodal (List) MyBool)
  (declare-fun plus (Nat Nat) Nat)
  (declare-fun tf9 (List) Nat)
  (declare-fun tf8 (List) Nat)
  (declare-fun spec (List) Nat)
  (declare-fun tf11 (UList) UList)
  (declare-fun tf10 (UList) UList)
  (declare-fun target (UList) UList)
  (declare-fun ite3 (MyBool Nat) Nat)
  (declare-fun main (UList) Nat)
  (declare-fun tf13 (UList) Nat)
  (declare-fun tf12 (UList) Nat)
  (declare-fun targetNew (UList) Nat)
  (declare-fun mainNew (UList) Nat)
  (assert (forall ((tv5 Unit) (tv4 List)) (= (tf1 tv4 (Unil tv5)) tv4)))
  (assert (forall ((tv6 Nat) (tv4 List)) (= (tf1 tv4 (Uelt tv6)) (Cons tv6 tv4))))
  (assert (forall ((tv10 UList) (tv9 Nat) (tv8 Nat) (tv7 UList) (tv4 List)) (= (tf1 tv4 (Usplit tv7 tv8 tv9 tv10)) (tf0 (Cons tv8 (Cons tv9 (tf0 tv4 tv10))) tv7))))
  (assert (forall ((tv2 UList) (tv1 List)) (= (tf0 tv1 tv2) (tf1 tv1 tv2))))
  (assert (forall ((tv0 UList)) (= (repr tv0) (tf0 (Nil Null) tv0))))
  (assert (forall ((x MyBool)) (= (myand MyFalse x) MyFalse)))
  (assert (forall ((true MyBool)) (= (myand true MyFalse) MyFalse)))
  (assert (= (myand MyTrue MyTrue) MyTrue))
  (assert (= (geq Zero Zero) MyTrue))
  (assert (forall ((x Nat)) (= (geq Zero (Succ x)) MyFalse)))
  (assert (forall ((x Nat)) (= (geq (Succ x) Zero) MyTrue)))
  (assert (forall ((y Nat) (x Nat)) (= (geq (Succ x) (Succ y)) (geq x y))))
  (assert (forall ((tv16 Unit) (tv15 Nat)) (= (tf3 tv15 (Nil tv16)) MyTrue)))
  (assert (forall ((tv18 List) (tv17 Nat) (tv15 Nat)) (= (tf3 tv15 (Cons tv17 tv18)) (myand (geq tv15 tv17) (tf2 tv17 tv18)))))
  (assert (forall ((tv13 List) (tv12 Nat)) (= (tf2 tv12 tv13) (tf3 tv12 tv13))))
  (assert (forall ((x Nat)) (= (leq Zero x) MyTrue)))
  (assert (forall ((x Nat)) (= (leq (Succ x) Zero) MyFalse)))
  (assert (forall ((y Nat) (x Nat)) (= (leq (Succ x) (Succ y)) (leq x y))))
  (assert (forall ((y MyBool) (x MyBool)) (= (ite2 MyTrue x y) x)))
  (assert (forall ((y MyBool) (x MyBool)) (= (ite2 MyFalse x y) y)))
  (assert (forall ((tv23 Unit) (tv22 Nat)) (= (tf5 tv22 (Nil tv23)) MyTrue)))
  (assert (forall ((tv25 List) (tv24 Nat) (tv22 Nat)) (= (tf5 tv22 (Cons tv24 tv25)) (ite2 (leq tv22 tv24) (tf4 tv24 tv25) (tf2 tv24 tv25)))))
  (assert (forall ((tv20 List) (tv19 Nat)) (= (tf4 tv19 tv20) (tf5 tv19 tv20))))
  (assert (forall ((tv27 Unit)) (= (tf7 (Nil tv27)) MyTrue)))
  (assert (forall ((tv29 List) (tv28 Nat)) (= (tf7 (Cons tv28 tv29)) (tf4 tv28 tv29))))
  (assert (forall ((tv26 List)) (= (tf6 tv26) (tf7 tv26))))
  (assert (forall ((tv11 List)) (= (isunimodal tv11) (tf6 tv11))))
  (assert (forall ((x Nat)) (= (plus Zero x) x)))
  (assert (forall ((y Nat) (x Nat)) (= (plus (Succ x) y) (Succ (plus x y)))))
  (assert (forall ((tv33 Unit)) (= (tf9 (Nil tv33)) Zero)))
  (assert (forall ((tv35 List) (tv34 Nat)) (= (tf9 (Cons tv34 tv35)) (plus tv34 (tf8 tv35)))))
  (assert (forall ((tv31 List)) (= (tf8 tv31) (tf9 tv31))))
  (assert (forall ((tv30 List)) (= (spec tv30) (tf8 tv30))))
  (assert (forall ((tv39 Unit)) (= (tf11 (Unil tv39)) (Unil Null))))
  (assert (forall ((tv40 Nat)) (= (tf11 (Uelt tv40)) (Uelt tv40))))
  (assert (forall ((tv44 UList) (tv43 Nat) (tv42 Nat) (tv41 UList)) (= (tf11 (Usplit tv41 tv42 tv43 tv44)) (Usplit (tf10 tv41) tv42 tv43 (tf10 tv44)))))
  (assert (forall ((tv37 UList)) (= (tf10 tv37) (tf11 tv37))))
  (assert (forall ((tv36 UList)) (= (target tv36) (tf10 tv36))))
  (assert (forall ((x Nat)) (= (ite3 MyTrue x) x)))
  (assert (forall ((x Nat)) (= (ite3 MyFalse x) Zero)))
  (assert (forall ((tv45 UList)) (= (main tv45) (ite3 (isunimodal (repr tv45)) (spec (repr (target tv45)))))))
  (assert (forall ((tv49 Unit)) (= (tf13 (Unil tv49)) Zero)))
  (assert (forall ((tv50 Nat)) (= (tf13 (Uelt tv50)) tv50)))
  (assert (forall ((tv54 UList) (tv53 Nat) (tv52 Nat) (tv51 UList)) (= (tf13 (Usplit tv51 tv52 tv53 tv54)) (plus (tf12 tv54) (plus (tf12 tv51) (plus tv52 tv53))))))
  (assert (forall ((tv47 UList)) (= (tf12 tv47) (tf13 tv47))))
  (assert (forall ((tv46 UList)) (= (targetNew tv46) (tf12 tv46))))
  (assert (forall ((tv55 UList)) (= (mainNew tv55) (ite3 (isunimodal (repr tv55)) (targetNew tv55)))))
  (assert (not (forall ((inp0 UList)) (= (main inp0) (mainNew inp0)))))
  (check-sat)
