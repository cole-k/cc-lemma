  (declare-datatypes () ((MyBool (MyTrue) (MyFalse))))
  (declare-datatypes () ((Unit (Null))))
  (declare-datatypes () ((MyNat (Myzero (proj_Myzero_0 Unit)) (Mysucc (proj_Mysucc_0 MyNat)))))
  (declare-datatypes () ((Nat (Zero) (Succ (proj_Succ_0 Nat)))))
  (declare-fun plus (Nat Nat) Nat)
  (declare-fun tf1 (MyNat) Nat)
  (declare-fun tf0 (MyNat) Nat)
  (declare-fun fib (MyNat) Nat)
  (declare-fun tf3 (MyNat MyNat) MyNat)
  (declare-fun tf2 (MyNat) MyNat)
  (declare-fun repr (MyNat) MyNat)
  (declare-fun main (MyNat) Nat)
  (declare-datatypes () ((Tuple0 (MakeTuple0 (proj_MakeTuple0_0 Nat) (proj_MakeTuple0_1 Nat)))))
  (declare-fun nateq (Nat Nat) MyBool)
  (declare-fun fst0 (Tuple0) Nat)
  (declare-fun snd0 (Tuple0) Nat)
  (declare-fun ite1 (MyBool Nat Nat) Nat)
  (declare-fun tf5 (MyNat) Tuple0)
  (declare-fun tf4 (MyNat) Tuple0)
  (declare-fun reprNew (MyNat) Tuple0)
  (declare-fun mainNew (MyNat) Nat)
  (assert (forall ((x Nat)) (= (plus Zero x) x)))
  (assert (forall ((y Nat) (x Nat)) (= (plus (Succ x) y) (Succ (plus x y)))))
  (assert (forall ((tv3 Unit)) (= (tf1 (Myzero tv3)) Zero)))
  (assert (forall ((tv4 Unit)) (= (tf1 (Mysucc (Myzero tv4))) (Succ Zero))))
  (assert (forall ((tv5 MyNat)) (= (tf1 (Mysucc (Mysucc tv5))) (plus (tf0 tv5) (tf0 (Mysucc tv5))))))
  (assert (forall ((tv1 MyNat)) (= (tf0 tv1) (tf1 tv1))))
  (assert (forall ((tv0 MyNat)) (= (fib tv0) (tf0 tv0))))
  (assert (forall ((tv10 Unit) (tv9 MyNat)) (= (tf3 tv9 (Myzero tv10)) tv9)))
  (assert (forall ((tv11 MyNat) (tv9 MyNat)) (= (tf3 tv9 (Mysucc tv11)) (Mysucc (tf2 tv11)))))
  (assert (forall ((tv7 MyNat)) (= (tf2 tv7) (tf3 tv7 tv7))))
  (assert (forall ((tv6 MyNat)) (= (repr tv6) (tf2 tv6))))
  (assert (forall ((tv12 MyNat)) (= (main tv12) (fib (repr tv12)))))
  (assert (= (nateq Zero Zero) MyTrue))
  (assert (forall ((x Nat)) (= (nateq Zero (Succ x)) MyFalse)))
  (assert (forall ((x Nat)) (= (nateq (Succ x) Zero) MyFalse)))
  (assert (forall ((y Nat) (x Nat)) (= (nateq (Succ x) (Succ y)) (nateq x y))))
  (assert (forall ((x1 Nat) (x0 Nat)) (= (fst0 (MakeTuple0 x0 x1)) x0)))
  (assert (forall ((x1 Nat) (x0 Nat)) (= (snd0 (MakeTuple0 x0 x1)) x1)))
  (assert (forall ((y Nat) (x Nat)) (= (ite1 MyTrue x y) x)))
  (assert (forall ((y Nat) (x Nat)) (= (ite1 MyFalse x y) y)))
  (assert (forall ((tv16 Unit)) (= (tf5 (Myzero tv16)) (MakeTuple0 Zero Zero))))
  (assert (forall ((tv17 MyNat)) (= (tf5 (Mysucc tv17)) (MakeTuple0 (ite1 (nateq (fst0 (tf4 tv17)) (snd0 (tf4 tv17))) (plus (Succ Zero) (fst0 (tf4 tv17))) (plus (fst0 (tf4 tv17)) (snd0 (tf4 tv17)))) (fst0 (tf4 tv17))))))
  (assert (forall ((tv14 MyNat)) (= (tf4 tv14) (tf5 tv14))))
  (assert (forall ((tv13 MyNat)) (= (reprNew tv13) (tf4 tv13))))
  (assert (forall ((tv18 MyNat)) (= (mainNew tv18) (fst0 (reprNew tv18)))))
  (assert (not (forall ((inp0 MyNat)) (= (main inp0) (mainNew inp0)))))
  (check-sat)
