  (declare-datatypes () ((MyBool (MyTrue) (MyFalse))))
  (declare-datatypes () ((Nat (Zero) (Succ (proj_Succ_0 Nat)))))
  (declare-datatypes () ((List (Elt (proj_Elt_0 Nat)) (Cons (proj_Cons_0 Nat) (proj_Cons_1 List)))))
  (declare-datatypes () ((CList (Single (proj_Single_0 Nat)) (Concat (proj_Concat_0 CList) (proj_Concat_1 CList)))))
  (declare-fun tf1 (List) Nat)
  (declare-fun tf0 (List) Nat)
  (declare-fun spec (List) Nat)
  (declare-fun tf3 (List List) List)
  (declare-fun tf2 (List List) List)
  (declare-fun cat (List List) List)
  (declare-fun tf5 (CList) List)
  (declare-fun tf4 (CList) List)
  (declare-fun repr (CList) List)
  (declare-fun main (CList) Nat)
  (declare-fun tf7 (CList) Nat)
  (declare-fun tf6 (CList) Nat)
  (declare-fun reprNew (CList) Nat)
  (declare-fun mainNew (CList) Nat)
  (assert (forall ((tv3 Nat)) (= (tf1 (Elt tv3)) tv3)))
  (assert (forall ((tv5 List) (tv4 Nat)) (= (tf1 (Cons tv4 tv5)) (tf0 tv5))))
  (assert (forall ((tv1 List)) (= (tf0 tv1) (tf1 tv1))))
  (assert (forall ((tv0 List)) (= (spec tv0) (tf0 tv0))))
  (assert (forall ((tv12 Nat) (tv11 List)) (= (tf3 tv11 (Elt tv12)) (Cons tv12 tv11))))
  (assert (forall ((tv14 List) (tv13 Nat) (tv11 List)) (= (tf3 tv11 (Cons tv13 tv14)) (Cons tv13 (tf2 tv14 tv11)))))
  (assert (forall ((tv9 List) (tv8 List)) (= (tf2 tv8 tv9) (tf3 tv9 tv8))))
  (assert (forall ((tv7 List) (tv6 List)) (= (cat tv6 tv7) (tf2 tv6 tv7))))
  (assert (forall ((tv18 Nat)) (= (tf5 (Single tv18)) (Elt tv18))))
  (assert (forall ((tv20 CList) (tv19 CList)) (= (tf5 (Concat tv19 tv20)) (cat (tf4 tv19) (tf4 tv20)))))
  (assert (forall ((tv16 CList)) (= (tf4 tv16) (tf5 tv16))))
  (assert (forall ((tv15 CList)) (= (repr tv15) (tf4 tv15))))
  (assert (forall ((tv21 CList)) (= (main tv21) (spec (repr tv21)))))
  (assert (forall ((tv25 Nat)) (= (tf7 (Single tv25)) tv25)))
  (assert (forall ((tv27 CList) (tv26 CList)) (= (tf7 (Concat tv26 tv27)) (tf6 tv27))))
  (assert (forall ((tv23 CList)) (= (tf6 tv23) (tf7 tv23))))
  (assert (forall ((tv22 CList)) (= (reprNew tv22) (tf6 tv22))))
  (assert (forall ((tv28 CList)) (= (mainNew tv28) (reprNew tv28))))
  (assert (not (forall ((inp0 CList)) (= (main inp0) (mainNew inp0)))))
  (check-sat)
