  (declare-datatypes () ((MyBool (MyTrue) (MyFalse))))
  (declare-datatypes () ((Unit (Null))))
  (declare-datatypes () ((Nat (Zero) (Succ (proj_Succ_0 Nat)))))
  (declare-datatypes () ((List (Nil (proj_Nil_0 Unit)) (Cons (proj_Cons_0 Nat) (proj_Cons_1 List)))))
  (declare-datatypes () ((CList (Cnil (proj_Cnil_0 Unit)) (Single (proj_Single_0 Nat)) (Concat (proj_Concat_0 CList) (proj_Concat_1 CList)))))
  (declare-fun lq (Nat Nat) MyBool)
  (declare-fun ite2 (MyBool Nat Nat) Nat)
  (declare-fun max (Nat Nat) Nat)
  (declare-datatypes () ((Tuple3 (MakeTuple3 (proj_MakeTuple3_0 Nat) (proj_MakeTuple3_1 Nat)))))
  (declare-fun fst3 (Tuple3) Nat)
  (declare-fun plus (Nat Nat) Nat)
  (declare-fun snd3 (Tuple3) Nat)
  (declare-fun tf1 (List) Tuple3)
  (declare-fun tf0 (List) Tuple3)
  (declare-fun spec (List) Nat)
  (declare-fun tf3 (List List) List)
  (declare-fun tf2 (List List) List)
  (declare-fun cat (List List) List)
  (declare-fun tf5 (CList) List)
  (declare-fun tf4 (CList) List)
  (declare-fun repr (CList) List)
  (declare-fun main (CList) Nat)
  (declare-fun tf7 (CList) Tuple3)
  (declare-fun tf6 (CList) Tuple3)
  (declare-fun reprNew (CList) Tuple3)
  (declare-fun mainNew (CList) Nat)
  (assert (= (lq Zero Zero) MyFalse))
  (assert (forall ((x Nat)) (= (lq Zero (Succ x)) MyTrue)))
  (assert (forall ((x Nat)) (= (lq (Succ x) Zero) MyFalse)))
  (assert (forall ((y Nat) (x Nat)) (= (lq (Succ x) (Succ y)) (lq x y))))
  (assert (forall ((y Nat) (x Nat)) (= (ite2 MyTrue x y) x)))
  (assert (forall ((y Nat) (x Nat)) (= (ite2 MyFalse x y) y)))
  (assert (forall ((tv1 Nat) (tv0 Nat)) (= (max tv0 tv1) (ite2 (lq tv0 tv1) tv1 tv0))))
  (assert (forall ((x1 Nat) (x0 Nat)) (= (fst3 (MakeTuple3 x0 x1)) x0)))
  (assert (forall ((x Nat)) (= (plus Zero x) x)))
  (assert (forall ((y Nat) (x Nat)) (= (plus (Succ x) y) (Succ (plus x y)))))
  (assert (forall ((x1 Nat) (x0 Nat)) (= (snd3 (MakeTuple3 x0 x1)) x1)))
  (assert (forall ((tv5 Unit)) (= (tf1 (Nil tv5)) (MakeTuple3 Zero Zero))))
  (assert (forall ((tv7 List) (tv6 Nat)) (= (tf1 (Cons tv6 tv7)) (MakeTuple3 (max (fst3 (tf0 tv7)) (plus tv6 (snd3 (tf0 tv7)))) (plus tv6 (snd3 (tf0 tv7)))))))
  (assert (forall ((tv3 List)) (= (tf0 tv3) (tf1 tv3))))
  (assert (forall ((tv2 List)) (= (spec tv2) (fst3 (tf0 tv2)))))
  (assert (forall ((tv14 Unit) (tv13 List)) (= (tf3 tv13 (Nil tv14)) tv13)))
  (assert (forall ((tv16 List) (tv15 Nat) (tv13 List)) (= (tf3 tv13 (Cons tv15 tv16)) (Cons tv15 (tf2 tv16 tv13)))))
  (assert (forall ((tv11 List) (tv10 List)) (= (tf2 tv10 tv11) (tf3 tv11 tv10))))
  (assert (forall ((tv9 List) (tv8 List)) (= (cat tv8 tv9) (tf2 tv8 tv9))))
  (assert (forall ((tv20 Unit)) (= (tf5 (Cnil tv20)) (Nil Null))))
  (assert (forall ((tv21 Nat)) (= (tf5 (Single tv21)) (Cons tv21 (Nil Null)))))
  (assert (forall ((tv23 CList) (tv22 CList)) (= (tf5 (Concat tv22 tv23)) (cat (tf4 tv22) (tf4 tv23)))))
  (assert (forall ((tv18 CList)) (= (tf4 tv18) (tf5 tv18))))
  (assert (forall ((tv17 CList)) (= (repr tv17) (tf4 tv17))))
  (assert (forall ((tv24 CList)) (= (main tv24) (spec (repr tv24)))))
  (assert (forall ((tv28 Unit)) (= (tf7 (Cnil tv28)) (MakeTuple3 Zero Zero))))
  (assert (forall ((tv29 Nat)) (= (tf7 (Single tv29)) (MakeTuple3 (ite2 (lq tv29 Zero) Zero tv29) tv29))))
  (assert (forall ((tv31 CList) (tv30 CList)) (= (tf7 (Concat tv30 tv31)) (MakeTuple3 (max (fst3 (tf6 tv31)) (plus (snd3 (tf6 tv31)) (fst3 (tf6 tv30)))) (plus (snd3 (tf6 tv31)) (snd3 (tf6 tv30)))))))
  (assert (forall ((tv26 CList)) (= (tf6 tv26) (tf7 tv26))))
  (assert (forall ((tv25 CList)) (= (reprNew tv25) (tf6 tv25))))
  (assert (forall ((tv32 CList)) (= (mainNew tv32) (fst3 (reprNew tv32)))))
  (assert (not (forall ((inp0 CList)) (= (main inp0) (mainNew inp0)))))
  (check-sat)
