  (declare-datatypes () ((MyBool (MyTrue) (MyFalse))))
  (declare-datatypes () ((Nat (Zero) (Succ (proj_Succ_0 Nat)))))
  (declare-datatypes () ((Tree (Leaf (proj_Leaf_0 Nat)) (Node (proj_Node_0 Nat) (proj_Node_1 Tree) (proj_Node_2 Tree)))))
  (declare-fun lq (Nat Nat) MyBool)
  (declare-fun ite1 (MyBool Nat Nat) Nat)
  (declare-fun max (Nat Nat) Nat)
  (declare-fun gq (Nat Nat) MyBool)
  (declare-fun min (Nat Nat) Nat)
  (declare-datatypes () ((Tuple2 (MakeTuple2 (proj_MakeTuple2_0 Nat) (proj_MakeTuple2_1 Nat)))))
  (declare-fun fst2 (Tuple2) Nat)
  (declare-fun snd2 (Tuple2) Nat)
  (declare-fun tf1 (Tuple2 Tree) Tuple2)
  (declare-fun tf0 (Tuple2 Tree) Tuple2)
  (declare-fun g (Tuple2 Tree) Tuple2)
  (declare-fun tf3 (Tree) Tuple2)
  (declare-fun tf2 (Tree) Tuple2)
  (declare-fun spec (Tree) Tuple2)
  (declare-fun tf5 (Tree) Tree)
  (declare-fun tf4 (Tree) Tree)
  (declare-fun repr (Tree) Tree)
  (declare-fun main (Tree) Tuple2)
  (declare-fun tf7 (Tree) Tuple2)
  (declare-fun tf6 (Tree) Tuple2)
  (declare-fun reprNew (Tree) Tuple2)
  (declare-fun mainNew (Tree) Tuple2)
  (assert (= (lq Zero Zero) MyFalse))
  (assert (forall ((x Nat)) (= (lq Zero (Succ x)) MyTrue)))
  (assert (forall ((x Nat)) (= (lq (Succ x) Zero) MyFalse)))
  (assert (forall ((y Nat) (x Nat)) (= (lq (Succ x) (Succ y)) (lq x y))))
  (assert (forall ((y Nat) (x Nat)) (= (ite1 MyTrue x y) x)))
  (assert (forall ((y Nat) (x Nat)) (= (ite1 MyFalse x y) y)))
  (assert (forall ((tv1 Nat) (tv0 Nat)) (= (max tv0 tv1) (ite1 (lq tv0 tv1) tv1 tv0))))
  (assert (forall ((x Nat)) (= (gq Zero x) MyFalse)))
  (assert (forall ((x Nat)) (= (gq (Succ x) Zero) MyTrue)))
  (assert (forall ((y Nat) (x Nat)) (= (gq (Succ x) (Succ y)) (gq x y))))
  (assert (forall ((tv3 Nat) (tv2 Nat)) (= (min tv2 tv3) (ite1 (gq tv2 tv3) tv3 tv2))))
  (assert (forall ((x1 Nat) (x0 Nat)) (= (fst2 (MakeTuple2 x0 x1)) x0)))
  (assert (forall ((x1 Nat) (x0 Nat)) (= (snd2 (MakeTuple2 x0 x1)) x1)))
  (assert (forall ((tv10 Nat) (tv9 Tuple2)) (= (tf1 tv9 (Leaf tv10)) (MakeTuple2 (min tv10 (fst2 tv9)) (max tv10 (snd2 tv9))))))
  (assert (forall ((tv12 Tree) (tv11 Nat) (tv13 Tree) (tv9 Tuple2)) (= (tf1 tv9 (Node tv11 tv12 tv13)) (tf0 (tf0 (MakeTuple2 (min tv11 (fst2 tv9)) (max tv11 (snd2 tv9))) tv12) tv13))))
  (assert (forall ((tv7 Tree) (tv6 Tuple2)) (= (tf0 tv6 tv7) (tf1 tv6 tv7))))
  (assert (forall ((tv5 Tree) (tv4 Tuple2)) (= (g tv4 tv5) (tf0 tv4 tv5))))
  (assert (forall ((tv16 Nat)) (= (tf3 (Leaf tv16)) (MakeTuple2 tv16 tv16))))
  (assert (forall ((tv19 Tree) (tv18 Tree) (tv17 Nat)) (= (tf3 (Node tv17 tv18 tv19)) (g (MakeTuple2 (fst2 (g (MakeTuple2 tv17 tv17) tv18)) (snd2 (g (MakeTuple2 tv17 tv17) tv18))) tv19))))
  (assert (forall ((tv15 Tree)) (= (tf2 tv15) (tf3 tv15))))
  (assert (forall ((tv14 Tree)) (= (spec tv14) (tf2 tv14))))
  (assert (forall ((tv23 Nat)) (= (tf5 (Leaf tv23)) (Leaf tv23))))
  (assert (forall ((tv25 Tree) (tv26 Tree) (tv24 Nat)) (= (tf5 (Node tv24 tv25 tv26)) (Node tv24 (tf4 tv25) (tf4 tv26)))))
  (assert (forall ((tv21 Tree)) (= (tf4 tv21) (tf5 tv21))))
  (assert (forall ((tv20 Tree)) (= (repr tv20) (tf4 tv20))))
  (assert (forall ((tv27 Tree)) (= (main tv27) (spec (repr tv27)))))
  (assert (forall ((tv31 Nat)) (= (tf7 (Leaf tv31)) (MakeTuple2 tv31 tv31))))
  (assert (forall ((tv33 Tree) (tv34 Tree) (tv32 Nat)) (= (tf7 (Node tv32 tv33 tv34)) (MakeTuple2 (min (fst2 (tf6 tv33)) (min (fst2 (tf6 tv34)) tv32)) (max (snd2 (tf6 tv33)) (max (snd2 (tf6 tv34)) tv32))))))
  (assert (forall ((tv29 Tree)) (= (tf6 tv29) (tf7 tv29))))
  (assert (forall ((tv28 Tree)) (= (reprNew tv28) (tf6 tv28))))
  (assert (forall ((tv35 Tree)) (= (mainNew tv35) (MakeTuple2 (fst2 (reprNew tv35)) (snd2 (reprNew tv35))))))
  (assert (not (forall ((inp0 Tree)) (= (main inp0) (mainNew inp0)))))
  (check-sat)
