  (declare-datatypes () ((MyBool (MyTrue) (MyFalse))))
  (declare-datatypes () ((Nat (Zero) (Succ (proj_Succ_0 Nat)))))
  (declare-datatypes () ((List (Elt (proj_Elt_0 Nat)) (Cons (proj_Cons_0 Nat) (proj_Cons_1 List)))))
  (declare-datatypes () ((NList (Line (proj_Line_0 List)) (Ncons (proj_Ncons_0 List) (proj_Ncons_1 NList)))))
  (declare-fun lq (Nat Nat) MyBool)
  (declare-fun ite2 (MyBool Nat Nat) Nat)
  (declare-fun max (Nat Nat) Nat)
  (declare-fun tf1 (List) Nat)
  (declare-fun tf0 (List) Nat)
  (declare-fun lmax (List) Nat)
  (declare-fun min (Nat Nat) Nat)
  (declare-fun tf3 (List) Nat)
  (declare-fun tf2 (List) Nat)
  (declare-fun lmin (List) Nat)
  (declare-fun leq (Nat Nat) MyBool)
  (declare-fun myand (MyBool MyBool) MyBool)
  (declare-fun tf5 (Nat NList) MyBool)
  (declare-fun tf4 (Nat NList) MyBool)
  (declare-fun tf7 (NList) MyBool)
  (declare-fun tf6 (NList) MyBool)
  (declare-fun issorted (NList) MyBool)
  (declare-datatypes () ((Tuple3 (MakeTuple3 (proj_MakeTuple3_0 Nat) (proj_MakeTuple3_1 Nat)))))
  (declare-fun fst3 (Tuple3) Nat)
  (declare-fun snd3 (Tuple3) Nat)
  (declare-fun tf9 (List) Tuple3)
  (declare-fun tf8 (List) Tuple3)
  (declare-fun interval (List) Tuple3)
  (declare-datatypes () ((Tuple4 (MakeTuple4 (proj_MakeTuple4_0 Nat) (proj_MakeTuple4_1 Nat) (proj_MakeTuple4_2 MyBool)))))
  (declare-fun fst4 (Tuple4) Nat)
  (declare-fun snd4 (Tuple4) Nat)
  (declare-fun third4 (Tuple4) MyBool)
  (declare-fun geq (Nat Nat) MyBool)
  (declare-fun tf11 (NList) Tuple4)
  (declare-fun tf10 (NList) Tuple4)
  (declare-fun spec (NList) MyBool)
  (declare-fun tf13 (NList NList) NList)
  (declare-fun tf12 (NList) NList)
  (declare-fun target (NList) NList)
  (declare-fun ite5 (MyBool MyBool) MyBool)
  (declare-fun main (NList) MyBool)
  (declare-datatypes () ((Tuple6 (MakeTuple6 (proj_MakeTuple6_0 MyBool) (proj_MakeTuple6_1 Nat)))))
  (declare-fun fst6 (Tuple6) MyBool)
  (declare-fun snd6 (Tuple6) Nat)
  (declare-fun tf15 (NList) Tuple6)
  (declare-fun tf14 (NList) Tuple6)
  (declare-fun targetNew (NList) Tuple6)
  (declare-fun mainNew (NList) MyBool)
  (assert (= (lq Zero Zero) MyFalse))
  (assert (forall ((x Nat)) (= (lq Zero (Succ x)) MyTrue)))
  (assert (forall ((x Nat)) (= (lq (Succ x) Zero) MyFalse)))
  (assert (forall ((y Nat) (x Nat)) (= (lq (Succ x) (Succ y)) (lq x y))))
  (assert (forall ((y Nat) (x Nat)) (= (ite2 MyTrue x y) x)))
  (assert (forall ((y Nat) (x Nat)) (= (ite2 MyFalse x y) y)))
  (assert (forall ((tv1 Nat) (tv0 Nat)) (= (max tv0 tv1) (ite2 (lq tv0 tv1) tv1 tv0))))
  (assert (forall ((tv5 Nat)) (= (tf1 (Elt tv5)) tv5)))
  (assert (forall ((tv7 List) (tv6 Nat)) (= (tf1 (Cons tv6 tv7)) (max tv6 (tf0 tv7)))))
  (assert (forall ((tv3 List)) (= (tf0 tv3) (tf1 tv3))))
  (assert (forall ((tv2 List)) (= (lmax tv2) (tf0 tv2))))
  (assert (forall ((tv9 Nat) (tv8 Nat)) (= (min tv8 tv9) (ite2 (lq tv8 tv9) tv8 tv9))))
  (assert (forall ((tv13 Nat)) (= (tf3 (Elt tv13)) tv13)))
  (assert (forall ((tv15 List) (tv14 Nat)) (= (tf3 (Cons tv14 tv15)) (min tv14 (tf2 tv15)))))
  (assert (forall ((tv11 List)) (= (tf2 tv11) (tf3 tv11))))
  (assert (forall ((tv10 List)) (= (lmin tv10) (tf2 tv10))))
  (assert (forall ((x Nat)) (= (leq Zero x) MyTrue)))
  (assert (forall ((x Nat)) (= (leq (Succ x) Zero) MyFalse)))
  (assert (forall ((y Nat) (x Nat)) (= (leq (Succ x) (Succ y)) (leq x y))))
  (assert (forall ((x MyBool)) (= (myand MyFalse x) MyFalse)))
  (assert (forall ((true MyBool)) (= (myand true MyFalse) MyFalse)))
  (assert (= (myand MyTrue MyTrue) MyTrue))
  (assert (forall ((tv21 List) (tv20 Nat)) (= (tf5 tv20 (Line tv21)) (leq tv20 (lmax tv21)))))
  (assert (forall ((tv23 NList) (tv22 List) (tv20 Nat)) (= (tf5 tv20 (Ncons tv22 tv23)) (myand (leq tv20 (lmax tv22)) (tf4 (lmax tv22) tv23)))))
  (assert (forall ((tv18 NList) (tv17 Nat)) (= (tf4 tv17 tv18) (tf5 tv17 tv18))))
  (assert (forall ((tv25 List)) (= (tf7 (Line tv25)) MyTrue)))
  (assert (forall ((tv27 NList) (tv26 List)) (= (tf7 (Ncons tv26 tv27)) (tf4 (lmax tv26) tv27))))
  (assert (forall ((tv24 NList)) (= (tf6 tv24) (tf7 tv24))))
  (assert (forall ((tv16 NList)) (= (issorted tv16) (tf6 tv16))))
  (assert (forall ((x1 Nat) (x0 Nat)) (= (fst3 (MakeTuple3 x0 x1)) x0)))
  (assert (forall ((x1 Nat) (x0 Nat)) (= (snd3 (MakeTuple3 x0 x1)) x1)))
  (assert (forall ((tv31 Nat)) (= (tf9 (Elt tv31)) (MakeTuple3 tv31 tv31))))
  (assert (forall ((tv33 List) (tv32 Nat)) (= (tf9 (Cons tv32 tv33)) (MakeTuple3 (min (fst3 (tf8 tv33)) tv32) (max (snd3 (tf8 tv33)) tv32)))))
  (assert (forall ((tv29 List)) (= (tf8 tv29) (tf9 tv29))))
  (assert (forall ((tv28 List)) (= (interval tv28) (tf8 tv28))))
  (assert (forall ((x2 MyBool) (x1 Nat) (x0 Nat)) (= (fst4 (MakeTuple4 x0 x1 x2)) x0)))
  (assert (forall ((x2 MyBool) (x1 Nat) (x0 Nat)) (= (snd4 (MakeTuple4 x0 x1 x2)) x1)))
  (assert (forall ((x2 MyBool) (x1 Nat) (x0 Nat)) (= (third4 (MakeTuple4 x0 x1 x2)) x2)))
  (assert (= (geq Zero Zero) MyTrue))
  (assert (forall ((x Nat)) (= (geq Zero (Succ x)) MyFalse)))
  (assert (forall ((x Nat)) (= (geq (Succ x) Zero) MyTrue)))
  (assert (forall ((y Nat) (x Nat)) (= (geq (Succ x) (Succ y)) (geq x y))))
  (assert (forall ((tv37 List)) (= (tf11 (Line tv37)) (MakeTuple4 (fst3 (interval tv37)) (snd3 (interval tv37)) MyTrue))))
  (assert (forall ((tv39 NList) (tv38 List)) (= (tf11 (Ncons tv38 tv39)) (MakeTuple4 (min (fst3 (interval tv38)) (fst4 (tf10 tv39))) (max (snd3 (interval tv38)) (snd4 (tf10 tv39))) (myand (third4 (tf10 tv39)) (myand (leq (fst4 (tf10 tv39)) (fst3 (interval tv38))) (geq (snd4 (tf10 tv39)) (snd3 (interval tv38)))))))))
  (assert (forall ((tv35 NList)) (= (tf10 tv35) (tf11 tv35))))
  (assert (forall ((tv34 NList)) (= (spec tv34) (third4 (tf10 tv34)))))
  (assert (forall ((tv44 List) (tv43 NList)) (= (tf13 tv43 (Line tv44)) tv43)))
  (assert (forall ((tv46 NList) (tv45 List) (tv43 NList)) (= (tf13 tv43 (Ncons tv45 tv46)) (Ncons tv45 (tf12 tv46)))))
  (assert (forall ((tv41 NList)) (= (tf12 tv41) (tf13 tv41 tv41))))
  (assert (forall ((tv40 NList)) (= (target tv40) (tf12 tv40))))
  (assert (forall ((x MyBool)) (= (ite5 MyTrue x) x)))
  (assert (forall ((x MyBool)) (= (ite5 MyFalse x) MyFalse)))
  (assert (forall ((tv47 NList)) (= (main tv47) (ite5 (issorted tv47) (spec (target tv47))))))
  (assert (forall ((x1 Nat) (x0 MyBool)) (= (fst6 (MakeTuple6 x0 x1)) x0)))
  (assert (forall ((x1 Nat) (x0 MyBool)) (= (snd6 (MakeTuple6 x0 x1)) x1)))
  (assert (forall ((tv51 List)) (= (tf15 (Line tv51)) (MakeTuple6 MyTrue (fst3 (interval tv51))))))
  (assert (forall ((tv53 NList) (tv52 List)) (= (tf15 (Ncons tv52 tv53)) (MakeTuple6 (myand (fst6 (tf14 tv53)) (leq (snd6 (tf14 tv53)) (lmin tv52))) (snd6 (tf14 tv53))))))
  (assert (forall ((tv49 NList)) (= (tf14 tv49) (tf15 tv49))))
  (assert (forall ((tv48 NList)) (= (targetNew tv48) (tf14 tv48))))
  (assert (forall ((tv54 NList)) (= (mainNew tv54) (ite5 (issorted tv54) (fst6 (targetNew tv54))))))
  (assert (not (forall ((inp0 NList)) (= (main inp0) (mainNew inp0)))))
  (check-sat)
