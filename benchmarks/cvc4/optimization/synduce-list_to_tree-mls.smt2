  (declare-datatypes () ((MyBool (MyTrue) (MyFalse))))
  (declare-datatypes () ((Unit (Null))))
  (declare-datatypes () ((Nat (Zero) (Succ (proj_Succ_0 Nat)))))
  (declare-datatypes () ((Tree (Empty (proj_Empty_0 Unit)) (Node (proj_Node_0 Nat) (proj_Node_1 Tree) (proj_Node_2 Tree)))))
  (declare-datatypes () ((List (Nil (proj_Nil_0 Unit)) (Cons (proj_Cons_0 Nat) (proj_Cons_1 List)))))
  (declare-fun lq (Nat Nat) MyBool)
  (declare-fun ite2 (MyBool Nat Nat) Nat)
  (declare-fun max (Nat Nat) Nat)
  (declare-fun tf1 (List Tree) List)
  (declare-fun tf0 (List Tree) List)
  (declare-fun tf3 (Tree) List)
  (declare-fun tf2 (Tree) List)
  (declare-fun repr (Tree) List)
  (declare-fun tf5 (Tree) Tree)
  (declare-fun tf4 (Tree) Tree)
  (declare-fun target (Tree) Tree)
  (declare-datatypes () ((Tuple3 (MakeTuple3 (proj_MakeTuple3_0 Nat) (proj_MakeTuple3_1 Nat)))))
  (declare-fun plus (Nat Nat) Nat)
  (declare-fun fst3 (Tuple3) Nat)
  (declare-fun snd3 (Tuple3) Nat)
  (declare-fun tf7 (List) Tuple3)
  (declare-fun tf6 (List) Tuple3)
  (declare-fun spec (List) Tuple3)
  (declare-fun main (Tree) Tuple3)
  (declare-fun tf9 (Tree) Tuple3)
  (declare-fun tf8 (Tree) Tuple3)
  (declare-fun targetNew (Tree) Tuple3)
  (declare-fun mainNew (Tree) Tuple3)
  (assert (= (lq Zero Zero) MyFalse))
  (assert (forall ((x Nat)) (= (lq Zero (Succ x)) MyTrue)))
  (assert (forall ((x Nat)) (= (lq (Succ x) Zero) MyFalse)))
  (assert (forall ((y Nat) (x Nat)) (= (lq (Succ x) (Succ y)) (lq x y))))
  (assert (forall ((y Nat) (x Nat)) (= (ite2 MyTrue x y) x)))
  (assert (forall ((y Nat) (x Nat)) (= (ite2 MyFalse x y) y)))
  (assert (forall ((tv1 Nat) (tv0 Nat)) (= (max tv0 tv1) (ite2 (lq tv0 tv1) tv1 tv0))))
  (assert (forall ((tv7 Unit) (tv6 List)) (= (tf1 tv6 (Empty tv7)) tv6)))
  (assert (forall ((tv9 Tree) (tv8 Nat) (tv10 Tree) (tv6 List)) (= (tf1 tv6 (Node tv8 tv9 tv10)) (Cons tv8 (tf0 (tf0 tv6 tv9) tv10)))))
  (assert (forall ((tv4 Tree) (tv3 List)) (= (tf0 tv3 tv4) (tf1 tv3 tv4))))
  (assert (forall ((tv13 Unit)) (= (tf3 (Empty tv13)) (Nil Null))))
  (assert (forall ((tv16 Tree) (tv15 Tree) (tv14 Nat)) (= (tf3 (Node tv14 tv15 tv16)) (Cons tv14 (tf0 (tf2 tv15) tv16)))))
  (assert (forall ((tv11 Tree)) (= (tf2 tv11) (tf3 tv11))))
  (assert (forall ((tv2 Tree)) (= (repr tv2) (tf2 tv2))))
  (assert (forall ((tv20 Unit)) (= (tf5 (Empty tv20)) (Empty Null))))
  (assert (forall ((tv23 Tree) (tv22 Tree) (tv21 Nat)) (= (tf5 (Node tv21 tv22 tv23)) (Node tv21 (tf4 tv22) (tf4 tv23)))))
  (assert (forall ((tv18 Tree)) (= (tf4 tv18) (tf5 tv18))))
  (assert (forall ((tv17 Tree)) (= (target tv17) (tf4 tv17))))
  (assert (forall ((x Nat)) (= (plus Zero x) x)))
  (assert (forall ((y Nat) (x Nat)) (= (plus (Succ x) y) (Succ (plus x y)))))
  (assert (forall ((x1 Nat) (x0 Nat)) (= (fst3 (MakeTuple3 x0 x1)) x0)))
  (assert (forall ((x1 Nat) (x0 Nat)) (= (snd3 (MakeTuple3 x0 x1)) x1)))
  (assert (forall ((tv27 Unit)) (= (tf7 (Nil tv27)) (MakeTuple3 Zero Zero))))
  (assert (forall ((tv29 List) (tv28 Nat)) (= (tf7 (Cons tv28 tv29)) (MakeTuple3 (plus tv28 (fst3 (tf6 tv29))) (max (snd3 (tf6 tv29)) (plus tv28 (fst3 (tf6 tv29))))))))
  (assert (forall ((tv25 List)) (= (tf6 tv25) (tf7 tv25))))
  (assert (forall ((tv24 List)) (= (spec tv24) (tf6 tv24))))
  (assert (forall ((tv30 Tree)) (= (main tv30) (spec (repr (target tv30))))))
  (assert (forall ((tv34 Unit)) (= (tf9 (Empty tv34)) (MakeTuple3 Zero Zero))))
  (assert (forall ((tv37 Tree) (tv36 Tree) (tv35 Nat)) (= (tf9 (Node tv35 tv36 tv37)) (MakeTuple3 (plus (plus (fst3 (tf8 tv37)) (fst3 (tf8 tv36))) tv35) (ite2 (lq (max (plus (snd3 (tf8 tv37)) (fst3 (tf8 tv36))) (snd3 (tf8 tv36))) (plus (fst3 (tf8 tv37)) (max (plus (fst3 (tf8 tv36)) tv35) (fst3 (tf8 tv36))))) (plus (fst3 (tf8 tv37)) (max (plus (fst3 (tf8 tv36)) tv35) (fst3 (tf8 tv36)))) (max (plus (snd3 (tf8 tv37)) (fst3 (tf8 tv36))) (snd3 (tf8 tv36))))))))
  (assert (forall ((tv32 Tree)) (= (tf8 tv32) (tf9 tv32))))
  (assert (forall ((tv31 Tree)) (= (targetNew tv31) (tf8 tv31))))
  (assert (forall ((tv38 Tree)) (= (mainNew tv38) (MakeTuple3 (fst3 (targetNew tv38)) (snd3 (targetNew tv38))))))
  (assert (not (forall ((inp0 Tree)) (= (main inp0) (mainNew inp0)))))
  (check-sat)
