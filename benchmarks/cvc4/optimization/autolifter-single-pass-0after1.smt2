  (declare-datatypes () ((MyBool (MyTrue) (MyFalse))))
  (declare-datatypes () ((Unit (Null))))
  (declare-datatypes () ((List (Nil (proj_Nil_0 Unit)) (Cons (proj_Cons_0 MyBool) (proj_Cons_1 List)))))
  (declare-fun tf1 (List List) List)
  (declare-fun tf0 (List) List)
  (declare-fun tf2 (List) MyBool)
  (declare-fun singlepass (List) MyBool)
  (declare-fun myand (MyBool MyBool) MyBool)
  (declare-fun mynot (MyBool) MyBool)
  (declare-fun myor (MyBool MyBool) MyBool)
  (declare-fun ite1 (MyBool MyBool) MyBool)
  (declare-fun tf4 (MyBool List) MyBool)
  (declare-fun tf3 (MyBool List) MyBool)
  (declare-fun zafter1 (List) MyBool)
  (declare-fun main (List) MyBool)
  (declare-datatypes () ((Tuple2 (MakeTuple2 (proj_MakeTuple2_0 MyBool) (proj_MakeTuple2_1 MyBool)))))
  (declare-fun snd2 (Tuple2) MyBool)
  (declare-fun fst2 (Tuple2) MyBool)
  (declare-fun tf6 (List) Tuple2)
  (declare-fun tf5 (List) Tuple2)
  (declare-fun tf7 (List) MyBool)
  (declare-fun singlepassNew (List) MyBool)
  (declare-fun mainNew (List) MyBool)
  (assert (forall ((tv5 Unit) (tv4 List)) (= (tf1 tv4 (Nil tv5)) tv4)))
  (assert (forall ((tv7 List) (tv6 MyBool) (tv4 List)) (= (tf1 tv4 (Cons tv6 tv7)) (Cons tv6 (tf0 tv7)))))
  (assert (forall ((tv2 List)) (= (tf0 tv2) (tf1 tv2 tv2))))
  (assert (forall ((tv9 List)) (= (tf2 tv9) (zafter1 (tf0 tv9)))))
  (assert (forall ((tv1 List)) (= (singlepass tv1) (tf2 tv1))))
  (assert (forall ((x MyBool)) (= (myand MyFalse x) MyFalse)))
  (assert (forall ((true MyBool)) (= (myand true MyFalse) MyFalse)))
  (assert (= (myand MyTrue MyTrue) MyTrue))
  (assert (= (mynot MyTrue) MyFalse))
  (assert (= (mynot MyFalse) MyTrue))
  (assert (forall ((x MyBool)) (= (myor MyTrue x) MyTrue)))
  (assert (forall ((false MyBool)) (= (myor false MyTrue) MyTrue)))
  (assert (= (myor MyFalse MyFalse) MyFalse))
  (assert (forall ((y MyBool)) (= (ite1 MyTrue y) MyTrue)))
  (assert (forall ((y MyBool)) (= (ite1 MyFalse y) y)))
  (assert (forall ((tv15 Unit) (tv14 MyBool)) (= (tf4 tv14 (Nil tv15)) MyFalse)))
  (assert (forall ((tv17 List) (tv16 MyBool) (tv14 MyBool)) (= (tf4 tv14 (Cons tv16 tv17)) (ite1 (myand tv14 (mynot tv16)) (tf3 (myor tv14 tv16) tv17)))))
  (assert (forall ((tv12 List) (tv11 MyBool)) (= (tf3 tv11 tv12) (tf4 tv11 tv12))))
  (assert (forall ((tv10 List)) (= (zafter1 tv10) (tf3 MyFalse tv10))))
  (assert (forall ((tv18 List)) (= (main tv18) (singlepass tv18))))
  (assert (forall ((x1 MyBool) (x0 MyBool)) (= (snd2 (MakeTuple2 x0 x1)) x1)))
  (assert (forall ((x1 MyBool) (x0 MyBool)) (= (fst2 (MakeTuple2 x0 x1)) x0)))
  (assert (forall ((tv23 Unit)) (= (tf6 (Nil tv23)) (MakeTuple2 MyFalse MyTrue))))
  (assert (forall ((tv25 List) (tv24 MyBool)) (= (tf6 (Cons tv24 tv25)) (MakeTuple2 (myor (myand tv24 (mynot (snd2 (tf5 tv25)))) (fst2 (tf5 tv25))) (myand tv24 (snd2 (tf5 tv25)))))))
  (assert (forall ((tv21 List)) (= (tf5 tv21) (tf6 tv21))))
  (assert (forall ((tv26 List)) (= (tf7 tv26) (fst2 (tf5 tv26)))))
  (assert (forall ((tv20 List)) (= (singlepassNew tv20) (tf7 tv20))))
  (assert (forall ((tv27 List)) (= (mainNew tv27) (singlepassNew tv27))))
  (assert (not (forall ((inp0 List)) (= (main inp0) (mainNew inp0)))))
  (check-sat)
