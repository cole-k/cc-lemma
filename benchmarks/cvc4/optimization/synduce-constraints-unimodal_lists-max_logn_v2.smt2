  (declare-datatypes () ((MyBool (MyTrue) (MyFalse))))
  (declare-datatypes () ((Nat (Zero) (Succ (proj_Succ_0 Nat)))))
  (declare-datatypes () ((UList (Uelt (proj_Uelt_0 Nat)) (Usplit (proj_Usplit_0 UList) (proj_Usplit_1 Nat) (proj_Usplit_2 Nat) (proj_Usplit_3 UList)))))
  (declare-datatypes () ((List (Elt (proj_Elt_0 Nat)) (Cons (proj_Cons_0 Nat) (proj_Cons_1 List)))))
  (declare-fun tf1 (List UList) List)
  (declare-fun tf0 (List UList) List)
  (declare-fun tf3 (UList) List)
  (declare-fun tf2 (UList) List)
  (declare-fun repr (UList) List)
  (declare-fun gq (Nat Nat) MyBool)
  (declare-fun myand (MyBool MyBool) MyBool)
  (declare-fun tf5 (Nat List) MyBool)
  (declare-fun tf4 (Nat List) MyBool)
  (declare-fun lq (Nat Nat) MyBool)
  (declare-fun ite2 (MyBool MyBool MyBool) MyBool)
  (declare-fun tf7 (Nat List) MyBool)
  (declare-fun tf6 (Nat List) MyBool)
  (declare-fun tf9 (List) MyBool)
  (declare-fun tf8 (List) MyBool)
  (declare-fun isunimodal (List) MyBool)
  (declare-fun ite3 (MyBool Nat Nat) Nat)
  (declare-fun max (Nat Nat) Nat)
  (declare-fun tf11 (List) Nat)
  (declare-fun tf10 (List) Nat)
  (declare-fun spec (List) Nat)
  (declare-fun ite4 (MyBool UList UList) UList)
  (declare-fun tf13 (UList) UList)
  (declare-fun tf12 (UList) UList)
  (declare-fun target (UList) UList)
  (declare-fun main (UList) Nat)
  (declare-fun tf15 (UList) Nat)
  (declare-fun tf14 (UList) Nat)
  (declare-fun targetNew (UList) Nat)
  (declare-fun mainNew (UList) Nat)
  (assert (forall ((tv5 Nat) (tv4 List)) (= (tf1 tv4 (Uelt tv5)) (Cons tv5 tv4))))
  (assert (forall ((tv9 UList) (tv8 Nat) (tv7 Nat) (tv6 UList) (tv4 List)) (= (tf1 tv4 (Usplit tv6 tv7 tv8 tv9)) (tf0 (Cons tv7 (Cons tv8 (tf0 tv4 tv9))) tv6))))
  (assert (forall ((tv2 UList) (tv1 List)) (= (tf0 tv1 tv2) (tf1 tv1 tv2))))
  (assert (forall ((tv12 Nat)) (= (tf3 (Uelt tv12)) (Elt tv12))))
  (assert (forall ((tv16 UList) (tv15 Nat) (tv14 Nat) (tv13 UList)) (= (tf3 (Usplit tv13 tv14 tv15 tv16)) (tf0 (Cons tv14 (Cons tv15 (tf2 tv16))) tv13))))
  (assert (forall ((tv10 UList)) (= (tf2 tv10) (tf3 tv10))))
  (assert (forall ((tv0 UList)) (= (repr tv0) (tf2 tv0))))
  (assert (forall ((x Nat)) (= (gq Zero x) MyFalse)))
  (assert (forall ((x Nat)) (= (gq (Succ x) Zero) MyTrue)))
  (assert (forall ((y Nat) (x Nat)) (= (gq (Succ x) (Succ y)) (gq x y))))
  (assert (forall ((x MyBool)) (= (myand MyFalse x) MyFalse)))
  (assert (forall ((true MyBool)) (= (myand true MyFalse) MyFalse)))
  (assert (= (myand MyTrue MyTrue) MyTrue))
  (assert (forall ((tv22 Nat) (tv21 Nat)) (= (tf5 tv21 (Elt tv22)) (gq tv21 tv22))))
  (assert (forall ((tv24 List) (tv23 Nat) (tv21 Nat)) (= (tf5 tv21 (Cons tv23 tv24)) (myand (gq tv21 tv23) (tf4 tv23 tv24)))))
  (assert (forall ((tv19 List) (tv18 Nat)) (= (tf4 tv18 tv19) (tf5 tv18 tv19))))
  (assert (= (lq Zero Zero) MyFalse))
  (assert (forall ((x Nat)) (= (lq Zero (Succ x)) MyTrue)))
  (assert (forall ((x Nat)) (= (lq (Succ x) Zero) MyFalse)))
  (assert (forall ((y Nat) (x Nat)) (= (lq (Succ x) (Succ y)) (lq x y))))
  (assert (forall ((y MyBool) (x MyBool)) (= (ite2 MyTrue x y) x)))
  (assert (forall ((y MyBool) (x MyBool)) (= (ite2 MyFalse x y) y)))
  (assert (forall ((tv29 Nat) (tv28 Nat)) (= (tf7 tv28 (Elt tv29)) (lq tv28 tv29))))
  (assert (forall ((tv31 List) (tv30 Nat) (tv28 Nat)) (= (tf7 tv28 (Cons tv30 tv31)) (ite2 (lq tv28 tv30) (tf6 tv30 tv31) (tf4 tv30 tv31)))))
  (assert (forall ((tv26 List) (tv25 Nat)) (= (tf6 tv25 tv26) (tf7 tv25 tv26))))
  (assert (forall ((tv33 Nat)) (= (tf9 (Elt tv33)) MyTrue)))
  (assert (forall ((tv35 List) (tv34 Nat)) (= (tf9 (Cons tv34 tv35)) (tf6 tv34 tv35))))
  (assert (forall ((tv32 List)) (= (tf8 tv32) (tf9 tv32))))
  (assert (forall ((tv17 List)) (= (isunimodal tv17) (tf8 tv17))))
  (assert (forall ((y Nat) (x Nat)) (= (ite3 MyTrue x y) x)))
  (assert (forall ((y Nat) (x Nat)) (= (ite3 MyFalse x y) y)))
  (assert (forall ((tv37 Nat) (tv36 Nat)) (= (max tv36 tv37) (ite3 (lq tv36 tv37) tv37 tv36))))
  (assert (forall ((tv41 Nat)) (= (tf11 (Elt tv41)) tv41)))
  (assert (forall ((tv43 List) (tv42 Nat)) (= (tf11 (Cons tv42 tv43)) (max tv42 (tf10 tv43)))))
  (assert (forall ((tv39 List)) (= (tf10 tv39) (tf11 tv39))))
  (assert (forall ((tv38 List)) (= (spec tv38) (tf10 tv38))))
  (assert (forall ((y UList) (x UList)) (= (ite4 MyTrue x y) x)))
  (assert (forall ((y UList) (x UList)) (= (ite4 MyFalse x y) y)))
  (assert (forall ((tv47 Nat)) (= (tf13 (Uelt tv47)) (Uelt tv47))))
  (assert (forall ((tv51 UList) (tv50 Nat) (tv49 Nat) (tv48 UList)) (= (tf13 (Usplit tv48 tv49 tv50 tv51)) (ite4 (gq tv49 tv50) (Usplit (tf12 tv48) tv49 tv50 tv51) (Usplit tv48 tv49 tv50 (tf12 tv51))))))
  (assert (forall ((tv45 UList)) (= (tf12 tv45) (tf13 tv45))))
  (assert (forall ((tv44 UList)) (= (target tv44) (tf12 tv44))))
  (assert (forall ((tv52 UList)) (= (main tv52) (ite3 (isunimodal (repr tv52)) (spec (repr (target tv52))) Zero))))
  (assert (forall ((tv56 Nat)) (= (tf15 (Uelt tv56)) tv56)))
  (assert (forall ((tv58 Nat) (tv60 UList) (tv59 Nat) (tv57 UList)) (= (tf15 (Usplit tv57 tv58 tv59 tv60)) (ite3 (gq tv58 tv59) (max tv58 (tf14 tv57)) (max tv59 (tf14 tv60))))))
  (assert (forall ((tv54 UList)) (= (tf14 tv54) (tf15 tv54))))
  (assert (forall ((tv53 UList)) (= (targetNew tv53) (tf14 tv53))))
  (assert (forall ((tv61 UList)) (= (mainNew tv61) (ite3 (isunimodal (repr tv61)) (targetNew tv61) Zero))))
  (assert (not (forall ((inp0 UList)) (= (main inp0) (mainNew inp0)))))
  (check-sat)
