  (declare-datatypes () ((MyBool (MyTrue) (MyFalse))))
  (declare-datatypes () ((Nat (Zero) (Succ (proj_Succ_0 Nat)))))
  (declare-datatypes () ((Tree (Tip (proj_Tip_0 Nat)) (Bin (proj_Bin_0 Tree) (proj_Bin_1 Tree)))))
  (declare-fun tf3 (Tree) Tree)
  (declare-fun tf2 (Tree) Tree)
  (declare-fun tf1 (Tree) Tree)
  (declare-fun tf0 (Tree) Tree)
  (declare-fun tri (Tree) Tree)
  (declare-fun plus (Nat Nat) Nat)
  (declare-fun op (Nat) Nat)
  (declare-fun lq (Nat Nat) MyBool)
  (declare-fun ite1 (MyBool Nat Nat) Nat)
  (declare-fun max (Nat Nat) Nat)
  (declare-fun tf5 (Tree) Nat)
  (declare-fun tf4 (Tree) Nat)
  (declare-fun maximum (Tree) Nat)
  (declare-fun main (Tree) Nat)
  (declare-fun tf7 (Tree) Nat)
  (declare-fun tf6 (Tree) Nat)
  (declare-fun triNew (Tree) Nat)
  (declare-fun mainNew (Tree) Nat)
  (assert (forall ((tv13 Nat)) (= (tf3 (Tip tv13)) (Tip (op tv13)))))
  (assert (forall ((tv15 Tree) (tv14 Tree)) (= (tf3 (Bin tv14 tv15)) (Bin (tf2 tv14) (tf2 tv15)))))
  (assert (forall ((tv10 Tree)) (= (tf2 tv10) (tf3 tv10))))
  (assert (forall ((tv6 Nat)) (= (tf1 (Tip tv6)) (Tip Zero))))
  (assert (forall ((tv8 Tree) (tv7 Tree)) (= (tf1 (Bin tv7 tv8)) (Bin (tf2 (tf0 tv7)) (tf2 (tf0 tv8))))))
  (assert (forall ((tv3 Tree)) (= (tf0 tv3) (tf1 tv3))))
  (assert (forall ((tv1 Tree)) (= (tri tv1) (tf0 tv1))))
  (assert (forall ((x Nat)) (= (plus Zero x) x)))
  (assert (forall ((y Nat) (x Nat)) (= (plus (Succ x) y) (Succ (plus x y)))))
  (assert (forall ((tv16 Nat)) (= (op tv16) (plus (Succ Zero) tv16))))
  (assert (= (lq Zero Zero) MyFalse))
  (assert (forall ((x Nat)) (= (lq Zero (Succ x)) MyTrue)))
  (assert (forall ((x Nat)) (= (lq (Succ x) Zero) MyFalse)))
  (assert (forall ((y Nat) (x Nat)) (= (lq (Succ x) (Succ y)) (lq x y))))
  (assert (forall ((y Nat) (x Nat)) (= (ite1 MyTrue x y) x)))
  (assert (forall ((y Nat) (x Nat)) (= (ite1 MyFalse x y) y)))
  (assert (forall ((tv18 Nat) (tv17 Nat)) (= (max tv17 tv18) (ite1 (lq tv17 tv18) tv18 tv17))))
  (assert (forall ((tv22 Nat)) (= (tf5 (Tip tv22)) tv22)))
  (assert (forall ((tv24 Tree) (tv23 Tree)) (= (tf5 (Bin tv23 tv24)) (max (tf4 tv23) (tf4 tv24)))))
  (assert (forall ((tv20 Tree)) (= (tf4 tv20) (tf5 tv20))))
  (assert (forall ((tv19 Tree)) (= (maximum tv19) (tf4 tv19))))
  (assert (forall ((tv25 Tree)) (= (main tv25) (maximum (tri tv25)))))
  (assert (forall ((tv30 Nat)) (= (tf7 (Tip tv30)) Zero)))
  (assert (forall ((tv32 Tree) (tv31 Tree)) (= (tf7 (Bin tv31 tv32)) (ite1 (lq (tf6 tv31) (tf6 tv32)) (plus (Succ Zero) (tf6 tv32)) (plus (Succ Zero) (tf6 tv31))))))
  (assert (forall ((tv28 Tree)) (= (tf6 tv28) (tf7 tv28))))
  (assert (forall ((tv27 Tree)) (= (triNew tv27) (tf6 tv27))))
  (assert (forall ((tv33 Tree)) (= (mainNew tv33) (triNew tv33))))
  (assert (not (forall ((inp0 Tree)) (= (main inp0) (mainNew inp0)))))
  (check-sat)
