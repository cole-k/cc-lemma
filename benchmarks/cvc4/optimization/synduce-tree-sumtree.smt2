  (declare-datatypes () ((MyBool (MyTrue) (MyFalse))))
  (declare-datatypes () ((Unit (Null))))
  (declare-datatypes () ((Nat (Zero) (Succ (proj_Succ_0 Nat)))))
  (declare-datatypes () ((Tree (Nil (proj_Nil_0 Unit)) (Node (proj_Node_0 Nat) (proj_Node_1 Tree) (proj_Node_2 Tree)))))
  (declare-fun plus (Nat Nat) Nat)
  (declare-fun tf1 (Nat Tree) Nat)
  (declare-fun tf0 (Nat Tree) Nat)
  (declare-fun spec (Tree) Nat)
  (declare-fun tf3 (Tree) Tree)
  (declare-fun tf2 (Tree) Tree)
  (declare-fun repr (Tree) Tree)
  (declare-fun main (Tree) Nat)
  (declare-fun tf5 (Tree) Nat)
  (declare-fun tf4 (Tree) Nat)
  (declare-fun reprNew (Tree) Nat)
  (declare-fun mainNew (Tree) Nat)
  (assert (forall ((x Nat)) (= (plus Zero x) x)))
  (assert (forall ((y Nat) (x Nat)) (= (plus (Succ x) y) (Succ (plus x y)))))
  (assert (forall ((tv5 Unit) (tv4 Nat)) (= (tf1 tv4 (Nil tv5)) tv4)))
  (assert (forall ((tv8 Tree) (tv7 Tree) (tv6 Nat) (tv4 Nat)) (= (tf1 tv4 (Node tv6 tv7 tv8)) (tf0 (plus (tf0 tv4 tv7) tv6) tv8))))
  (assert (forall ((tv2 Tree) (tv1 Nat)) (= (tf0 tv1 tv2) (tf1 tv1 tv2))))
  (assert (forall ((tv0 Tree)) (= (spec tv0) (tf0 Zero tv0))))
  (assert (forall ((tv12 Unit)) (= (tf3 (Nil tv12)) (Nil Null))))
  (assert (forall ((tv15 Tree) (tv14 Tree) (tv13 Nat)) (= (tf3 (Node tv13 tv14 tv15)) (Node tv13 (tf2 tv14) (tf2 tv15)))))
  (assert (forall ((tv10 Tree)) (= (tf2 tv10) (tf3 tv10))))
  (assert (forall ((tv9 Tree)) (= (repr tv9) (tf2 tv9))))
  (assert (forall ((tv16 Tree)) (= (main tv16) (spec (repr tv16)))))
  (assert (forall ((tv20 Unit)) (= (tf5 (Nil tv20)) Zero)))
  (assert (forall ((tv23 Tree) (tv22 Tree) (tv21 Nat)) (= (tf5 (Node tv21 tv22 tv23)) (plus (tf4 tv23) (plus (tf4 tv22) tv21)))))
  (assert (forall ((tv18 Tree)) (= (tf4 tv18) (tf5 tv18))))
  (assert (forall ((tv17 Tree)) (= (reprNew tv17) (tf4 tv17))))
  (assert (forall ((tv24 Tree)) (= (mainNew tv24) (reprNew tv24))))
  (assert (not (forall ((inp0 Tree)) (= (main inp0) (mainNew inp0)))))
  (check-sat)
