  (declare-datatypes () ((MyBool (MyTrue) (MyFalse))))
  (declare-datatypes () ((Nat (Zero) (Succ (proj_Succ_0 Nat)))))
  (declare-datatypes () ((List (Elt (proj_Elt_0 Nat)) (Cons (proj_Cons_0 Nat) (proj_Cons_1 List)))))
  (declare-datatypes () ((MList (Ielt (proj_Ielt_0 Nat)) (Icons (proj_Icons_0 Nat) (proj_Icons_1 Nat) (proj_Icons_2 MList)))))
  (declare-fun tf1 (MList) List)
  (declare-fun tf0 (MList) List)
  (declare-fun repr (MList) List)
  (declare-fun plus (Nat Nat) Nat)
  (declare-fun tf3 (List) Nat)
  (declare-fun tf2 (List) Nat)
  (declare-fun sum (List) Nat)
  (declare-fun myand (MyBool MyBool) MyBool)
  (declare-fun nateq (Nat Nat) MyBool)
  (declare-fun tf5 (MList MList) MyBool)
  (declare-fun tf4 (MList) MyBool)
  (declare-fun ismemo (MList) MyBool)
  (declare-fun lq (Nat Nat) MyBool)
  (declare-fun ite2 (MyBool Nat Nat) Nat)
  (declare-fun max (Nat Nat) Nat)
  (declare-fun tf7 (List List) Nat)
  (declare-fun tf6 (List) Nat)
  (declare-fun spec (List) Nat)
  (declare-fun tf9 (MList MList) MList)
  (declare-fun tf8 (MList) MList)
  (declare-fun target (MList) MList)
  (declare-fun main (MList) Nat)
  (declare-fun tf11 (MList) Nat)
  (declare-fun tf10 (MList) Nat)
  (declare-fun targetNew (MList) Nat)
  (declare-fun mainNew (MList) Nat)
  (assert (forall ((tv3 Nat)) (= (tf1 (Ielt tv3)) (Elt tv3))))
  (assert (forall ((tv6 MList) (tv5 Nat) (tv4 Nat)) (= (tf1 (Icons tv4 tv5 tv6)) (Cons tv4 (tf0 tv6)))))
  (assert (forall ((tv1 MList)) (= (tf0 tv1) (tf1 tv1))))
  (assert (forall ((tv0 MList)) (= (repr tv0) (tf0 tv0))))
  (assert (forall ((x Nat)) (= (plus Zero x) x)))
  (assert (forall ((y Nat) (x Nat)) (= (plus (Succ x) y) (Succ (plus x y)))))
  (assert (forall ((tv10 Nat)) (= (tf3 (Elt tv10)) tv10)))
  (assert (forall ((tv12 List) (tv11 Nat)) (= (tf3 (Cons tv11 tv12)) (plus tv11 (tf2 tv12)))))
  (assert (forall ((tv8 List)) (= (tf2 tv8) (tf3 tv8))))
  (assert (forall ((tv7 List)) (= (sum tv7) (tf2 tv7))))
  (assert (forall ((x MyBool)) (= (myand MyFalse x) MyFalse)))
  (assert (forall ((true MyBool)) (= (myand true MyFalse) MyFalse)))
  (assert (= (myand MyTrue MyTrue) MyTrue))
  (assert (= (nateq Zero Zero) MyTrue))
  (assert (forall ((x Nat)) (= (nateq Zero (Succ x)) MyFalse)))
  (assert (forall ((x Nat)) (= (nateq (Succ x) Zero) MyFalse)))
  (assert (forall ((y Nat) (x Nat)) (= (nateq (Succ x) (Succ y)) (nateq x y))))
  (assert (forall ((tv17 Nat) (tv16 MList)) (= (tf5 tv16 (Ielt tv17)) MyTrue)))
  (assert (forall ((tv19 Nat) (tv18 Nat) (tv20 MList) (tv16 MList)) (= (tf5 tv16 (Icons tv18 tv19 tv20)) (myand (nateq tv19 (sum (repr tv16))) (tf4 tv20)))))
  (assert (forall ((tv14 MList)) (= (tf4 tv14) (tf5 tv14 tv14))))
  (assert (forall ((tv13 MList)) (= (ismemo tv13) (tf4 tv13))))
  (assert (= (lq Zero Zero) MyFalse))
  (assert (forall ((x Nat)) (= (lq Zero (Succ x)) MyTrue)))
  (assert (forall ((x Nat)) (= (lq (Succ x) Zero) MyFalse)))
  (assert (forall ((y Nat) (x Nat)) (= (lq (Succ x) (Succ y)) (lq x y))))
  (assert (forall ((y Nat) (x Nat)) (= (ite2 MyTrue x y) x)))
  (assert (forall ((y Nat) (x Nat)) (= (ite2 MyFalse x y) y)))
  (assert (forall ((tv22 Nat) (tv21 Nat)) (= (max tv21 tv22) (ite2 (lq tv21 tv22) tv22 tv21))))
  (assert (forall ((tv27 Nat) (tv25 List)) (= (tf7 tv25 (Elt tv27)) tv27)))
  (assert (forall ((tv29 List) (tv28 Nat) (tv25 List)) (= (tf7 tv25 (Cons tv28 tv29)) (max (tf6 tv29) (sum tv25)))))
  (assert (forall ((tv24 List)) (= (tf6 tv24) (tf7 tv24 tv24))))
  (assert (forall ((tv23 List)) (= (spec tv23) (tf6 tv23))))
  (assert (forall ((tv34 Nat) (tv33 MList)) (= (tf9 tv33 (Ielt tv34)) tv33)))
  (assert (forall ((tv37 MList) (tv36 Nat) (tv35 Nat) (tv33 MList)) (= (tf9 tv33 (Icons tv35 tv36 tv37)) (Icons tv35 tv36 (tf8 tv37)))))
  (assert (forall ((tv31 MList)) (= (tf8 tv31) (tf9 tv31 tv31))))
  (assert (forall ((tv30 MList)) (= (target tv30) (tf8 tv30))))
  (assert (forall ((tv38 MList)) (= (main tv38) (ite2 (ismemo tv38) (spec (repr (target tv38))) Zero))))
  (assert (forall ((tv42 Nat)) (= (tf11 (Ielt tv42)) tv42)))
  (assert (forall ((tv45 MList) (tv44 Nat) (tv43 Nat)) (= (tf11 (Icons tv43 tv44 tv45)) (ite2 (lq (tf10 tv45) tv44) tv44 (tf10 tv45)))))
  (assert (forall ((tv40 MList)) (= (tf10 tv40) (tf11 tv40))))
  (assert (forall ((tv39 MList)) (= (targetNew tv39) (tf10 tv39))))
  (assert (forall ((tv46 MList)) (= (mainNew tv46) (ite2 (ismemo tv46) (targetNew tv46) Zero))))
  (assert (not (forall ((inp0 MList)) (= (main inp0) (mainNew inp0)))))
  (check-sat)
