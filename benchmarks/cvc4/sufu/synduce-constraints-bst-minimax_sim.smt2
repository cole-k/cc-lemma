  (declare-datatypes () ((MyBool (MyTrue) (MyFalse))))
  (declare-datatypes () ((Nat (Zero) (Succ (proj_Succ_0 Nat)))))
  (declare-datatypes () ((Tree (Leaf (proj_Leaf_0 Nat)) (Node (proj_Node_0 Nat) (proj_Node_1 Tree) (proj_Node_2 Tree)))))
  (declare-fun lq (Nat Nat) MyBool)
  (declare-fun ite1 (MyBool Nat Nat) Nat)
  (declare-fun min (Nat Nat) Nat)
  (declare-fun max (Nat Nat) Nat)
  (declare-fun tf1 (Tree) Nat)
  (declare-fun tf0 (Tree) Nat)
  (declare-fun tmin (Tree) Nat)
  (declare-fun tf3 (Tree) Nat)
  (declare-fun tf2 (Tree) Nat)
  (declare-fun tmax (Tree) Nat)
  (declare-fun myand (MyBool MyBool) MyBool)
  (declare-fun geq (Nat Nat) MyBool)
  (declare-fun leq (Nat Nat) MyBool)
  (declare-fun tf5 (Tree) MyBool)
  (declare-fun tf4 (Tree) MyBool)
  (declare-fun isbst (Tree) MyBool)
  (declare-datatypes () ((Tuple2 (MakeTuple2 (proj_MakeTuple2_0 Nat) (proj_MakeTuple2_1 Nat)))))
  (declare-fun fst2 (Tuple2) Nat)
  (declare-fun snd2 (Tuple2) Nat)
  (declare-fun tf7 (Tree) Tuple2)
  (declare-fun tf6 (Tree) Tuple2)
  (declare-fun spec (Tree) Tuple2)
  (declare-fun tf9 (Tree) Tree)
  (declare-fun tf8 (Tree) Tree)
  (declare-fun target (Tree) Tree)
  (declare-fun ite2 (MyBool Tuple2) Tuple2)
  (declare-fun main (Tree) Tuple2)
  (declare-fun tf11 (Tree) Tuple2)
  (declare-fun tf10 (Tree) Tuple2)
  (declare-fun targetNew (Tree) Tuple2)
  (declare-fun mainNew (Tree) Tuple2)
  (assert (= (lq Zero Zero) MyFalse))
  (assert (forall ((x Nat)) (= (lq Zero (Succ x)) MyTrue)))
  (assert (forall ((x Nat)) (= (lq (Succ x) Zero) MyFalse)))
  (assert (forall ((y Nat) (x Nat)) (= (lq (Succ x) (Succ y)) (lq x y))))
  (assert (forall ((y Nat) (x Nat)) (= (ite1 MyTrue x y) x)))
  (assert (forall ((y Nat) (x Nat)) (= (ite1 MyFalse x y) y)))
  (assert (forall ((tv1 Nat) (tv0 Nat)) (= (min tv0 tv1) (ite1 (lq tv0 tv1) tv0 tv1))))
  (assert (forall ((tv3 Nat) (tv2 Nat)) (= (max tv2 tv3) (ite1 (lq tv2 tv3) tv3 tv2))))
  (assert (forall ((tv7 Nat)) (= (tf1 (Leaf tv7)) tv7)))
  (assert (forall ((tv10 Tree) (tv9 Tree) (tv8 Nat)) (= (tf1 (Node tv8 tv9 tv10)) (min tv8 (min (tf0 tv9) (tf0 tv10))))))
  (assert (forall ((tv5 Tree)) (= (tf0 tv5) (tf1 tv5))))
  (assert (forall ((tv4 Tree)) (= (tmin tv4) (tf0 tv4))))
  (assert (forall ((tv14 Nat)) (= (tf3 (Leaf tv14)) tv14)))
  (assert (forall ((tv16 Tree) (tv17 Tree) (tv15 Nat)) (= (tf3 (Node tv15 tv16 tv17)) (max tv15 (max (tf2 tv16) (tf2 tv17))))))
  (assert (forall ((tv12 Tree)) (= (tf2 tv12) (tf3 tv12))))
  (assert (forall ((tv11 Tree)) (= (tmax tv11) (tf2 tv11))))
  (assert (forall ((x MyBool)) (= (myand MyFalse x) MyFalse)))
  (assert (forall ((true MyBool)) (= (myand true MyFalse) MyFalse)))
  (assert (= (myand MyTrue MyTrue) MyTrue))
  (assert (= (geq Zero Zero) MyTrue))
  (assert (forall ((x Nat)) (= (geq Zero (Succ x)) MyFalse)))
  (assert (forall ((x Nat)) (= (geq (Succ x) Zero) MyTrue)))
  (assert (forall ((y Nat) (x Nat)) (= (geq (Succ x) (Succ y)) (geq x y))))
  (assert (forall ((x Nat)) (= (leq Zero x) MyTrue)))
  (assert (forall ((x Nat)) (= (leq (Succ x) Zero) MyFalse)))
  (assert (forall ((y Nat) (x Nat)) (= (leq (Succ x) (Succ y)) (leq x y))))
  (assert (forall ((tv21 Nat)) (= (tf5 (Leaf tv21)) MyTrue)))
  (assert (forall ((tv24 Tree) (tv23 Tree) (tv22 Nat)) (= (tf5 (Node tv22 tv23 tv24)) (myand (myand (geq tv22 (tmax tv23)) (leq tv22 (tmin tv24))) (myand (tf4 tv23) (tf4 tv24))))))
  (assert (forall ((tv19 Tree)) (= (tf4 tv19) (tf5 tv19))))
  (assert (forall ((tv18 Tree)) (= (isbst tv18) (tf4 tv18))))
  (assert (forall ((x1 Nat) (x0 Nat)) (= (fst2 (MakeTuple2 x0 x1)) x0)))
  (assert (forall ((x1 Nat) (x0 Nat)) (= (snd2 (MakeTuple2 x0 x1)) x1)))
  (assert (forall ((tv28 Nat)) (= (tf7 (Leaf tv28)) (MakeTuple2 tv28 tv28))))
  (assert (forall ((tv31 Tree) (tv30 Tree) (tv29 Nat)) (= (tf7 (Node tv29 tv30 tv31)) (MakeTuple2 (max tv29 (max (fst2 (tf6 tv30)) (fst2 (tf6 tv31)))) (min tv29 (min (snd2 (tf6 tv30)) (snd2 (tf6 tv31))))))))
  (assert (forall ((tv26 Tree)) (= (tf6 tv26) (tf7 tv26))))
  (assert (forall ((tv25 Tree)) (= (spec tv25) (tf6 tv25))))
  (assert (forall ((tv34 Nat)) (= (tf9 (Leaf tv34)) (Leaf tv34))))
  (assert (forall ((tv37 Tree) (tv36 Tree) (tv35 Nat)) (= (tf9 (Node tv35 tv36 tv37)) (Node tv35 tv36 tv37))))
  (assert (forall ((tv33 Tree)) (= (tf8 tv33) (tf9 tv33))))
  (assert (forall ((tv32 Tree)) (= (target tv32) (tf8 tv32))))
  (assert (forall ((x Tuple2)) (= (ite2 MyTrue x) x)))
  (assert (forall ((x Tuple2)) (= (ite2 MyFalse x) (MakeTuple2 Zero Zero))))
  (assert (forall ((tv38 Tree)) (= (main tv38) (ite2 (isbst tv38) (spec (target tv38))))))
  (assert (forall ((tv41 Nat)) (= (tf11 (Leaf tv41)) (MakeTuple2 tv41 tv41))))
  (assert (forall ((tv44 Tree) (tv43 Tree) (tv42 Nat)) (= (tf11 (Node tv42 tv43 tv44)) (MakeTuple2 (tmax tv44) (tmin tv43)))))
  (assert (forall ((tv40 Tree)) (= (tf10 tv40) (tf11 tv40))))
  (assert (forall ((tv39 Tree)) (= (targetNew tv39) (tf10 tv39))))
  (assert (forall ((tv45 Tree)) (= (mainNew tv45) (ite2 (isbst tv45) (MakeTuple2 (fst2 (targetNew tv45)) (snd2 (targetNew tv45)))))))
  (assert (not (forall ((inp0 Tree)) (= (main inp0) (mainNew inp0)))))
  (check-sat)
