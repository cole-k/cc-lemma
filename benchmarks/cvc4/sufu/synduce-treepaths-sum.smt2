  (declare-datatypes () ((MyBool (MyTrue) (MyFalse))))
  (declare-datatypes () ((Unit (Null))))
  (declare-datatypes () ((Nat (Zero) (Succ (proj_Succ_0 Nat)))))
  (declare-datatypes () ((BTree (Empty (proj_Empty_0 Unit)) (Node (proj_Node_0 Nat) (proj_Node_1 BTree) (proj_Node_2 BTree)))))
  (declare-datatypes () ((Zipper (Top (proj_Top_0 Unit)) (Left (proj_Left_0 Nat) (proj_Left_1 BTree) (proj_Left_2 Zipper)) (Right (proj_Right_0 Nat) (proj_Right_1 BTree) (proj_Right_2 Zipper)))))
  (declare-fun plus (Nat Nat) Nat)
  (declare-fun tf1 (BTree) Nat)
  (declare-fun tf0 (BTree) Nat)
  (declare-fun sum (BTree) Nat)
  (declare-fun tf3 (Zipper) BTree)
  (declare-fun tf2 (Zipper) BTree)
  (declare-fun repr (Zipper) BTree)
  (declare-fun main (Zipper) Nat)
  (declare-fun tf5 (Zipper) Nat)
  (declare-fun tf4 (Zipper) Nat)
  (declare-fun reprNew (Zipper) Nat)
  (declare-fun mainNew (Zipper) Nat)
  (assert (forall ((x Nat)) (= (plus Zero x) x)))
  (assert (forall ((y Nat) (x Nat)) (= (plus (Succ x) y) (Succ (plus x y)))))
  (assert (forall ((tv3 Unit)) (= (tf1 (Empty tv3)) Zero)))
  (assert (forall ((tv6 BTree) (tv5 BTree) (tv4 Nat)) (= (tf1 (Node tv4 tv5 tv6)) (plus tv4 (plus (tf0 tv5) (tf0 tv6))))))
  (assert (forall ((tv1 BTree)) (= (tf0 tv1) (tf1 tv1))))
  (assert (forall ((tv0 BTree)) (= (sum tv0) (tf0 tv0))))
  (assert (forall ((tv10 Unit)) (= (tf3 (Top tv10)) (Empty Null))))
  (assert (forall ((tv13 Zipper) (tv12 BTree) (tv11 Nat)) (= (tf3 (Left tv11 tv12 tv13)) (Node tv11 tv12 (tf2 tv13)))))
  (assert (forall ((tv16 Zipper) (tv15 BTree) (tv14 Nat)) (= (tf3 (Right tv14 tv15 tv16)) (Node tv14 (tf2 tv16) tv15))))
  (assert (forall ((tv8 Zipper)) (= (tf2 tv8) (tf3 tv8))))
  (assert (forall ((tv7 Zipper)) (= (repr tv7) (tf2 tv7))))
  (assert (forall ((tv17 Zipper)) (= (main tv17) (sum (repr tv17)))))
  (assert (forall ((tv21 Unit)) (= (tf5 (Top tv21)) Zero)))
  (assert (forall ((tv24 Zipper) (tv23 BTree) (tv22 Nat)) (= (tf5 (Left tv22 tv23 tv24)) (plus (tf4 tv24) (plus tv22 (sum tv23))))))
  (assert (forall ((tv27 Zipper) (tv26 BTree) (tv25 Nat)) (= (tf5 (Right tv25 tv26 tv27)) (plus (tf4 tv27) (plus tv25 (sum tv26))))))
  (assert (forall ((tv19 Zipper)) (= (tf4 tv19) (tf5 tv19))))
  (assert (forall ((tv18 Zipper)) (= (reprNew tv18) (tf4 tv18))))
  (assert (forall ((tv28 Zipper)) (= (mainNew tv28) (reprNew tv28))))
  (assert (not (forall ((inp0 Zipper)) (= (main inp0) (mainNew inp0)))))
  (check-sat)
