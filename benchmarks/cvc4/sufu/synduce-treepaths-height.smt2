  (declare-datatypes () ((MyBool (MyTrue) (MyFalse))))
  (declare-datatypes () ((Unit (Null))))
  (declare-datatypes () ((Nat (Zero) (Succ (proj_Succ_0 Nat)))))
  (declare-datatypes () ((BTree (Empty (proj_Empty_0 Unit)) (Node (proj_Node_0 Nat) (proj_Node_1 BTree) (proj_Node_2 BTree)))))
  (declare-datatypes () ((Zipper (Top (proj_Top_0 Unit)) (Left (proj_Left_0 Nat) (proj_Left_1 BTree) (proj_Left_2 Zipper)) (Right (proj_Right_0 Nat) (proj_Right_1 BTree) (proj_Right_2 Zipper)))))
  (declare-fun lq (Nat Nat) MyBool)
  (declare-fun ite2 (MyBool Nat Nat) Nat)
  (declare-fun max (Nat Nat) Nat)
  (declare-fun plus (Nat Nat) Nat)
  (declare-fun tf1 (BTree) Nat)
  (declare-fun tf0 (BTree) Nat)
  (declare-fun height (BTree) Nat)
  (declare-fun tf3 (Zipper) BTree)
  (declare-fun tf2 (Zipper) BTree)
  (declare-fun repr (Zipper) BTree)
  (declare-fun main (Zipper) Nat)
  (declare-fun tf5 (Zipper) Nat)
  (declare-fun tf4 (Zipper) Nat)
  (declare-fun reprNew (Zipper) Nat)
  (declare-fun mainNew (Zipper) Nat)
  (assert (= (lq Zero Zero) MyFalse))
  (assert (forall ((x Nat)) (= (lq Zero (Succ x)) MyTrue)))
  (assert (forall ((x Nat)) (= (lq (Succ x) Zero) MyFalse)))
  (assert (forall ((y Nat) (x Nat)) (= (lq (Succ x) (Succ y)) (lq x y))))
  (assert (forall ((y Nat) (x Nat)) (= (ite2 MyTrue x y) x)))
  (assert (forall ((y Nat) (x Nat)) (= (ite2 MyFalse x y) y)))
  (assert (forall ((tv1 Nat) (tv0 Nat)) (= (max tv0 tv1) (ite2 (lq tv0 tv1) tv1 tv0))))
  (assert (forall ((x Nat)) (= (plus Zero x) x)))
  (assert (forall ((y Nat) (x Nat)) (= (plus (Succ x) y) (Succ (plus x y)))))
  (assert (forall ((tv5 Unit)) (= (tf1 (Empty tv5)) Zero)))
  (assert (forall ((tv8 BTree) (tv7 BTree) (tv6 Nat)) (= (tf1 (Node tv6 tv7 tv8)) (plus (Succ Zero) (max (tf0 tv7) (tf0 tv8))))))
  (assert (forall ((tv3 BTree)) (= (tf0 tv3) (tf1 tv3))))
  (assert (forall ((tv2 BTree)) (= (height tv2) (tf0 tv2))))
  (assert (forall ((tv12 Unit)) (= (tf3 (Top tv12)) (Empty Null))))
  (assert (forall ((tv15 Zipper) (tv14 BTree) (tv13 Nat)) (= (tf3 (Left tv13 tv14 tv15)) (Node tv13 tv14 (tf2 tv15)))))
  (assert (forall ((tv18 Zipper) (tv17 BTree) (tv16 Nat)) (= (tf3 (Right tv16 tv17 tv18)) (Node tv16 (tf2 tv18) tv17))))
  (assert (forall ((tv10 Zipper)) (= (tf2 tv10) (tf3 tv10))))
  (assert (forall ((tv9 Zipper)) (= (repr tv9) (tf2 tv9))))
  (assert (forall ((tv19 Zipper)) (= (main tv19) (height (repr tv19)))))
  (assert (forall ((tv23 Unit)) (= (tf5 (Top tv23)) Zero)))
  (assert (forall ((tv25 BTree) (tv26 Zipper) (tv24 Nat)) (= (tf5 (Left tv24 tv25 tv26)) (plus (Succ Zero) (max (height tv25) (tf4 tv26))))))
  (assert (forall ((tv29 Zipper) (tv28 BTree) (tv27 Nat)) (= (tf5 (Right tv27 tv28 tv29)) (plus (Succ Zero) (max (height tv28) (tf4 tv29))))))
  (assert (forall ((tv21 Zipper)) (= (tf4 tv21) (tf5 tv21))))
  (assert (forall ((tv20 Zipper)) (= (reprNew tv20) (tf4 tv20))))
  (assert (forall ((tv30 Zipper)) (= (mainNew tv30) (reprNew tv30))))
  (assert (not (forall ((inp0 Zipper)) (= (main inp0) (mainNew inp0)))))
  (check-sat)
