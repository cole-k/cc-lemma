  (declare-datatypes () ((MyBool (MyTrue) (MyFalse))))
  (declare-datatypes () ((Nat (Zero) (Succ (proj_Succ_0 Nat)))))
  (declare-datatypes () ((List (Elt (proj_Elt_0 Nat)) (Cons (proj_Cons_0 Nat) (proj_Cons_1 List)))))
  (declare-datatypes () ((NList (Line (proj_Line_0 List)) (Ncons (proj_Ncons_0 List) (proj_Ncons_1 NList)))))
  (declare-fun lq (Nat Nat) MyBool)
  (declare-fun ite2 (MyBool Nat Nat) Nat)
  (declare-fun max (Nat Nat) Nat)
  (declare-fun gq (Nat Nat) MyBool)
  (declare-fun min (Nat Nat) Nat)
  (declare-datatypes () ((Tuple3 (MakeTuple3 (proj_MakeTuple3_0 Nat) (proj_MakeTuple3_1 Nat)))))
  (declare-fun fst3 (Tuple3) Nat)
  (declare-fun snd3 (Tuple3) Nat)
  (declare-fun tf1 (List) Tuple3)
  (declare-fun tf0 (List) Tuple3)
  (declare-fun interval (List) Tuple3)
  (declare-datatypes () ((Tuple4 (MakeTuple4 (proj_MakeTuple4_0 Nat) (proj_MakeTuple4_1 Nat) (proj_MakeTuple4_2 MyBool)))))
  (declare-fun fst4 (Tuple4) Nat)
  (declare-fun snd4 (Tuple4) Nat)
  (declare-fun myand (MyBool MyBool) MyBool)
  (declare-fun third4 (Tuple4) MyBool)
  (declare-fun leq (Nat Nat) MyBool)
  (declare-fun tf3 (NList) Tuple4)
  (declare-fun tf2 (NList) Tuple4)
  (declare-fun spec (NList) MyBool)
  (declare-fun tf5 (NList NList) NList)
  (declare-fun tf4 (NList) NList)
  (declare-fun target (NList) NList)
  (declare-fun main (NList) MyBool)
  (declare-datatypes () ((Tuple5 (MakeTuple5 (proj_MakeTuple5_0 MyBool) (proj_MakeTuple5_1 Nat) (proj_MakeTuple5_2 Nat)))))
  (declare-fun snd5 (Tuple5) Nat)
  (declare-fun fst5 (Tuple5) MyBool)
  (declare-fun third5 (Tuple5) Nat)
  (declare-fun tf7 (NList) Tuple5)
  (declare-fun tf6 (NList) Tuple5)
  (declare-fun targetNew (NList) Tuple5)
  (declare-fun mainNew (NList) MyBool)
  (assert (= (lq Zero Zero) MyFalse))
  (assert (forall ((x Nat)) (= (lq Zero (Succ x)) MyTrue)))
  (assert (forall ((x Nat)) (= (lq (Succ x) Zero) MyFalse)))
  (assert (forall ((y Nat) (x Nat)) (= (lq (Succ x) (Succ y)) (lq x y))))
  (assert (forall ((y Nat) (x Nat)) (= (ite2 MyTrue x y) x)))
  (assert (forall ((y Nat) (x Nat)) (= (ite2 MyFalse x y) y)))
  (assert (forall ((tv1 Nat) (tv0 Nat)) (= (max tv0 tv1) (ite2 (lq tv0 tv1) tv1 tv0))))
  (assert (forall ((x Nat)) (= (gq Zero x) MyFalse)))
  (assert (forall ((x Nat)) (= (gq (Succ x) Zero) MyTrue)))
  (assert (forall ((y Nat) (x Nat)) (= (gq (Succ x) (Succ y)) (gq x y))))
  (assert (forall ((tv3 Nat) (tv2 Nat)) (= (min tv2 tv3) (ite2 (gq tv2 tv3) tv3 tv2))))
  (assert (forall ((x1 Nat) (x0 Nat)) (= (fst3 (MakeTuple3 x0 x1)) x0)))
  (assert (forall ((x1 Nat) (x0 Nat)) (= (snd3 (MakeTuple3 x0 x1)) x1)))
  (assert (forall ((tv7 Nat)) (= (tf1 (Elt tv7)) (MakeTuple3 tv7 tv7))))
  (assert (forall ((tv9 List) (tv8 Nat)) (= (tf1 (Cons tv8 tv9)) (MakeTuple3 (min tv8 (fst3 (tf0 tv9))) (max tv8 (snd3 (tf0 tv9)))))))
  (assert (forall ((tv5 List)) (= (tf0 tv5) (tf1 tv5))))
  (assert (forall ((tv4 List)) (= (interval tv4) (tf0 tv4))))
  (assert (forall ((x2 MyBool) (x1 Nat) (x0 Nat)) (= (fst4 (MakeTuple4 x0 x1 x2)) x0)))
  (assert (forall ((x2 MyBool) (x1 Nat) (x0 Nat)) (= (snd4 (MakeTuple4 x0 x1 x2)) x1)))
  (assert (forall ((x MyBool)) (= (myand MyFalse x) MyFalse)))
  (assert (forall ((true MyBool)) (= (myand true MyFalse) MyFalse)))
  (assert (= (myand MyTrue MyTrue) MyTrue))
  (assert (forall ((x2 MyBool) (x1 Nat) (x0 Nat)) (= (third4 (MakeTuple4 x0 x1 x2)) x2)))
  (assert (forall ((x Nat)) (= (leq Zero x) MyTrue)))
  (assert (forall ((x Nat)) (= (leq (Succ x) Zero) MyFalse)))
  (assert (forall ((y Nat) (x Nat)) (= (leq (Succ x) (Succ y)) (leq x y))))
  (assert (forall ((tv13 List)) (= (tf3 (Line tv13)) (MakeTuple4 (fst3 (interval tv13)) (snd3 (interval tv13)) MyTrue))))
  (assert (forall ((tv15 NList) (tv14 List)) (= (tf3 (Ncons tv14 tv15)) (MakeTuple4 (min (fst4 (tf2 tv15)) (fst3 (interval tv14))) (max (snd4 (tf2 tv15)) (snd3 (interval tv14))) (myand (third4 (tf2 tv15)) (myand (leq (fst4 (tf2 tv15)) (fst3 (interval tv14))) (leq (snd4 (tf2 tv15)) (snd3 (interval tv14)))))))))
  (assert (forall ((tv11 NList)) (= (tf2 tv11) (tf3 tv11))))
  (assert (forall ((tv10 NList)) (= (spec tv10) (third4 (tf2 tv10)))))
  (assert (forall ((tv20 List) (tv19 NList)) (= (tf5 tv19 (Line tv20)) tv19)))
  (assert (forall ((tv22 NList) (tv21 List) (tv19 NList)) (= (tf5 tv19 (Ncons tv21 tv22)) (Ncons tv21 (tf4 tv22)))))
  (assert (forall ((tv17 NList)) (= (tf4 tv17) (tf5 tv17 tv17))))
  (assert (forall ((tv16 NList)) (= (target tv16) (tf4 tv16))))
  (assert (forall ((tv23 NList)) (= (main tv23) (spec (target tv23)))))
  (assert (forall ((x2 Nat) (x1 Nat) (x0 MyBool)) (= (snd5 (MakeTuple5 x0 x1 x2)) x1)))
  (assert (forall ((x2 Nat) (x1 Nat) (x0 MyBool)) (= (fst5 (MakeTuple5 x0 x1 x2)) x0)))
  (assert (forall ((x2 Nat) (x1 Nat) (x0 MyBool)) (= (third5 (MakeTuple5 x0 x1 x2)) x2)))
  (assert (forall ((tv27 List)) (= (tf7 (Line tv27)) (MakeTuple5 MyTrue (fst3 (interval tv27)) (snd3 (interval tv27))))))
  (assert (forall ((tv29 NList) (tv28 List)) (= (tf7 (Ncons tv28 tv29)) (MakeTuple5 (myand (myand (leq (snd5 (tf6 tv29)) (fst3 (interval tv28))) (fst5 (tf6 tv29))) (leq (third5 (tf6 tv29)) (snd3 (interval tv28)))) (snd5 (tf6 tv29)) (snd3 (interval tv28))))))
  (assert (forall ((tv25 NList)) (= (tf6 tv25) (tf7 tv25))))
  (assert (forall ((tv24 NList)) (= (targetNew tv24) (tf6 tv24))))
  (assert (forall ((tv30 NList)) (= (mainNew tv30) (fst5 (targetNew tv30)))))
  (assert (not (forall ((inp0 NList)) (= (main inp0) (mainNew inp0)))))
  (check-sat)
