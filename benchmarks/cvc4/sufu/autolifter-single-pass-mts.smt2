  (declare-datatypes () ((MyBool (MyTrue) (MyFalse))))
  (declare-datatypes () ((Nat (Zero) (Succ (proj_Succ_0 Nat)))))
  (declare-datatypes () ((Unit (Null))))
  (declare-datatypes () ((List (Cons (proj_Cons_0 Nat) (proj_Cons_1 List)) (Nil (proj_Nil_0 Unit)))))
  (declare-fun tf1 (List List) List)
  (declare-fun tf0 (List) List)
  (declare-fun tf2 (List) Nat)
  (declare-fun singlepass (List) Nat)
  (declare-fun lq (Nat Nat) MyBool)
  (declare-fun ite1 (MyBool Nat Nat) Nat)
  (declare-fun max (Nat Nat) Nat)
  (declare-datatypes () ((Tuple2 (MakeTuple2 (proj_MakeTuple2_0 Nat) (proj_MakeTuple2_1 Nat)))))
  (declare-fun plus (Nat Nat) Nat)
  (declare-fun snd2 (Tuple2) Nat)
  (declare-fun fst2 (Tuple2) Nat)
  (declare-fun tf4 (List) Tuple2)
  (declare-fun tf3 (List) Tuple2)
  (declare-fun mts (List) Nat)
  (declare-fun main (List) Nat)
  (declare-fun tf6 (List) Tuple2)
  (declare-fun tf5 (List) Tuple2)
  (declare-fun tf7 (List) Nat)
  (declare-fun singlepassNew (List) Nat)
  (declare-fun mainNew (List) Nat)
  (assert (forall ((tv5 Unit) (tv4 List)) (= (tf1 tv4 (Nil tv5)) tv4)))
  (assert (forall ((tv7 List) (tv6 Nat) (tv4 List)) (= (tf1 tv4 (Cons tv6 tv7)) (Cons tv6 (tf0 tv7)))))
  (assert (forall ((tv2 List)) (= (tf0 tv2) (tf1 tv2 tv2))))
  (assert (forall ((tv9 List)) (= (tf2 tv9) (mts (tf0 tv9)))))
  (assert (forall ((tv1 List)) (= (singlepass tv1) (tf2 tv1))))
  (assert (= (lq Zero Zero) MyFalse))
  (assert (forall ((x Nat)) (= (lq Zero (Succ x)) MyTrue)))
  (assert (forall ((x Nat)) (= (lq (Succ x) Zero) MyFalse)))
  (assert (forall ((y Nat) (x Nat)) (= (lq (Succ x) (Succ y)) (lq x y))))
  (assert (forall ((y Nat) (x Nat)) (= (ite1 MyTrue x y) x)))
  (assert (forall ((y Nat) (x Nat)) (= (ite1 MyFalse x y) y)))
  (assert (forall ((tv11 Nat) (tv10 Nat)) (= (max tv10 tv11) (ite1 (lq tv10 tv11) tv11 tv10))))
  (assert (forall ((x Nat)) (= (plus Zero x) x)))
  (assert (forall ((y Nat) (x Nat)) (= (plus (Succ x) y) (Succ (plus x y)))))
  (assert (forall ((x1 Nat) (x0 Nat)) (= (snd2 (MakeTuple2 x0 x1)) x1)))
  (assert (forall ((x1 Nat) (x0 Nat)) (= (fst2 (MakeTuple2 x0 x1)) x0)))
  (assert (forall ((tv15 Unit)) (= (tf4 (Nil tv15)) (MakeTuple2 Zero Zero))))
  (assert (forall ((tv17 List) (tv16 Nat)) (= (tf4 (Cons tv16 tv17)) (MakeTuple2 (max (plus (snd2 (tf3 tv17)) tv16) (fst2 (tf3 tv17))) (plus (snd2 (tf3 tv17)) tv16)))))
  (assert (forall ((tv13 List)) (= (tf3 tv13) (tf4 tv13))))
  (assert (forall ((tv12 List)) (= (mts tv12) (fst2 (tf3 tv12)))))
  (assert (forall ((tv18 List)) (= (main tv18) (singlepass tv18))))
  (assert (forall ((tv23 Unit)) (= (tf6 (Nil tv23)) (MakeTuple2 Zero Zero))))
  (assert (forall ((tv25 List) (tv24 Nat)) (= (tf6 (Cons tv24 tv25)) (MakeTuple2 (ite1 (lq (plus tv24 (snd2 (tf5 tv25))) (fst2 (tf5 tv25))) (fst2 (tf5 tv25)) (plus tv24 (snd2 (tf5 tv25)))) (plus tv24 (snd2 (tf5 tv25)))))))
  (assert (forall ((tv21 List)) (= (tf5 tv21) (tf6 tv21))))
  (assert (forall ((tv26 List)) (= (tf7 tv26) (fst2 (tf5 tv26)))))
  (assert (forall ((tv20 List)) (= (singlepassNew tv20) (tf7 tv20))))
  (assert (forall ((tv27 List)) (= (mainNew tv27) (singlepassNew tv27))))
  (assert (not (forall ((inp0 List)) (= (main inp0) (mainNew inp0)))))
  (check-sat)
