  (declare-datatypes () ((MyBool (MyTrue) (MyFalse))))
  (declare-datatypes () ((Nat (Zero) (Succ (proj_Succ_0 Nat)))))
  (declare-datatypes () ((Tree (Leaf (proj_Leaf_0 Nat)) (Node (proj_Node_0 Nat) (proj_Node_1 Tree) (proj_Node_2 Tree)))))
  (declare-datatypes () ((Tuple1 (MakeTuple1 (proj_MakeTuple1_0 Nat) (proj_MakeTuple1_1 MyBool)))))
  (declare-fun myand (MyBool MyBool) MyBool)
  (declare-fun lq (Nat Nat) MyBool)
  (declare-fun fst1 (Tuple1) Nat)
  (declare-fun snd1 (Tuple1) MyBool)
  (declare-fun tf1 (Tree) Tuple1)
  (declare-fun tf0 (Tree) Tuple1)
  (declare-fun spec (Tree) MyBool)
  (declare-fun tf3 (Tree) Tree)
  (declare-fun tf2 (Tree) Tree)
  (declare-fun repr (Tree) Tree)
  (declare-fun main (Tree) MyBool)
  (declare-datatypes () ((Tuple2 (MakeTuple2 (proj_MakeTuple2_0 MyBool) (proj_MakeTuple2_1 Nat)))))
  (declare-fun snd2 (Tuple2) Nat)
  (declare-fun fst2 (Tuple2) MyBool)
  (declare-fun tf5 (Tree) Tuple2)
  (declare-fun tf4 (Tree) Tuple2)
  (declare-fun reprNew (Tree) Tuple2)
  (declare-fun mainNew (Tree) MyBool)
  (assert (forall ((x MyBool)) (= (myand MyFalse x) MyFalse)))
  (assert (forall ((true MyBool)) (= (myand true MyFalse) MyFalse)))
  (assert (= (myand MyTrue MyTrue) MyTrue))
  (assert (= (lq Zero Zero) MyFalse))
  (assert (forall ((x Nat)) (= (lq Zero (Succ x)) MyTrue)))
  (assert (forall ((x Nat)) (= (lq (Succ x) Zero) MyFalse)))
  (assert (forall ((y Nat) (x Nat)) (= (lq (Succ x) (Succ y)) (lq x y))))
  (assert (forall ((x1 MyBool) (x0 Nat)) (= (fst1 (MakeTuple1 x0 x1)) x0)))
  (assert (forall ((x1 MyBool) (x0 Nat)) (= (snd1 (MakeTuple1 x0 x1)) x1)))
  (assert (forall ((tv3 Nat)) (= (tf1 (Leaf tv3)) (MakeTuple1 tv3 MyTrue))))
  (assert (forall ((tv6 Tree) (tv5 Tree) (tv4 Nat)) (= (tf1 (Node tv4 tv5 tv6)) (MakeTuple1 tv4 (myand (myand (myand (lq (fst1 (tf0 tv5)) tv4) (lq tv4 (fst1 (tf0 tv6)))) (snd1 (tf0 tv5))) (snd1 (tf0 tv6)))))))
  (assert (forall ((tv1 Tree)) (= (tf0 tv1) (tf1 tv1))))
  (assert (forall ((tv0 Tree)) (= (spec tv0) (snd1 (tf0 tv0)))))
  (assert (forall ((tv10 Nat)) (= (tf3 (Leaf tv10)) (Leaf tv10))))
  (assert (forall ((tv13 Tree) (tv12 Tree) (tv11 Nat)) (= (tf3 (Node tv11 tv12 tv13)) (Node tv11 (tf2 tv12) (tf2 tv13)))))
  (assert (forall ((tv8 Tree)) (= (tf2 tv8) (tf3 tv8))))
  (assert (forall ((tv7 Tree)) (= (repr tv7) (tf2 tv7))))
  (assert (forall ((tv14 Tree)) (= (main tv14) (spec (repr tv14)))))
  (assert (forall ((x1 Nat) (x0 MyBool)) (= (snd2 (MakeTuple2 x0 x1)) x1)))
  (assert (forall ((x1 Nat) (x0 MyBool)) (= (fst2 (MakeTuple2 x0 x1)) x0)))
  (assert (forall ((tv18 Nat)) (= (tf5 (Leaf tv18)) (MakeTuple2 MyTrue tv18))))
  (assert (forall ((tv21 Tree) (tv20 Tree) (tv19 Nat)) (= (tf5 (Node tv19 tv20 tv21)) (MakeTuple2 (myand (myand (myand (lq (snd2 (tf4 tv20)) tv19) (fst2 (tf4 tv21))) (fst2 (tf4 tv20))) (lq tv19 (snd2 (tf4 tv21)))) tv19))))
  (assert (forall ((tv16 Tree)) (= (tf4 tv16) (tf5 tv16))))
  (assert (forall ((tv15 Tree)) (= (reprNew tv15) (tf4 tv15))))
  (assert (forall ((tv22 Tree)) (= (mainNew tv22) (fst2 (reprNew tv22)))))
  (assert (not (forall ((inp0 Tree)) (= (main inp0) (mainNew inp0)))))
  (check-sat)
