  (declare-datatypes () ((MyBool (MyTrue) (MyFalse))))
  (declare-datatypes () ((List (Elt (proj_Elt_0 MyBool)) (Cons (proj_Cons_0 MyBool) (proj_Cons_1 List)))))
  (declare-datatypes () ((CList (Single (proj_Single_0 MyBool)) (Concat (proj_Concat_0 CList) (proj_Concat_1 CList)))))
  (declare-fun tf1 (List List) List)
  (declare-fun tf0 (List List) List)
  (declare-fun catlist (List List) List)
  (declare-fun tf3 (CList) List)
  (declare-fun tf2 (CList) List)
  (declare-fun repr (CList) List)
  (declare-datatypes () ((Tuple2 (MakeTuple2 (proj_MakeTuple2_0 MyBool) (proj_MakeTuple2_1 MyBool) (proj_MakeTuple2_2 MyBool)))))
  (declare-fun myand (MyBool MyBool) MyBool)
  (declare-fun fst2 (Tuple2) MyBool)
  (declare-fun snd2 (Tuple2) MyBool)
  (declare-fun myor (MyBool MyBool) MyBool)
  (declare-fun mynot (MyBool) MyBool)
  (declare-fun third2 (Tuple2) MyBool)
  (declare-fun tf5 (List) Tuple2)
  (declare-fun tf4 (List) Tuple2)
  (declare-fun spec (List) MyBool)
  (declare-fun main (CList) MyBool)
  (declare-fun tf7 (CList) Tuple2)
  (declare-fun tf6 (CList) Tuple2)
  (declare-fun reprNew (CList) Tuple2)
  (declare-fun mainNew (CList) MyBool)
  (assert (forall ((tv6 MyBool) (tv5 List)) (= (tf1 tv5 (Elt tv6)) (Cons tv6 tv5))))
  (assert (forall ((tv8 List) (tv7 MyBool) (tv5 List)) (= (tf1 tv5 (Cons tv7 tv8)) (Cons tv7 (tf0 tv8 tv5)))))
  (assert (forall ((tv3 List) (tv2 List)) (= (tf0 tv2 tv3) (tf1 tv3 tv2))))
  (assert (forall ((tv1 List) (tv0 List)) (= (catlist tv0 tv1) (tf0 tv0 tv1))))
  (assert (forall ((tv12 MyBool)) (= (tf3 (Single tv12)) (Elt tv12))))
  (assert (forall ((tv14 CList) (tv13 CList)) (= (tf3 (Concat tv13 tv14)) (catlist (tf2 tv13) (tf2 tv14)))))
  (assert (forall ((tv10 CList)) (= (tf2 tv10) (tf3 tv10))))
  (assert (forall ((tv9 CList)) (= (repr tv9) (tf2 tv9))))
  (assert (forall ((x MyBool)) (= (myand MyFalse x) MyFalse)))
  (assert (forall ((true MyBool)) (= (myand true MyFalse) MyFalse)))
  (assert (= (myand MyTrue MyTrue) MyTrue))
  (assert (forall ((x2 MyBool) (x1 MyBool) (x0 MyBool)) (= (fst2 (MakeTuple2 x0 x1 x2)) x0)))
  (assert (forall ((x2 MyBool) (x1 MyBool) (x0 MyBool)) (= (snd2 (MakeTuple2 x0 x1 x2)) x1)))
  (assert (forall ((x MyBool)) (= (myor MyTrue x) MyTrue)))
  (assert (forall ((false MyBool)) (= (myor false MyTrue) MyTrue)))
  (assert (= (myor MyFalse MyFalse) MyFalse))
  (assert (= (mynot MyTrue) MyFalse))
  (assert (= (mynot MyFalse) MyTrue))
  (assert (forall ((x2 MyBool) (x1 MyBool) (x0 MyBool)) (= (third2 (MakeTuple2 x0 x1 x2)) x2)))
  (assert (forall ((tv18 MyBool)) (= (tf5 (Elt tv18)) (MakeTuple2 tv18 MyTrue tv18))))
  (assert (forall ((tv20 List) (tv19 MyBool)) (= (tf5 (Cons tv19 tv20)) (MakeTuple2 (myand (fst2 (tf4 tv20)) tv19) (myand (snd2 (tf4 tv20)) (myor (fst2 (tf4 tv20)) (mynot tv19))) (third2 (tf4 tv20))))))
  (assert (forall ((tv16 List)) (= (tf4 tv16) (tf5 tv16))))
  (assert (forall ((tv15 List)) (= (spec tv15) (snd2 (tf4 tv15)))))
  (assert (forall ((tv21 CList)) (= (main tv21) (spec (repr tv21)))))
  (assert (forall ((tv25 MyBool)) (= (tf7 (Single tv25)) (MakeTuple2 MyTrue tv25 tv25))))
  (assert (forall ((tv27 CList) (tv26 CList)) (= (tf7 (Concat tv26 tv27)) (MakeTuple2 (myor (myand (myand (mynot (third2 (tf6 tv26))) (fst2 (tf6 tv26))) (fst2 (tf6 tv27))) (myand (myand (fst2 (tf6 tv26)) (fst2 (tf6 tv27))) (snd2 (tf6 tv27)))) (snd2 (tf6 tv26)) (third2 (tf6 tv27))))))
  (assert (forall ((tv23 CList)) (= (tf6 tv23) (tf7 tv23))))
  (assert (forall ((tv22 CList)) (= (reprNew tv22) (tf6 tv22))))
  (assert (forall ((tv28 CList)) (= (mainNew tv28) (fst2 (reprNew tv28)))))
  (assert (not (forall ((inp0 CList)) (= (main inp0) (mainNew inp0)))))
  (check-sat)
