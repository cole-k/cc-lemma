  (declare-datatypes () ((MyBool (MyTrue) (MyFalse))))
  (declare-datatypes () ((Nat (Zero) (Succ (proj_Succ_0 Nat)))))
  (declare-datatypes () ((List (Elt (proj_Elt_0 Nat)) (Cons (proj_Cons_0 Nat) (proj_Cons_1 List)))))
  (declare-datatypes () ((CList (Single (proj_Single_0 Nat)) (Concat (proj_Concat_0 CList) (proj_Concat_1 CList)))))
  (declare-fun gq (Nat Nat) MyBool)
  (declare-fun ite2 (MyBool Nat Nat) Nat)
  (declare-fun max (Nat Nat) Nat)
  (declare-datatypes () ((Tuple3 (MakeTuple3 (proj_MakeTuple3_0 Nat) (proj_MakeTuple3_1 Nat)))))
  (declare-fun fst3 (Tuple3) Nat)
  (declare-fun plus (Nat Nat) Nat)
  (declare-fun snd3 (Tuple3) Nat)
  (declare-fun nateq (Nat Nat) MyBool)
  (declare-fun tf1 (List) Tuple3)
  (declare-fun tf0 (List) Tuple3)
  (declare-fun spec (List) Nat)
  (declare-fun tf3 (List List) List)
  (declare-fun tf2 (List List) List)
  (declare-fun cat (List List) List)
  (declare-fun tf5 (CList) List)
  (declare-fun tf4 (CList) List)
  (declare-fun repr (CList) List)
  (declare-fun main (CList) Nat)
  (declare-fun lq (Nat Nat) MyBool)
  (declare-fun tf7 (CList) Tuple3)
  (declare-fun tf6 (CList) Tuple3)
  (declare-fun reprNew (CList) Tuple3)
  (declare-fun mainNew (CList) Nat)
  (assert (forall ((x Nat)) (= (gq Zero x) MyFalse)))
  (assert (forall ((x Nat)) (= (gq (Succ x) Zero) MyTrue)))
  (assert (forall ((y Nat) (x Nat)) (= (gq (Succ x) (Succ y)) (gq x y))))
  (assert (forall ((y Nat) (x Nat)) (= (ite2 MyTrue x y) x)))
  (assert (forall ((y Nat) (x Nat)) (= (ite2 MyFalse x y) y)))
  (assert (forall ((tv1 Nat) (tv0 Nat)) (= (max tv0 tv1) (ite2 (gq tv0 tv1) tv0 tv1))))
  (assert (forall ((x1 Nat) (x0 Nat)) (= (fst3 (MakeTuple3 x0 x1)) x0)))
  (assert (forall ((x Nat)) (= (plus Zero x) x)))
  (assert (forall ((y Nat) (x Nat)) (= (plus (Succ x) y) (Succ (plus x y)))))
  (assert (forall ((x1 Nat) (x0 Nat)) (= (snd3 (MakeTuple3 x0 x1)) x1)))
  (assert (= (nateq Zero Zero) MyTrue))
  (assert (forall ((x Nat)) (= (nateq Zero (Succ x)) MyFalse)))
  (assert (forall ((x Nat)) (= (nateq (Succ x) Zero) MyFalse)))
  (assert (forall ((y Nat) (x Nat)) (= (nateq (Succ x) (Succ y)) (nateq x y))))
  (assert (forall ((tv5 Nat)) (= (tf1 (Elt tv5)) (MakeTuple3 tv5 (Succ Zero)))))
  (assert (forall ((tv7 List) (tv6 Nat)) (= (tf1 (Cons tv6 tv7)) (MakeTuple3 (max (fst3 (tf0 tv7)) tv6) (ite2 (gq tv6 (fst3 (tf0 tv7))) (Succ Zero) (plus (snd3 (tf0 tv7)) (ite2 (nateq tv6 (fst3 (tf0 tv7))) (Succ Zero) Zero)))))))
  (assert (forall ((tv3 List)) (= (tf0 tv3) (tf1 tv3))))
  (assert (forall ((tv2 List)) (= (spec tv2) (snd3 (tf0 tv2)))))
  (assert (forall ((tv14 Nat) (tv13 List)) (= (tf3 tv13 (Elt tv14)) (Cons tv14 tv13))))
  (assert (forall ((tv16 List) (tv15 Nat) (tv13 List)) (= (tf3 tv13 (Cons tv15 tv16)) (Cons tv15 (tf2 tv16 tv13)))))
  (assert (forall ((tv11 List) (tv10 List)) (= (tf2 tv10 tv11) (tf3 tv11 tv10))))
  (assert (forall ((tv9 List) (tv8 List)) (= (cat tv8 tv9) (tf2 tv8 tv9))))
  (assert (forall ((tv20 Nat)) (= (tf5 (Single tv20)) (Elt tv20))))
  (assert (forall ((tv22 CList) (tv21 CList)) (= (tf5 (Concat tv21 tv22)) (cat (tf4 tv21) (tf4 tv22)))))
  (assert (forall ((tv18 CList)) (= (tf4 tv18) (tf5 tv18))))
  (assert (forall ((tv17 CList)) (= (repr tv17) (tf4 tv17))))
  (assert (forall ((tv23 CList)) (= (main tv23) (spec (repr tv23)))))
  (assert (= (lq Zero Zero) MyFalse))
  (assert (forall ((x Nat)) (= (lq Zero (Succ x)) MyTrue)))
  (assert (forall ((x Nat)) (= (lq (Succ x) Zero) MyFalse)))
  (assert (forall ((y Nat) (x Nat)) (= (lq (Succ x) (Succ y)) (lq x y))))
  (assert (forall ((tv27 Nat)) (= (tf7 (Single tv27)) (MakeTuple3 (Succ Zero) tv27))))
  (assert (forall ((tv29 CList) (tv28 CList)) (= (tf7 (Concat tv28 tv29)) (MakeTuple3 (ite2 (nateq (snd3 (tf6 tv29)) (snd3 (tf6 tv28))) (plus (fst3 (tf6 tv29)) (fst3 (tf6 tv28))) (ite2 (lq (snd3 (tf6 tv29)) (snd3 (tf6 tv28))) (fst3 (tf6 tv28)) (fst3 (tf6 tv29)))) (max (snd3 (tf6 tv29)) (snd3 (tf6 tv28)))))))
  (assert (forall ((tv25 CList)) (= (tf6 tv25) (tf7 tv25))))
  (assert (forall ((tv24 CList)) (= (reprNew tv24) (tf6 tv24))))
  (assert (forall ((tv30 CList)) (= (mainNew tv30) (fst3 (reprNew tv30)))))
  (assert (not (forall ((inp0 CList)) (= (main inp0) (mainNew inp0)))))
  (check-sat)
