  (declare-datatypes () ((MyBool (MyTrue) (MyFalse))))
  (declare-datatypes () ((Unit (Null))))
  (declare-datatypes () ((Nat (Zero) (Succ (proj_Succ_0 Nat)))))
  (declare-datatypes () ((CList (Cnil (proj_Cnil_0 Unit)) (Single (proj_Single_0 Nat)) (Concat (proj_Concat_0 CList) (proj_Concat_1 CList)))))
  (declare-datatypes () ((List (Nil (proj_Nil_0 Unit)) (Cons (proj_Cons_0 Nat) (proj_Cons_1 List)))))
  (declare-fun tf1 (List List) List)
  (declare-fun tf0 (List List) List)
  (declare-fun cat (List List) List)
  (declare-fun tf3 (CList) List)
  (declare-fun tf2 (CList) List)
  (declare-fun repr (CList) List)
  (declare-fun lq (Nat Nat) MyBool)
  (declare-fun ite2 (MyBool Nat Nat) Nat)
  (declare-fun max (Nat) Nat)
  (declare-datatypes () ((Tuple3 (MakeTuple3 (proj_MakeTuple3_0 Nat) (proj_MakeTuple3_1 Nat)))))
  (declare-fun plus (Nat Nat) Nat)
  (declare-fun fst3 (Tuple3) Nat)
  (declare-fun snd3 (Tuple3) Nat)
  (declare-fun tf5 (List) Tuple3)
  (declare-fun tf4 (List) Tuple3)
  (declare-fun spec (List) Nat)
  (declare-fun main (CList) Nat)
  (declare-fun tf7 (CList) Tuple3)
  (declare-fun tf6 (CList) Tuple3)
  (declare-fun reprNew (CList) Tuple3)
  (declare-fun mainNew (CList) Nat)
  (assert (forall ((tv7 List) (tv6 Nat) (tv5 List)) (= (tf1 tv5 (Cons tv6 tv7)) (Cons tv6 (tf0 tv7 tv5)))))
  (assert (forall ((tv8 Unit) (tv5 List)) (= (tf1 tv5 (Nil tv8)) tv5)))
  (assert (forall ((tv3 List) (tv2 List)) (= (tf0 tv2 tv3) (tf1 tv3 tv2))))
  (assert (forall ((tv1 List) (tv0 List)) (= (cat tv0 tv1) (tf0 tv0 tv1))))
  (assert (forall ((tv12 Unit)) (= (tf3 (Cnil tv12)) (Nil Null))))
  (assert (forall ((tv13 Nat)) (= (tf3 (Single tv13)) (Cons tv13 (Nil Null)))))
  (assert (forall ((tv15 CList) (tv14 CList)) (= (tf3 (Concat tv14 tv15)) (cat (tf2 tv14) (tf2 tv15)))))
  (assert (forall ((tv10 CList)) (= (tf2 tv10) (tf3 tv10))))
  (assert (forall ((tv9 CList)) (= (repr tv9) (tf2 tv9))))
  (assert (= (lq Zero Zero) MyFalse))
  (assert (forall ((x Nat)) (= (lq Zero (Succ x)) MyTrue)))
  (assert (forall ((x Nat)) (= (lq (Succ x) Zero) MyFalse)))
  (assert (forall ((y Nat) (x Nat)) (= (lq (Succ x) (Succ y)) (lq x y))))
  (assert (forall ((y Nat) (x Nat)) (= (ite2 MyTrue x y) x)))
  (assert (forall ((y Nat) (x Nat)) (= (ite2 MyFalse x y) y)))
  (assert (forall ((tv17 Nat)) (= (max tv17) (ite2 (lq Zero tv17) tv17 Zero))))
  (assert (forall ((x Nat)) (= (plus Zero x) x)))
  (assert (forall ((y Nat) (x Nat)) (= (plus (Succ x) y) (Succ (plus x y)))))
  (assert (forall ((x1 Nat) (x0 Nat)) (= (fst3 (MakeTuple3 x0 x1)) x0)))
  (assert (forall ((x1 Nat) (x0 Nat)) (= (snd3 (MakeTuple3 x0 x1)) x1)))
  (assert (forall ((tv21 Unit)) (= (tf5 (Nil tv21)) (MakeTuple3 Zero Zero))))
  (assert (forall ((tv23 List) (tv22 Nat)) (= (tf5 (Cons tv22 tv23)) (MakeTuple3 (max (plus (fst3 (tf4 tv23)) tv22)) (plus (snd3 (tf4 tv23)) tv22)))))
  (assert (forall ((tv19 List)) (= (tf4 tv19) (tf5 tv19))))
  (assert (forall ((tv18 List)) (= (spec tv18) (fst3 (tf4 tv18)))))
  (assert (forall ((tv24 CList)) (= (main tv24) (spec (repr tv24)))))
  (assert (forall ((tv28 Unit)) (= (tf7 (Cnil tv28)) (MakeTuple3 Zero Zero))))
  (assert (forall ((tv29 Nat)) (= (tf7 (Single tv29)) (MakeTuple3 (ite2 (lq tv29 Zero) Zero tv29) tv29))))
  (assert (forall ((tv31 CList) (tv30 CList)) (= (tf7 (Concat tv30 tv31)) (MakeTuple3 (ite2 (lq (fst3 (tf6 tv30)) (plus (snd3 (tf6 tv30)) (fst3 (tf6 tv31)))) (plus (snd3 (tf6 tv30)) (fst3 (tf6 tv31))) (fst3 (tf6 tv30))) (plus (snd3 (tf6 tv30)) (snd3 (tf6 tv31)))))))
  (assert (forall ((tv26 CList)) (= (tf6 tv26) (tf7 tv26))))
  (assert (forall ((tv25 CList)) (= (reprNew tv25) (tf6 tv25))))
  (assert (forall ((tv32 CList)) (= (mainNew tv32) (fst3 (reprNew tv32)))))
  (assert (not (forall ((inp0 CList)) (= (main inp0) (mainNew inp0)))))
  (check-sat)
