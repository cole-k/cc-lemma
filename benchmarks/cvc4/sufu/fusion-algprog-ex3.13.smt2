  (declare-datatypes () ((MyBool (MyTrue) (MyFalse))))
  (declare-datatypes () ((Unit (Null))))
  (declare-datatypes () ((Nat (Zero) (Succ (proj_Succ_0 Nat)))))
  (declare-datatypes () ((List (Nil (proj_Nil_0 Unit)) (Cons (proj_Cons_0 Nat) (proj_Cons_1 List)))))
  (declare-datatypes () ((PList (Pnil (proj_Pnil_0 Unit)) (Pcons (proj_Pcons_0 Nat) (proj_Pcons_1 Nat) (proj_Pcons_2 PList)))))
  (declare-fun plus (Nat Nat) Nat)
  (declare-fun tf3 (PList) PList)
  (declare-fun tf2 (PList) PList)
  (declare-fun tf1 (List) PList)
  (declare-fun tf0 (List) PList)
  (declare-fun tri (List) PList)
  (declare-fun times (Nat Nat) Nat)
  (declare-fun tf5 (PList) Nat)
  (declare-fun tf4 (PList) Nat)
  (declare-fun tsum (PList) Nat)
  (declare-fun main (List) Nat)
  (declare-datatypes () ((Tuple2 (MakeTuple2 (proj_MakeTuple2_0 Nat) (proj_MakeTuple2_1 Nat)))))
  (declare-fun fst2 (Tuple2) Nat)
  (declare-fun snd2 (Tuple2) Nat)
  (declare-fun tf7 (List) Tuple2)
  (declare-fun tf6 (List) Tuple2)
  (declare-fun triNew (List) Tuple2)
  (declare-fun mainNew (List) Nat)
  (assert (forall ((x Nat)) (= (plus Zero x) x)))
  (assert (forall ((y Nat) (x Nat)) (= (plus (Succ x) y) (Succ (plus x y)))))
  (assert (forall ((tv8 Unit)) (= (tf3 (Pnil tv8)) (Pnil Null))))
  (assert (forall ((tv11 PList) (tv10 Nat) (tv9 Nat)) (= (tf3 (Pcons tv9 tv10 tv11)) (Pcons (plus tv9 (Succ Zero)) tv10 (tf2 tv11)))))
  (assert (forall ((tv6 PList)) (= (tf2 tv6) (tf3 tv6))))
  (assert (forall ((tv3 Unit)) (= (tf1 (Nil tv3)) (Pnil Null))))
  (assert (forall ((tv5 List) (tv4 Nat)) (= (tf1 (Cons tv4 tv5)) (Pcons Zero tv4 (tf2 (tf0 tv5))))))
  (assert (forall ((tv1 List)) (= (tf0 tv1) (tf1 tv1))))
  (assert (forall ((tv0 List)) (= (tri tv0) (tf0 tv0))))
  (assert (forall ((x Nat)) (= (times Zero x) Zero)))
  (assert (forall ((y Nat) (x Nat)) (= (times (Succ x) y) (plus (times x y) y))))
  (assert (forall ((tv15 Unit)) (= (tf5 (Pnil tv15)) Zero)))
  (assert (forall ((tv18 PList) (tv17 Nat) (tv16 Nat)) (= (tf5 (Pcons tv16 tv17 tv18)) (plus (times tv16 tv17) (tf4 tv18)))))
  (assert (forall ((tv13 PList)) (= (tf4 tv13) (tf5 tv13))))
  (assert (forall ((tv12 PList)) (= (tsum tv12) (tf4 tv12))))
  (assert (forall ((tv19 List)) (= (main tv19) (tsum (tri tv19)))))
  (assert (forall ((x1 Nat) (x0 Nat)) (= (fst2 (MakeTuple2 x0 x1)) x0)))
  (assert (forall ((x1 Nat) (x0 Nat)) (= (snd2 (MakeTuple2 x0 x1)) x1)))
  (assert (forall ((tv23 Unit)) (= (tf7 (Nil tv23)) (MakeTuple2 Zero Zero))))
  (assert (forall ((tv25 List) (tv24 Nat)) (= (tf7 (Cons tv24 tv25)) (MakeTuple2 (fst2 (MakeTuple2 (plus (fst2 (tf6 tv25)) (snd2 (tf6 tv25))) (snd2 (tf6 tv25)))) (plus (snd2 (MakeTuple2 (plus (fst2 (tf6 tv25)) (snd2 (tf6 tv25))) (snd2 (tf6 tv25)))) tv24)))))
  (assert (forall ((tv21 List)) (= (tf6 tv21) (tf7 tv21))))
  (assert (forall ((tv20 List)) (= (triNew tv20) (tf6 tv20))))
  (assert (forall ((tv26 List)) (= (mainNew tv26) (fst2 (triNew tv26)))))
  (assert (not (forall ((inp0 List)) (= (main inp0) (mainNew inp0)))))
  (check-sat)
