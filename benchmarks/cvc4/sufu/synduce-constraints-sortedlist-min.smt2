  (declare-datatypes () ((MyBool (MyTrue) (MyFalse))))
  (declare-datatypes () ((Nat (Zero) (Succ (proj_Succ_0 Nat)))))
  (declare-datatypes () ((List (Elt (proj_Elt_0 Nat)) (Cons (proj_Cons_0 Nat) (proj_Cons_1 List)))))
  (declare-fun leq (Nat Nat) MyBool)
  (declare-fun myand (MyBool MyBool) MyBool)
  (declare-fun tf1 (Nat List) MyBool)
  (declare-fun tf0 (Nat List) MyBool)
  (declare-fun tf3 (List) MyBool)
  (declare-fun tf2 (List) MyBool)
  (declare-fun issorted (List) MyBool)
  (declare-fun gq (Nat Nat) MyBool)
  (declare-fun ite1 (MyBool Nat Nat) Nat)
  (declare-fun min (Nat Nat) Nat)
  (declare-fun tf5 (List) Nat)
  (declare-fun tf4 (List) Nat)
  (declare-fun spec (List) Nat)
  (declare-fun tf7 (List List) List)
  (declare-fun tf6 (List) List)
  (declare-fun target (List) List)
  (declare-fun main (List) Nat)
  (declare-fun tf9 (List) Nat)
  (declare-fun tf8 (List) Nat)
  (declare-fun targetNew (List) Nat)
  (declare-fun mainNew (List) Nat)
  (assert (forall ((x Nat)) (= (leq Zero x) MyTrue)))
  (assert (forall ((x Nat)) (= (leq (Succ x) Zero) MyFalse)))
  (assert (forall ((y Nat) (x Nat)) (= (leq (Succ x) (Succ y)) (leq x y))))
  (assert (forall ((x MyBool)) (= (myand MyFalse x) MyFalse)))
  (assert (forall ((true MyBool)) (= (myand true MyFalse) MyFalse)))
  (assert (= (myand MyTrue MyTrue) MyTrue))
  (assert (forall ((tv5 Nat) (tv4 Nat)) (= (tf1 tv4 (Elt tv5)) (leq tv4 tv5))))
  (assert (forall ((tv7 List) (tv6 Nat) (tv4 Nat)) (= (tf1 tv4 (Cons tv6 tv7)) (myand (leq tv4 tv6) (tf0 tv6 tv7)))))
  (assert (forall ((tv2 List) (tv1 Nat)) (= (tf0 tv1 tv2) (tf1 tv1 tv2))))
  (assert (forall ((tv9 Nat)) (= (tf3 (Elt tv9)) MyTrue)))
  (assert (forall ((tv11 List) (tv10 Nat)) (= (tf3 (Cons tv10 tv11)) (tf0 tv10 tv11))))
  (assert (forall ((tv8 List)) (= (tf2 tv8) (tf3 tv8))))
  (assert (forall ((tv0 List)) (= (issorted tv0) (tf2 tv0))))
  (assert (forall ((x Nat)) (= (gq Zero x) MyFalse)))
  (assert (forall ((x Nat)) (= (gq (Succ x) Zero) MyTrue)))
  (assert (forall ((y Nat) (x Nat)) (= (gq (Succ x) (Succ y)) (gq x y))))
  (assert (forall ((y Nat) (x Nat)) (= (ite1 MyTrue x y) x)))
  (assert (forall ((y Nat) (x Nat)) (= (ite1 MyFalse x y) y)))
  (assert (forall ((tv13 Nat) (tv12 Nat)) (= (min tv12 tv13) (ite1 (gq tv12 tv13) tv13 tv12))))
  (assert (forall ((tv17 Nat)) (= (tf5 (Elt tv17)) tv17)))
  (assert (forall ((tv19 List) (tv18 Nat)) (= (tf5 (Cons tv18 tv19)) (min tv18 (tf4 tv19)))))
  (assert (forall ((tv15 List)) (= (tf4 tv15) (tf5 tv15))))
  (assert (forall ((tv14 List)) (= (spec tv14) (tf4 tv14))))
  (assert (forall ((tv23 Nat) (tv22 List)) (= (tf7 tv22 (Elt tv23)) tv22)))
  (assert (forall ((tv25 List) (tv24 Nat) (tv22 List)) (= (tf7 tv22 (Cons tv24 tv25)) tv22)))
  (assert (forall ((tv21 List)) (= (tf6 tv21) (tf7 tv21 tv21))))
  (assert (forall ((tv20 List)) (= (target tv20) (tf6 tv20))))
  (assert (forall ((tv26 List)) (= (main tv26) (ite1 (issorted tv26) (spec (target tv26)) Zero))))
  (assert (forall ((tv29 Nat)) (= (tf9 (Elt tv29)) tv29)))
  (assert (forall ((tv31 List) (tv30 Nat)) (= (tf9 (Cons tv30 tv31)) tv30)))
  (assert (forall ((tv28 List)) (= (tf8 tv28) (tf9 tv28))))
  (assert (forall ((tv27 List)) (= (targetNew tv27) (tf8 tv27))))
  (assert (forall ((tv32 List)) (= (mainNew tv32) (ite1 (issorted tv32) (targetNew tv32) Zero))))
  (assert (not (forall ((inp0 List)) (= (main inp0) (mainNew inp0)))))
  (check-sat)
