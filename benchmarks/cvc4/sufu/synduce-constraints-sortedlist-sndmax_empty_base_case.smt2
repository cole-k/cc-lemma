  (declare-datatypes () ((MyBool (MyTrue) (MyFalse))))
  (declare-datatypes () ((Unit (Null))))
  (declare-datatypes () ((Nat (Zero) (Succ (proj_Succ_0 Nat)))))
  (declare-datatypes () ((CList (Empty (proj_Empty_0 Unit)) (Elt (proj_Elt_0 Nat)) (Concat (proj_Concat_0 CList) (proj_Concat_1 CList)))))
  (declare-datatypes () ((List (Nil (proj_Nil_0 Unit)) (Cons (proj_Cons_0 Nat) (proj_Cons_1 List)))))
  (declare-fun tf1 (List List) List)
  (declare-fun tf0 (List List) List)
  (declare-fun cat (List List) List)
  (declare-fun tf3 (CList) List)
  (declare-fun tf2 (CList) List)
  (declare-fun repr (CList) List)
  (declare-fun geq (Nat Nat) MyBool)
  (declare-fun tf4 (Nat List) MyBool)
  (declare-fun geqhead (Nat List) MyBool)
  (declare-fun myand (MyBool MyBool) MyBool)
  (declare-fun tf6 (List) MyBool)
  (declare-fun tf5 (List) MyBool)
  (declare-fun issorted (List) MyBool)
  (declare-fun lq (Nat Nat) MyBool)
  (declare-fun ite2 (MyBool Nat Nat) Nat)
  (declare-fun min (Nat Nat) Nat)
  (declare-fun gq (Nat Nat) MyBool)
  (declare-fun max (Nat Nat) Nat)
  (declare-datatypes () ((Tuple3 (MakeTuple3 (proj_MakeTuple3_0 Nat) (proj_MakeTuple3_1 Nat)))))
  (declare-fun fst3 (Tuple3) Nat)
  (declare-fun snd3 (Tuple3) Nat)
  (declare-fun tf8 (List) Tuple3)
  (declare-fun tf7 (List) Tuple3)
  (declare-fun spec (List) Nat)
  (declare-fun tf10 (CList CList) CList)
  (declare-fun tf9 (CList) CList)
  (declare-fun target (CList) CList)
  (declare-fun main (CList) Nat)
  (declare-fun nateq (Nat Nat) MyBool)
  (declare-fun plus (Nat Nat) Nat)
  (declare-fun tf12 (CList) Tuple3)
  (declare-fun tf11 (CList) Tuple3)
  (declare-fun targetNew (CList) Tuple3)
  (declare-fun mainNew (CList) Nat)
  (assert (forall ((tv6 Unit) (tv5 List)) (= (tf1 tv5 (Nil tv6)) tv5)))
  (assert (forall ((tv8 List) (tv7 Nat) (tv5 List)) (= (tf1 tv5 (Cons tv7 tv8)) (Cons tv7 (tf0 tv8 tv5)))))
  (assert (forall ((tv3 List) (tv2 List)) (= (tf0 tv2 tv3) (tf1 tv3 tv2))))
  (assert (forall ((tv1 List) (tv0 List)) (= (cat tv0 tv1) (tf0 tv0 tv1))))
  (assert (forall ((tv12 Unit)) (= (tf3 (Empty tv12)) (Nil Null))))
  (assert (forall ((tv13 Nat)) (= (tf3 (Elt tv13)) (Cons tv13 (Nil Null)))))
  (assert (forall ((tv15 CList) (tv14 CList)) (= (tf3 (Concat tv14 tv15)) (cat (tf2 tv14) (tf2 tv15)))))
  (assert (forall ((tv10 CList)) (= (tf2 tv10) (tf3 tv10))))
  (assert (forall ((tv9 CList)) (= (repr tv9) (tf2 tv9))))
  (assert (= (geq Zero Zero) MyTrue))
  (assert (forall ((x Nat)) (= (geq Zero (Succ x)) MyFalse)))
  (assert (forall ((x Nat)) (= (geq (Succ x) Zero) MyTrue)))
  (assert (forall ((y Nat) (x Nat)) (= (geq (Succ x) (Succ y)) (geq x y))))
  (assert (forall ((tv19 Unit) (tv18 Nat)) (= (tf4 tv18 (Nil tv19)) MyTrue)))
  (assert (forall ((tv21 List) (tv20 Nat) (tv18 Nat)) (= (tf4 tv18 (Cons tv20 tv21)) (geq tv18 tv20))))
  (assert (forall ((tv17 List) (tv16 Nat)) (= (geqhead tv16 tv17) (tf4 tv16 tv17))))
  (assert (forall ((x MyBool)) (= (myand MyFalse x) MyFalse)))
  (assert (forall ((true MyBool)) (= (myand true MyFalse) MyFalse)))
  (assert (= (myand MyTrue MyTrue) MyTrue))
  (assert (forall ((tv25 Unit)) (= (tf6 (Nil tv25)) MyTrue)))
  (assert (forall ((tv27 List) (tv26 Nat)) (= (tf6 (Cons tv26 tv27)) (myand (geqhead tv26 tv27) (tf5 tv27)))))
  (assert (forall ((tv23 List)) (= (tf5 tv23) (tf6 tv23))))
  (assert (forall ((tv22 List)) (= (issorted tv22) (tf5 tv22))))
  (assert (= (lq Zero Zero) MyFalse))
  (assert (forall ((x Nat)) (= (lq Zero (Succ x)) MyTrue)))
  (assert (forall ((x Nat)) (= (lq (Succ x) Zero) MyFalse)))
  (assert (forall ((y Nat) (x Nat)) (= (lq (Succ x) (Succ y)) (lq x y))))
  (assert (forall ((y Nat) (x Nat)) (= (ite2 MyTrue x y) x)))
  (assert (forall ((y Nat) (x Nat)) (= (ite2 MyFalse x y) y)))
  (assert (forall ((tv29 Nat) (tv28 Nat)) (= (min tv28 tv29) (ite2 (lq tv28 tv29) tv28 tv29))))
  (assert (forall ((x Nat)) (= (gq Zero x) MyFalse)))
  (assert (forall ((x Nat)) (= (gq (Succ x) Zero) MyTrue)))
  (assert (forall ((y Nat) (x Nat)) (= (gq (Succ x) (Succ y)) (gq x y))))
  (assert (forall ((tv31 Nat) (tv30 Nat)) (= (max tv30 tv31) (ite2 (gq tv30 tv31) tv30 tv31))))
  (assert (forall ((x1 Nat) (x0 Nat)) (= (fst3 (MakeTuple3 x0 x1)) x0)))
  (assert (forall ((x1 Nat) (x0 Nat)) (= (snd3 (MakeTuple3 x0 x1)) x1)))
  (assert (forall ((tv35 Unit)) (= (tf8 (Nil tv35)) (MakeTuple3 Zero Zero))))
  (assert (forall ((tv37 List) (tv36 Nat)) (= (tf8 (Cons tv36 tv37)) (MakeTuple3 (max (fst3 (tf7 tv37)) tv36) (max (snd3 (tf7 tv37)) (min (fst3 (tf7 tv37)) tv36))))))
  (assert (forall ((tv33 List)) (= (tf7 tv33) (tf8 tv33))))
  (assert (forall ((tv32 List)) (= (spec tv32) (snd3 (tf7 tv32)))))
  (assert (forall ((tv42 Unit) (tv41 CList)) (= (tf10 tv41 (Empty tv42)) tv41)))
  (assert (forall ((tv43 Nat) (tv41 CList)) (= (tf10 tv41 (Elt tv43)) tv41)))
  (assert (forall ((tv44 CList) (tv45 CList) (tv41 CList)) (= (tf10 tv41 (Concat tv44 tv45)) (Concat (tf9 tv44) (tf9 tv45)))))
  (assert (forall ((tv39 CList)) (= (tf9 tv39) (tf10 tv39 tv39))))
  (assert (forall ((tv38 CList)) (= (target tv38) (tf9 tv38))))
  (assert (forall ((tv46 CList)) (= (main tv46) (ite2 (issorted (repr tv46)) (spec (repr (target tv46))) Zero))))
  (assert (= (nateq Zero Zero) MyTrue))
  (assert (forall ((x Nat)) (= (nateq Zero (Succ x)) MyFalse)))
  (assert (forall ((x Nat)) (= (nateq (Succ x) Zero) MyFalse)))
  (assert (forall ((y Nat) (x Nat)) (= (nateq (Succ x) (Succ y)) (nateq x y))))
  (assert (forall ((x Nat)) (= (plus Zero x) x)))
  (assert (forall ((y Nat) (x Nat)) (= (plus (Succ x) y) (Succ (plus x y)))))
  (assert (forall ((tv50 Unit)) (= (tf12 (Empty tv50)) (MakeTuple3 Zero Zero))))
  (assert (forall ((tv51 Nat)) (= (tf12 (Elt tv51)) (MakeTuple3 Zero (max tv51 Zero)))))
  (assert (forall ((tv53 CList) (tv52 CList)) (= (tf12 (Concat tv52 tv53)) (MakeTuple3 (ite2 (myand (lq (fst3 (tf11 tv52)) (snd3 (tf11 tv52))) (nateq (fst3 (tf11 tv52)) Zero)) (snd3 (tf11 tv53)) (ite2 (nateq (fst3 (tf11 tv52)) Zero) (plus (fst3 (tf11 tv52)) (fst3 (tf11 tv53))) (fst3 (tf11 tv52)))) (max (snd3 (tf11 tv52)) (snd3 (tf11 tv53)))))))
  (assert (forall ((tv48 CList)) (= (tf11 tv48) (tf12 tv48))))
  (assert (forall ((tv47 CList)) (= (targetNew tv47) (tf11 tv47))))
  (assert (forall ((tv54 CList)) (= (mainNew tv54) (ite2 (issorted (repr tv54)) (fst3 (targetNew tv54)) Zero))))
  (assert (not (forall ((inp0 CList)) (= (main inp0) (mainNew inp0)))))
  (check-sat)
