  (declare-datatypes () ((MyBool (MyTrue) (MyFalse))))
  (declare-datatypes () ((Nat (Zero) (Succ (proj_Succ_0 Nat)))))
  (declare-datatypes () ((Tree (Leaf (proj_Leaf_0 Nat)) (Branch (proj_Branch_0 Tree) (proj_Branch_1 Tree)))))
  (declare-fun plus (Nat Nat) Nat)
  (declare-fun times (Nat Nat) Nat)
  (declare-fun square (Nat) Nat)
  (declare-fun tf1 (Tree) Tree)
  (declare-fun tf0 (Tree) Tree)
  (declare-fun squaretr (Tree) Tree)
  (declare-fun tf3 (Tree) Nat)
  (declare-fun tf2 (Tree) Nat)
  (declare-fun sumtr (Tree) Nat)
  (declare-fun main (Tree) Nat)
  (declare-fun tf5 (Tree) Nat)
  (declare-fun tf4 (Tree) Nat)
  (declare-fun squaretrNew (Tree) Nat)
  (declare-fun mainNew (Tree) Nat)
  (assert (forall ((x Nat)) (= (plus Zero x) x)))
  (assert (forall ((y Nat) (x Nat)) (= (plus (Succ x) y) (Succ (plus x y)))))
  (assert (forall ((x Nat)) (= (times Zero x) Zero)))
  (assert (forall ((y Nat) (x Nat)) (= (times (Succ x) y) (plus (times x y) y))))
  (assert (forall ((tv0 Nat)) (= (square tv0) (times tv0 tv0))))
  (assert (forall ((tv4 Nat)) (= (tf1 (Leaf tv4)) (Leaf (square tv4)))))
  (assert (forall ((tv6 Tree) (tv5 Tree)) (= (tf1 (Branch tv5 tv6)) (Branch (tf0 tv5) (tf0 tv6)))))
  (assert (forall ((tv2 Tree)) (= (tf0 tv2) (tf1 tv2))))
  (assert (forall ((tv1 Tree)) (= (squaretr tv1) (tf0 tv1))))
  (assert (forall ((tv10 Nat)) (= (tf3 (Leaf tv10)) tv10)))
  (assert (forall ((tv12 Tree) (tv11 Tree)) (= (tf3 (Branch tv11 tv12)) (plus (tf2 tv11) (tf2 tv12)))))
  (assert (forall ((tv8 Tree)) (= (tf2 tv8) (tf3 tv8))))
  (assert (forall ((tv7 Tree)) (= (sumtr tv7) (tf2 tv7))))
  (assert (forall ((tv13 Tree)) (= (main tv13) (sumtr (squaretr tv13)))))
  (assert (forall ((tv17 Nat)) (= (tf5 (Leaf tv17)) (square tv17))))
  (assert (forall ((tv19 Tree) (tv18 Tree)) (= (tf5 (Branch tv18 tv19)) (plus (tf4 tv18) (tf4 tv19)))))
  (assert (forall ((tv15 Tree)) (= (tf4 tv15) (tf5 tv15))))
  (assert (forall ((tv14 Tree)) (= (squaretrNew tv14) (tf4 tv14))))
  (assert (forall ((tv20 Tree)) (= (mainNew tv20) (squaretrNew tv20))))
  (assert (not (forall ((inp0 Tree)) (= (main inp0) (mainNew inp0)))))
  (check-sat)
