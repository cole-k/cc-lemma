  (declare-datatypes () ((MyBool (MyTrue) (MyFalse))))
  (declare-datatypes () ((Unit (Null))))
  (declare-datatypes () ((Nat (Zero) (Succ (proj_Succ_0 Nat)))))
  (declare-datatypes () ((List (Nil (proj_Nil_0 Unit)) (Cons (proj_Cons_0 Nat) (proj_Cons_1 List)))))
  (declare-fun gq (Nat Nat) MyBool)
  (declare-fun ite1 (MyBool Nat Nat) Nat)
  (declare-fun max (Nat Nat) Nat)
  (declare-datatypes () ((Tuple2 (MakeTuple2 (proj_MakeTuple2_0 Nat) (proj_MakeTuple2_1 Nat)))))
  (declare-fun plus (Nat Nat) Nat)
  (declare-fun fst2 (Tuple2) Nat)
  (declare-fun snd2 (Tuple2) Nat)
  (declare-fun tf1 (List) Tuple2)
  (declare-fun tf0 (List) Tuple2)
  (declare-fun spec (List) Nat)
  (declare-fun tf3 (Nat List) List)
  (declare-fun tf2 (List Nat) List)
  (declare-fun snoc (List Nat) List)
  (declare-fun tf5 (List List) List)
  (declare-fun tf4 (List List) List)
  (declare-fun repr (List) List)
  (declare-fun main (List) Nat)
  (declare-fun tf7 (Tuple2 List) Tuple2)
  (declare-fun tf6 (Tuple2 List) Tuple2)
  (declare-fun reprNew (List) Tuple2)
  (declare-fun mainNew (List) Nat)
  (assert (forall ((x Nat)) (= (gq Zero x) MyFalse)))
  (assert (forall ((x Nat)) (= (gq (Succ x) Zero) MyTrue)))
  (assert (forall ((y Nat) (x Nat)) (= (gq (Succ x) (Succ y)) (gq x y))))
  (assert (forall ((y Nat) (x Nat)) (= (ite1 MyTrue x y) x)))
  (assert (forall ((y Nat) (x Nat)) (= (ite1 MyFalse x y) y)))
  (assert (forall ((tv1 Nat) (tv0 Nat)) (= (max tv0 tv1) (ite1 (gq tv0 tv1) tv0 tv1))))
  (assert (forall ((x Nat)) (= (plus Zero x) x)))
  (assert (forall ((y Nat) (x Nat)) (= (plus (Succ x) y) (Succ (plus x y)))))
  (assert (forall ((x1 Nat) (x0 Nat)) (= (fst2 (MakeTuple2 x0 x1)) x0)))
  (assert (forall ((x1 Nat) (x0 Nat)) (= (snd2 (MakeTuple2 x0 x1)) x1)))
  (assert (forall ((tv5 Unit)) (= (tf1 (Nil tv5)) (MakeTuple2 Zero Zero))))
  (assert (forall ((tv7 List) (tv6 Nat)) (= (tf1 (Cons tv6 tv7)) (MakeTuple2 (plus tv6 (fst2 (tf0 tv7))) (max Zero (plus tv6 (snd2 (tf0 tv7))))))))
  (assert (forall ((tv3 List)) (= (tf0 tv3) (tf1 tv3))))
  (assert (forall ((tv2 List)) (= (spec tv2) (snd2 (tf0 tv2)))))
  (assert (forall ((tv14 Unit) (tv13 Nat)) (= (tf3 tv13 (Nil tv14)) (Cons tv13 (Nil Null)))))
  (assert (forall ((tv16 List) (tv15 Nat) (tv13 Nat)) (= (tf3 tv13 (Cons tv15 tv16)) (Cons tv15 (tf2 tv16 tv13)))))
  (assert (forall ((tv11 Nat) (tv10 List)) (= (tf2 tv10 tv11) (tf3 tv11 tv10))))
  (assert (forall ((tv9 Nat) (tv8 List)) (= (snoc tv8 tv9) (tf2 tv8 tv9))))
  (assert (forall ((tv22 Unit) (tv21 List)) (= (tf5 tv21 (Nil tv22)) tv21)))
  (assert (forall ((tv24 List) (tv23 Nat) (tv21 List)) (= (tf5 tv21 (Cons tv23 tv24)) (tf4 (snoc tv21 tv23) tv24))))
  (assert (forall ((tv19 List) (tv18 List)) (= (tf4 tv18 tv19) (tf5 tv18 tv19))))
  (assert (forall ((tv17 List)) (= (repr tv17) (tf4 (Nil Null) tv17))))
  (assert (forall ((tv25 List)) (= (main tv25) (spec (repr tv25)))))
  (assert (forall ((tv31 Unit) (tv30 Tuple2)) (= (tf7 tv30 (Nil tv31)) tv30)))
  (assert (forall ((tv32 Nat) (tv33 List) (tv30 Tuple2)) (= (tf7 tv30 (Cons tv32 tv33)) (tf6 (MakeTuple2 (max (fst2 tv30) (plus tv32 (snd2 tv30))) (plus tv32 (snd2 tv30))) tv33))))
  (assert (forall ((tv28 List) (tv27 Tuple2)) (= (tf6 tv27 tv28) (tf7 tv27 tv28))))
  (assert (forall ((tv26 List)) (= (reprNew tv26) (tf6 (MakeTuple2 Zero Zero) tv26))))
  (assert (forall ((tv34 List)) (= (mainNew tv34) (fst2 (reprNew tv34)))))
  (assert (not (forall ((inp0 List)) (= (main inp0) (mainNew inp0)))))
  (check-sat)
