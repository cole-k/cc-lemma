  (declare-datatypes () ((MyBool (MyTrue) (MyFalse))))
  (declare-datatypes () ((Unit (Null))))
  (declare-datatypes () ((BList (Nil (proj_Nil_0 Unit)) (Cons (proj_Cons_0 MyBool) (proj_Cons_1 BList)))))
  (declare-datatypes () ((CList (Emp (proj_Emp_0 Unit)) (Single (proj_Single_0 MyBool)) (Concat (proj_Concat_0 CList) (proj_Concat_1 CList)))))
  (declare-fun myor (MyBool MyBool) MyBool)
  (declare-fun opor (MyBool MyBool) MyBool)
  (declare-fun tf1 (BList BList) BList)
  (declare-fun tf0 (BList BList) BList)
  (declare-fun catlist (BList BList) BList)
  (declare-fun tf3 (CList) BList)
  (declare-fun tf2 (CList) BList)
  (declare-fun repr (CList) BList)
  (declare-datatypes () ((Tuple2 (MakeTuple2 (proj_MakeTuple2_0 MyBool) (proj_MakeTuple2_1 MyBool) (proj_MakeTuple2_2 MyBool)))))
  (declare-fun fst2 (Tuple2) MyBool)
  (declare-fun snd2 (Tuple2) MyBool)
  (declare-fun myand (MyBool MyBool) MyBool)
  (declare-fun mynot (MyBool) MyBool)
  (declare-fun third2 (Tuple2) MyBool)
  (declare-fun tf5 (BList) Tuple2)
  (declare-fun tf4 (BList) Tuple2)
  (declare-fun spec (BList) MyBool)
  (declare-fun main (CList) MyBool)
  (declare-datatypes () ((Tuple3 (MakeTuple3 (proj_MakeTuple3_0 MyBool) (proj_MakeTuple3_1 MyBool) (proj_MakeTuple3_2 MyBool) (proj_MakeTuple3_3 MyBool)))))
  (declare-fun snd3 (Tuple3) MyBool)
  (declare-fun third3 (Tuple3) MyBool)
  (declare-fun fst3 (Tuple3) MyBool)
  (declare-fun fourth3 (Tuple3) MyBool)
  (declare-fun tf7 (CList) Tuple3)
  (declare-fun tf6 (CList) Tuple3)
  (declare-fun reprNew (CList) Tuple3)
  (declare-fun mainNew (CList) MyBool)
  (assert (forall ((x MyBool)) (= (myor MyTrue x) MyTrue)))
  (assert (forall ((false MyBool)) (= (myor false MyTrue) MyTrue)))
  (assert (= (myor MyFalse MyFalse) MyFalse))
  (assert (forall ((tv1 MyBool) (tv0 MyBool)) (= (opor tv0 tv1) (myor tv0 tv1))))
  (assert (forall ((tv8 Unit) (tv7 BList)) (= (tf1 tv7 (Nil tv8)) tv7)))
  (assert (forall ((tv10 BList) (tv9 MyBool) (tv7 BList)) (= (tf1 tv7 (Cons tv9 tv10)) (Cons tv9 (tf0 tv10 tv7)))))
  (assert (forall ((tv5 BList) (tv4 BList)) (= (tf0 tv4 tv5) (tf1 tv5 tv4))))
  (assert (forall ((tv3 BList) (tv2 BList)) (= (catlist tv2 tv3) (tf0 tv2 tv3))))
  (assert (forall ((tv14 Unit)) (= (tf3 (Emp tv14)) (Nil Null))))
  (assert (forall ((tv15 MyBool)) (= (tf3 (Single tv15)) (Cons tv15 (Nil Null)))))
  (assert (forall ((tv17 CList) (tv16 CList)) (= (tf3 (Concat tv16 tv17)) (catlist (tf2 tv16) (tf2 tv17)))))
  (assert (forall ((tv12 CList)) (= (tf2 tv12) (tf3 tv12))))
  (assert (forall ((tv11 CList)) (= (repr tv11) (tf2 tv11))))
  (assert (forall ((x2 MyBool) (x1 MyBool) (x0 MyBool)) (= (fst2 (MakeTuple2 x0 x1 x2)) x0)))
  (assert (forall ((x2 MyBool) (x1 MyBool) (x0 MyBool)) (= (snd2 (MakeTuple2 x0 x1 x2)) x1)))
  (assert (forall ((x MyBool)) (= (myand MyFalse x) MyFalse)))
  (assert (forall ((true MyBool)) (= (myand true MyFalse) MyFalse)))
  (assert (= (myand MyTrue MyTrue) MyTrue))
  (assert (= (mynot MyTrue) MyFalse))
  (assert (= (mynot MyFalse) MyTrue))
  (assert (forall ((x2 MyBool) (x1 MyBool) (x0 MyBool)) (= (third2 (MakeTuple2 x0 x1 x2)) x2)))
  (assert (forall ((tv21 Unit)) (= (tf5 (Nil tv21)) (MakeTuple2 MyFalse MyFalse MyFalse))))
  (assert (forall ((tv23 BList) (tv22 MyBool)) (= (tf5 (Cons tv22 tv23)) (MakeTuple2 (myor (fst2 (tf4 tv23)) tv22) (myor (snd2 (tf4 tv23)) (myand (fst2 (tf4 tv23)) (mynot tv22))) (myor (third2 (tf4 tv23)) (mynot tv22))))))
  (assert (forall ((tv19 BList)) (= (tf4 tv19) (tf5 tv19))))
  (assert (forall ((tv18 BList)) (= (spec tv18) (snd2 (tf4 tv18)))))
  (assert (forall ((tv24 CList)) (= (main tv24) (spec (repr tv24)))))
  (assert (forall ((x2 MyBool) (x3 MyBool) (x1 MyBool) (x0 MyBool)) (= (snd3 (MakeTuple3 x0 x1 x2 x3)) x1)))
  (assert (forall ((x2 MyBool) (x3 MyBool) (x1 MyBool) (x0 MyBool)) (= (third3 (MakeTuple3 x0 x1 x2 x3)) x2)))
  (assert (forall ((x2 MyBool) (x3 MyBool) (x1 MyBool) (x0 MyBool)) (= (fst3 (MakeTuple3 x0 x1 x2 x3)) x0)))
  (assert (forall ((x2 MyBool) (x3 MyBool) (x1 MyBool) (x0 MyBool)) (= (fourth3 (MakeTuple3 x0 x1 x2 x3)) x3)))
  (assert (forall ((tv28 Unit)) (= (tf7 (Emp tv28)) (MakeTuple3 MyFalse MyTrue MyTrue MyFalse))))
  (assert (forall ((tv29 MyBool)) (= (tf7 (Single tv29)) (MakeTuple3 MyFalse tv29 MyFalse MyFalse))))
  (assert (forall ((tv31 CList) (tv30 CList)) (= (tf7 (Concat tv30 tv31)) (MakeTuple3 (myor (myor (myand (myand (mynot (snd3 (tf6 tv30))) (mynot (third3 (tf6 tv31)))) (opor (fst3 (tf6 tv31)) (snd3 (tf6 tv31)))) (myand (myand (opor (fst3 (tf6 tv31)) (fourth3 (tf6 tv30))) (mynot (third3 (tf6 tv31)))) (opor (fst3 (tf6 tv31)) (snd3 (tf6 tv31))))) (opor (fst3 (tf6 tv31)) (fst3 (tf6 tv30)))) (myor (myand (snd3 (tf6 tv31)) (snd3 (tf6 tv30))) (myand (snd3 (tf6 tv30)) (mynot (third3 (tf6 tv30))))) (myand (third3 (tf6 tv31)) (third3 (tf6 tv30))) (myor (myor (myand (myand (mynot (snd3 (tf6 tv31))) (mynot (third3 (tf6 tv30)))) (opor (snd3 (tf6 tv31)) (snd3 (tf6 tv30)))) (myand (myand (mynot (snd3 (tf6 tv30))) (mynot (third3 (tf6 tv31)))) (opor (snd3 (tf6 tv31)) (fourth3 (tf6 tv31))))) (opor (fourth3 (tf6 tv31)) (fourth3 (tf6 tv30))))))))
  (assert (forall ((tv26 CList)) (= (tf6 tv26) (tf7 tv26))))
  (assert (forall ((tv25 CList)) (= (reprNew tv25) (tf6 tv25))))
  (assert (forall ((tv32 CList)) (= (mainNew tv32) (fst3 (reprNew tv32)))))
  (assert (not (forall ((inp0 CList)) (= (main inp0) (mainNew inp0)))))
  (check-sat)
