  (declare-datatypes () ((MyBool (MyTrue) (MyFalse))))
  (declare-datatypes () ((Nat (Zero) (Succ (proj_Succ_0 Nat)))))
  (declare-datatypes () ((Tree (Leaf (proj_Leaf_0 Nat)) (Node (proj_Node_0 Nat) (proj_Node_1 Tree) (proj_Node_2 Tree)))))
  (declare-datatypes () ((List (Elt (proj_Elt_0 Nat)) (Cons (proj_Cons_0 Nat) (proj_Cons_1 List)))))
  (declare-fun lq (Nat Nat) MyBool)
  (declare-fun ite2 (MyBool Nat Nat) Nat)
  (declare-fun min (Nat Nat) Nat)
  (declare-fun max (Nat Nat) Nat)
  (declare-fun tf1 (Tree) Nat)
  (declare-fun tf0 (Tree) Nat)
  (declare-fun tmin (Tree) Nat)
  (declare-fun tf3 (Tree) Nat)
  (declare-fun tf2 (Tree) Nat)
  (declare-fun tmax (Tree) Nat)
  (declare-fun myand (MyBool MyBool) MyBool)
  (declare-fun geq (Nat Nat) MyBool)
  (declare-fun leq (Nat Nat) MyBool)
  (declare-fun tf5 (Tree) MyBool)
  (declare-fun tf4 (Tree) MyBool)
  (declare-fun isbst (Tree) MyBool)
  (declare-fun tf7 (List List) List)
  (declare-fun tf6 (List List) List)
  (declare-fun cat (List List) List)
  (declare-fun tf9 (Tree) List)
  (declare-fun tf8 (Tree) List)
  (declare-fun repr (Tree) List)
  (declare-fun tf11 (List) Nat)
  (declare-fun tf10 (List) Nat)
  (declare-fun spec (List) Nat)
  (declare-fun tf13 (Tree) Tree)
  (declare-fun tf12 (Tree) Tree)
  (declare-fun target (Tree) Tree)
  (declare-fun main (Tree) Nat)
  (declare-fun tf15 (Tree) Nat)
  (declare-fun tf14 (Tree) Nat)
  (declare-fun targetNew (Tree) Nat)
  (declare-fun mainNew (Tree) Nat)
  (assert (= (lq Zero Zero) MyFalse))
  (assert (forall ((x Nat)) (= (lq Zero (Succ x)) MyTrue)))
  (assert (forall ((x Nat)) (= (lq (Succ x) Zero) MyFalse)))
  (assert (forall ((y Nat) (x Nat)) (= (lq (Succ x) (Succ y)) (lq x y))))
  (assert (forall ((y Nat) (x Nat)) (= (ite2 MyTrue x y) x)))
  (assert (forall ((y Nat) (x Nat)) (= (ite2 MyFalse x y) y)))
  (assert (forall ((tv1 Nat) (tv0 Nat)) (= (min tv0 tv1) (ite2 (lq tv0 tv1) tv0 tv1))))
  (assert (forall ((tv3 Nat) (tv2 Nat)) (= (max tv2 tv3) (ite2 (lq tv2 tv3) tv3 tv2))))
  (assert (forall ((tv7 Nat)) (= (tf1 (Leaf tv7)) tv7)))
  (assert (forall ((tv10 Tree) (tv9 Tree) (tv8 Nat)) (= (tf1 (Node tv8 tv9 tv10)) (min tv8 (min (tf0 tv9) (tf0 tv10))))))
  (assert (forall ((tv5 Tree)) (= (tf0 tv5) (tf1 tv5))))
  (assert (forall ((tv4 Tree)) (= (tmin tv4) (tf0 tv4))))
  (assert (forall ((tv14 Nat)) (= (tf3 (Leaf tv14)) tv14)))
  (assert (forall ((tv16 Tree) (tv17 Tree) (tv15 Nat)) (= (tf3 (Node tv15 tv16 tv17)) (max tv15 (max (tf2 tv16) (tf2 tv17))))))
  (assert (forall ((tv12 Tree)) (= (tf2 tv12) (tf3 tv12))))
  (assert (forall ((tv11 Tree)) (= (tmax tv11) (tf2 tv11))))
  (assert (forall ((x MyBool)) (= (myand MyFalse x) MyFalse)))
  (assert (forall ((true MyBool)) (= (myand true MyFalse) MyFalse)))
  (assert (= (myand MyTrue MyTrue) MyTrue))
  (assert (= (geq Zero Zero) MyTrue))
  (assert (forall ((x Nat)) (= (geq Zero (Succ x)) MyFalse)))
  (assert (forall ((x Nat)) (= (geq (Succ x) Zero) MyTrue)))
  (assert (forall ((y Nat) (x Nat)) (= (geq (Succ x) (Succ y)) (geq x y))))
  (assert (forall ((x Nat)) (= (leq Zero x) MyTrue)))
  (assert (forall ((x Nat)) (= (leq (Succ x) Zero) MyFalse)))
  (assert (forall ((y Nat) (x Nat)) (= (leq (Succ x) (Succ y)) (leq x y))))
  (assert (forall ((tv21 Nat)) (= (tf5 (Leaf tv21)) MyTrue)))
  (assert (forall ((tv24 Tree) (tv23 Tree) (tv22 Nat)) (= (tf5 (Node tv22 tv23 tv24)) (myand (myand (geq tv22 (tmax tv23)) (leq tv22 (tmin tv24))) (myand (tf4 tv23) (tf4 tv24))))))
  (assert (forall ((tv19 Tree)) (= (tf4 tv19) (tf5 tv19))))
  (assert (forall ((tv18 Tree)) (= (isbst tv18) (tf4 tv18))))
  (assert (forall ((tv32 List) (tv31 Nat) (tv30 List)) (= (tf7 tv30 (Cons tv31 tv32)) (Cons tv31 (tf6 tv32 tv30)))))
  (assert (forall ((tv33 Nat) (tv30 List)) (= (tf7 tv30 (Elt tv33)) (Cons tv33 tv30))))
  (assert (forall ((tv28 List) (tv27 List)) (= (tf6 tv27 tv28) (tf7 tv28 tv27))))
  (assert (forall ((tv26 List) (tv25 List)) (= (cat tv25 tv26) (tf6 tv25 tv26))))
  (assert (forall ((tv37 Nat)) (= (tf9 (Leaf tv37)) (Elt tv37))))
  (assert (forall ((tv40 Tree) (tv39 Tree) (tv38 Nat)) (= (tf9 (Node tv38 tv39 tv40)) (cat (tf8 tv39) (Cons tv38 (tf8 tv40))))))
  (assert (forall ((tv35 Tree)) (= (tf8 tv35) (tf9 tv35))))
  (assert (forall ((tv34 Tree)) (= (repr tv34) (tf8 tv34))))
  (assert (forall ((tv44 Nat)) (= (tf11 (Elt tv44)) tv44)))
  (assert (forall ((tv46 List) (tv45 Nat)) (= (tf11 (Cons tv45 tv46)) (max tv45 (tf10 tv46)))))
  (assert (forall ((tv42 List)) (= (tf10 tv42) (tf11 tv42))))
  (assert (forall ((tv41 List)) (= (spec tv41) (tf10 tv41))))
  (assert (forall ((tv50 Nat)) (= (tf13 (Leaf tv50)) (Leaf tv50))))
  (assert (forall ((tv53 Tree) (tv52 Tree) (tv51 Nat)) (= (tf13 (Node tv51 tv52 tv53)) (Node tv51 tv52 (tf12 tv53)))))
  (assert (forall ((tv48 Tree)) (= (tf12 tv48) (tf13 tv48))))
  (assert (forall ((tv47 Tree)) (= (target tv47) (tf12 tv47))))
  (assert (forall ((tv54 Tree)) (= (main tv54) (ite2 (isbst tv54) (spec (repr (target tv54))) Zero))))
  (assert (forall ((tv58 Nat)) (= (tf15 (Leaf tv58)) tv58)))
  (assert (forall ((tv61 Tree) (tv60 Tree) (tv59 Nat)) (= (tf15 (Node tv59 tv60 tv61)) (tf14 tv61))))
  (assert (forall ((tv56 Tree)) (= (tf14 tv56) (tf15 tv56))))
  (assert (forall ((tv55 Tree)) (= (targetNew tv55) (tf14 tv55))))
  (assert (forall ((tv62 Tree)) (= (mainNew tv62) (ite2 (isbst tv62) (targetNew tv62) Zero))))
  (assert (not (forall ((inp0 Tree)) (= (main inp0) (mainNew inp0)))))
  (check-sat)
