  (declare-datatypes () ((MyBool (MyTrue) (MyFalse))))
  (declare-datatypes () ((Nat (Zero) (Succ (proj_Succ_0 Nat)))))
  (declare-datatypes () ((List (Elt (proj_Elt_0 Nat)) (Cons (proj_Cons_0 Nat) (proj_Cons_1 List)))))
  (declare-datatypes () ((CList (Single (proj_Single_0 Nat)) (Concat (proj_Concat_0 Nat) (proj_Concat_1 CList) (proj_Concat_2 CList)))))
  (declare-fun tf1 (List List) List)
  (declare-fun tf0 (List List) List)
  (declare-fun cat (List List) List)
  (declare-fun tf3 (CList) List)
  (declare-fun tf2 (CList) List)
  (declare-fun repr (CList) List)
  (declare-fun lq (Nat Nat) MyBool)
  (declare-fun ite2 (MyBool Nat Nat) Nat)
  (declare-fun max (Nat Nat) Nat)
  (declare-fun min (Nat Nat) Nat)
  (declare-fun tf5 (CList) Nat)
  (declare-fun tf4 (CList) Nat)
  (declare-fun tf7 (CList) Nat)
  (declare-fun tf6 (CList) Nat)
  (declare-fun myand (MyBool MyBool) MyBool)
  (declare-fun tf9 (CList) MyBool)
  (declare-fun tf8 (CList) MyBool)
  (declare-fun isparti (CList) MyBool)
  (declare-datatypes () ((Tuple3 (MakeTuple3 (proj_MakeTuple3_0 Nat) (proj_MakeTuple3_1 MyBool)))))
  (declare-fun geq (Nat Nat) MyBool)
  (declare-fun snd3 (Tuple3) MyBool)
  (declare-fun plus (Nat Nat) Nat)
  (declare-fun fst3 (Tuple3) Nat)
  (declare-fun tf11 (List) Tuple3)
  (declare-fun tf10 (List) Tuple3)
  (declare-fun spec (List) Nat)
  (declare-fun leq (Nat Nat) MyBool)
  (declare-fun ite4 (MyBool CList CList) CList)
  (declare-fun tf13 (CList CList) CList)
  (declare-fun tf12 (CList) CList)
  (declare-fun target (CList) CList)
  (declare-fun main (CList) Nat)
  (declare-fun tf15 (CList) Nat)
  (declare-fun tf14 (CList) Nat)
  (declare-fun targetNew (CList) Nat)
  (declare-fun mainNew (CList) Nat)
  (assert (forall ((tv6 Nat) (tv5 List)) (= (tf1 tv5 (Elt tv6)) (Cons tv6 tv5))))
  (assert (forall ((tv8 List) (tv7 Nat) (tv5 List)) (= (tf1 tv5 (Cons tv7 tv8)) (Cons tv7 (tf0 tv8 tv5)))))
  (assert (forall ((tv3 List) (tv2 List)) (= (tf0 tv2 tv3) (tf1 tv3 tv2))))
  (assert (forall ((tv1 List) (tv0 List)) (= (cat tv0 tv1) (tf0 tv0 tv1))))
  (assert (forall ((tv12 Nat)) (= (tf3 (Single tv12)) (Elt tv12))))
  (assert (forall ((tv15 CList) (tv14 CList) (tv13 Nat)) (= (tf3 (Concat tv13 tv14 tv15)) (cat (tf2 tv14) (tf2 tv15)))))
  (assert (forall ((tv10 CList)) (= (tf2 tv10) (tf3 tv10))))
  (assert (forall ((tv9 CList)) (= (repr tv9) (tf2 tv9))))
  (assert (= (lq Zero Zero) MyFalse))
  (assert (forall ((x Nat)) (= (lq Zero (Succ x)) MyTrue)))
  (assert (forall ((x Nat)) (= (lq (Succ x) Zero) MyFalse)))
  (assert (forall ((y Nat) (x Nat)) (= (lq (Succ x) (Succ y)) (lq x y))))
  (assert (forall ((y Nat) (x Nat)) (= (ite2 MyTrue x y) x)))
  (assert (forall ((y Nat) (x Nat)) (= (ite2 MyFalse x y) y)))
  (assert (forall ((tv17 Nat) (tv16 Nat)) (= (max tv16 tv17) (ite2 (lq tv16 tv17) tv17 tv16))))
  (assert (forall ((tv19 Nat) (tv18 Nat)) (= (min tv18 tv19) (ite2 (lq tv18 tv19) tv18 tv19))))
  (assert (forall ((tv23 Nat)) (= (tf5 (Single tv23)) tv23)))
  (assert (forall ((tv25 CList) (tv26 CList) (tv24 Nat)) (= (tf5 (Concat tv24 tv25 tv26)) (max (tf4 tv25) (tf4 tv26)))))
  (assert (forall ((tv21 CList)) (= (tf4 tv21) (tf5 tv21))))
  (assert (forall ((tv29 Nat)) (= (tf7 (Single tv29)) tv29)))
  (assert (forall ((tv32 CList) (tv31 CList) (tv30 Nat)) (= (tf7 (Concat tv30 tv31 tv32)) (min (tf6 tv31) (tf6 tv32)))))
  (assert (forall ((tv27 CList)) (= (tf6 tv27) (tf7 tv27))))
  (assert (forall ((x MyBool)) (= (myand MyFalse x) MyFalse)))
  (assert (forall ((true MyBool)) (= (myand true MyFalse) MyFalse)))
  (assert (= (myand MyTrue MyTrue) MyTrue))
  (assert (forall ((tv35 Nat)) (= (tf9 (Single tv35)) MyTrue)))
  (assert (forall ((tv38 CList) (tv37 CList) (tv36 Nat)) (= (tf9 (Concat tv36 tv37 tv38)) (myand (myand (lq (tf4 tv37) tv36) (lq tv36 (tf6 tv38))) (myand (tf8 tv37) (tf8 tv38))))))
  (assert (forall ((tv33 CList)) (= (tf8 tv33) (tf9 tv33))))
  (assert (forall ((tv20 CList)) (= (isparti tv20) (tf8 tv20))))
  (assert (= (geq Zero Zero) MyTrue))
  (assert (forall ((x Nat)) (= (geq Zero (Succ x)) MyFalse)))
  (assert (forall ((x Nat)) (= (geq (Succ x) Zero) MyTrue)))
  (assert (forall ((y Nat) (x Nat)) (= (geq (Succ x) (Succ y)) (geq x y))))
  (assert (forall ((x1 MyBool) (x0 Nat)) (= (snd3 (MakeTuple3 x0 x1)) x1)))
  (assert (forall ((x Nat)) (= (plus Zero x) x)))
  (assert (forall ((y Nat) (x Nat)) (= (plus (Succ x) y) (Succ (plus x y)))))
  (assert (forall ((x1 MyBool) (x0 Nat)) (= (fst3 (MakeTuple3 x0 x1)) x0)))
  (assert (forall ((tv42 Nat)) (= (tf11 (Elt tv42)) (MakeTuple3 (max Zero tv42) (geq tv42 Zero)))))
  (assert (forall ((tv44 List) (tv43 Nat)) (= (tf11 (Cons tv43 tv44)) (MakeTuple3 (ite2 (myand (geq tv43 Zero) (snd3 (tf10 tv44))) (plus (fst3 (tf10 tv44)) tv43) (fst3 (tf10 tv44))) (myand (geq tv43 Zero) (snd3 (tf10 tv44)))))))
  (assert (forall ((tv40 List)) (= (tf10 tv40) (tf11 tv40))))
  (assert (forall ((tv39 List)) (= (spec tv39) (fst3 (tf10 tv39)))))
  (assert (forall ((x Nat)) (= (leq Zero x) MyTrue)))
  (assert (forall ((x Nat)) (= (leq (Succ x) Zero) MyFalse)))
  (assert (forall ((y Nat) (x Nat)) (= (leq (Succ x) (Succ y)) (leq x y))))
  (assert (forall ((y CList) (x CList)) (= (ite4 MyTrue x y) x)))
  (assert (forall ((y CList) (x CList)) (= (ite4 MyFalse x y) y)))
  (assert (forall ((tv49 Nat) (tv48 CList)) (= (tf13 tv48 (Single tv49)) tv48)))
  (assert (forall ((tv51 CList) (tv50 Nat) (tv52 CList) (tv48 CList)) (= (tf13 tv48 (Concat tv50 tv51 tv52)) (ite4 (leq tv50 Zero) (Concat tv50 tv51 (tf12 tv52)) (Concat tv50 (tf12 tv51) (tf12 tv52))))))
  (assert (forall ((tv46 CList)) (= (tf12 tv46) (tf13 tv46 tv46))))
  (assert (forall ((tv45 CList)) (= (target tv45) (tf12 tv45))))
  (assert (forall ((tv53 CList)) (= (main tv53) (ite2 (isparti tv53) (spec (repr (target tv53))) Zero))))
  (assert (forall ((tv57 Nat)) (= (tf15 (Single tv57)) (max tv57 Zero))))
  (assert (forall ((tv60 CList) (tv59 CList) (tv58 Nat)) (= (tf15 (Concat tv58 tv59 tv60)) (ite2 (leq tv58 Zero) (tf14 tv60) (plus (tf14 tv60) (tf14 tv59))))))
  (assert (forall ((tv55 CList)) (= (tf14 tv55) (tf15 tv55))))
  (assert (forall ((tv54 CList)) (= (targetNew tv54) (tf14 tv54))))
  (assert (forall ((tv61 CList)) (= (mainNew tv61) (ite2 (isparti tv61) (targetNew tv61) Zero))))
  (assert (not (forall ((inp0 CList)) (= (main inp0) (mainNew inp0)))))
  (check-sat)
