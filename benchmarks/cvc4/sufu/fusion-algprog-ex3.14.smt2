  (declare-datatypes () ((MyBool (MyTrue) (MyFalse))))
  (declare-datatypes () ((Nat (Zero) (Succ (proj_Succ_0 Nat)))))
  (declare-datatypes () ((Tree (Tip (proj_Tip_0 Nat)) (Bin (proj_Bin_0 Tree) (proj_Bin_1 Tree)))))
  (declare-datatypes () ((Tuple1 (MakeTuple1 (proj_MakeTuple1_0 Nat) (proj_MakeTuple1_1 Nat)))))
  (declare-datatypes () ((PTree (Ptip (proj_Ptip_0 Nat) (proj_Ptip_1 Nat)) (Pbin (proj_Pbin_0 PTree) (proj_Pbin_1 PTree)))))
  (declare-fun plus (Nat Nat) Nat)
  (declare-fun tf3 (PTree) PTree)
  (declare-fun tf2 (PTree) PTree)
  (declare-fun tf1 (Tree) PTree)
  (declare-fun tf0 (Tree) PTree)
  (declare-fun tri (Tree) PTree)
  (declare-fun times (Nat Nat) Nat)
  (declare-fun tf5 (PTree) Nat)
  (declare-fun tf4 (PTree) Nat)
  (declare-fun tsum (PTree) Nat)
  (declare-fun main (Tree) Nat)
  (declare-fun fst1 (Tuple1) Nat)
  (declare-fun snd1 (Tuple1) Nat)
  (declare-fun tf7 (Tree) Tuple1)
  (declare-fun tf6 (Tree) Tuple1)
  (declare-fun triNew (Tree) Tuple1)
  (declare-fun mainNew (Tree) Nat)
  (assert (forall ((x Nat)) (= (plus Zero x) x)))
  (assert (forall ((y Nat) (x Nat)) (= (plus (Succ x) y) (Succ (plus x y)))))
  (assert (forall ((tv9 Nat) (tv8 Nat)) (= (tf3 (Ptip tv8 tv9)) (Ptip (plus tv8 (Succ Zero)) tv9))))
  (assert (forall ((tv11 PTree) (tv10 PTree)) (= (tf3 (Pbin tv10 tv11)) (Pbin (tf2 tv10) (tf2 tv11)))))
  (assert (forall ((tv6 PTree)) (= (tf2 tv6) (tf3 tv6))))
  (assert (forall ((tv3 Nat)) (= (tf1 (Tip tv3)) (Ptip Zero tv3))))
  (assert (forall ((tv5 Tree) (tv4 Tree)) (= (tf1 (Bin tv4 tv5)) (Pbin (tf2 (tf0 tv4)) (tf2 (tf0 tv5))))))
  (assert (forall ((tv1 Tree)) (= (tf0 tv1) (tf1 tv1))))
  (assert (forall ((tv0 Tree)) (= (tri tv0) (tf0 tv0))))
  (assert (forall ((x Nat)) (= (times Zero x) Zero)))
  (assert (forall ((y Nat) (x Nat)) (= (times (Succ x) y) (plus (times x y) y))))
  (assert (forall ((tv16 Nat) (tv15 Nat)) (= (tf5 (Ptip tv15 tv16)) (times tv15 tv16))))
  (assert (forall ((tv18 PTree) (tv17 PTree)) (= (tf5 (Pbin tv17 tv18)) (plus (tf4 tv17) (tf4 tv18)))))
  (assert (forall ((tv13 PTree)) (= (tf4 tv13) (tf5 tv13))))
  (assert (forall ((tv12 PTree)) (= (tsum tv12) (tf4 tv12))))
  (assert (forall ((tv19 Tree)) (= (main tv19) (tsum (tri tv19)))))
  (assert (forall ((x1 Nat) (x0 Nat)) (= (fst1 (MakeTuple1 x0 x1)) x0)))
  (assert (forall ((x1 Nat) (x0 Nat)) (= (snd1 (MakeTuple1 x0 x1)) x1)))
  (assert (forall ((tv23 Nat)) (= (tf7 (Tip tv23)) (MakeTuple1 Zero tv23))))
  (assert (forall ((tv25 Tree) (tv24 Tree)) (= (tf7 (Bin tv24 tv25)) (MakeTuple1 (plus (plus (plus (fst1 (tf6 tv24)) (snd1 (tf6 tv24))) (fst1 (tf6 tv25))) (snd1 (tf6 tv25))) (plus (snd1 (tf6 tv24)) (snd1 (tf6 tv25)))))))
  (assert (forall ((tv21 Tree)) (= (tf6 tv21) (tf7 tv21))))
  (assert (forall ((tv20 Tree)) (= (triNew tv20) (tf6 tv20))))
  (assert (forall ((tv26 Tree)) (= (mainNew tv26) (fst1 (triNew tv26)))))
  (assert (not (forall ((inp0 Tree)) (= (main inp0) (mainNew inp0)))))
  (check-sat)
