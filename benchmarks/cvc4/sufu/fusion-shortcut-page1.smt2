  (declare-datatypes () ((MyBool (MyTrue) (MyFalse))))
  (declare-datatypes () ((Unit (Null))))
  (declare-datatypes () ((Nat (Zero) (Succ (proj_Succ_0 Nat)))))
  (declare-datatypes () ((List (Nil (proj_Nil_0 Unit)) (Cons (proj_Cons_0 Nat) (proj_Cons_1 List)))))
  (declare-datatypes () ((BoolList (Bnil (proj_Bnil_0 Unit)) (Bcons (proj_Bcons_0 MyBool) (proj_Bcons_1 BoolList)))))
  (declare-fun tf1 (List) BoolList)
  (declare-fun tf0 (List) BoolList)
  (declare-fun map (List) BoolList)
  (declare-fun geq (Nat Nat) MyBool)
  (declare-fun p (Nat) MyBool)
  (declare-fun myand (MyBool MyBool) MyBool)
  (declare-fun tf3 (BoolList) MyBool)
  (declare-fun tf2 (BoolList) MyBool)
  (declare-fun all (BoolList) MyBool)
  (declare-fun main (List) MyBool)
  (declare-fun lq (Nat Nat) MyBool)
  (declare-fun tf5 (List) MyBool)
  (declare-fun tf4 (List) MyBool)
  (declare-fun mapNew (List) MyBool)
  (declare-fun mainNew (List) MyBool)
  (assert (forall ((tv6 Unit)) (= (tf1 (Nil tv6)) (Bnil Null))))
  (assert (forall ((tv8 List) (tv7 Nat)) (= (tf1 (Cons tv7 tv8)) (Bcons (p tv7) (tf0 tv8)))))
  (assert (forall ((tv3 List)) (= (tf0 tv3) (tf1 tv3))))
  (assert (forall ((tv1 List)) (= (map tv1) (tf0 tv1))))
  (assert (= (geq Zero Zero) MyTrue))
  (assert (forall ((x Nat)) (= (geq Zero (Succ x)) MyFalse)))
  (assert (forall ((x Nat)) (= (geq (Succ x) Zero) MyTrue)))
  (assert (forall ((y Nat) (x Nat)) (= (geq (Succ x) (Succ y)) (geq x y))))
  (assert (forall ((tv9 Nat)) (= (p tv9) (geq Zero tv9))))
  (assert (forall ((x MyBool)) (= (myand MyFalse x) MyFalse)))
  (assert (forall ((true MyBool)) (= (myand true MyFalse) MyFalse)))
  (assert (= (myand MyTrue MyTrue) MyTrue))
  (assert (forall ((tv13 Unit)) (= (tf3 (Bnil tv13)) MyTrue)))
  (assert (forall ((tv15 BoolList) (tv14 MyBool)) (= (tf3 (Bcons tv14 tv15)) (myand tv14 (tf2 tv15)))))
  (assert (forall ((tv11 BoolList)) (= (tf2 tv11) (tf3 tv11))))
  (assert (forall ((tv10 BoolList)) (= (all tv10) (tf2 tv10))))
  (assert (forall ((tv16 List)) (= (main tv16) (all (map tv16)))))
  (assert (= (lq Zero Zero) MyFalse))
  (assert (forall ((x Nat)) (= (lq Zero (Succ x)) MyTrue)))
  (assert (forall ((x Nat)) (= (lq (Succ x) Zero) MyFalse)))
  (assert (forall ((y Nat) (x Nat)) (= (lq (Succ x) (Succ y)) (lq x y))))
  (assert (forall ((tv21 Unit)) (= (tf5 (Nil tv21)) MyTrue)))
  (assert (forall ((tv23 List) (tv22 Nat)) (= (tf5 (Cons tv22 tv23)) (myand (tf4 tv23) (lq tv22 (Succ Zero))))))
  (assert (forall ((tv19 List)) (= (tf4 tv19) (tf5 tv19))))
  (assert (forall ((tv18 List)) (= (mapNew tv18) (tf4 tv18))))
  (assert (forall ((tv24 List)) (= (mainNew tv24) (mapNew tv24))))
  (assert (not (forall ((inp0 List)) (= (main inp0) (mainNew inp0)))))
  (check-sat)
