  (declare-datatypes () ((MyBool (MyTrue) (MyFalse))))
  (declare-datatypes () ((Nat (Zero) (Succ (proj_Succ_0 Nat)))))
  (declare-datatypes () ((Tuple0 (MakeTuple0 (proj_MakeTuple0_0 Nat) (proj_MakeTuple0_1 Nat)))))
  (declare-datatypes () ((CList (Ctwo (proj_Ctwo_0 Nat) (proj_Ctwo_1 Nat)) (Concat (proj_Concat_0 CList) (proj_Concat_1 CList)))))
  (declare-datatypes () ((List (Two (proj_Two_0 Nat) (proj_Two_1 Nat)) (Cons (proj_Cons_0 Nat) (proj_Cons_1 List)))))
  (declare-fun tf1 (List List) List)
  (declare-fun tf0 (List List) List)
  (declare-fun cat (List List) List)
  (declare-fun tf3 (CList) List)
  (declare-fun tf2 (CList) List)
  (declare-fun repr (CList) List)
  (declare-fun lq (Nat Nat) MyBool)
  (declare-fun ite3 (MyBool Nat Nat) Nat)
  (declare-fun min (Nat Nat) Nat)
  (declare-fun max (Nat Nat) Nat)
  (declare-fun fst0 (Tuple0) Nat)
  (declare-fun snd0 (Tuple0) Nat)
  (declare-fun tf5 (List) Tuple0)
  (declare-fun tf4 (List) Tuple0)
  (declare-fun spec (List) Nat)
  (declare-fun myand (MyBool MyBool) MyBool)
  (declare-fun gq (Nat Nat) MyBool)
  (declare-fun tf7 (Nat List) MyBool)
  (declare-fun tf6 (Nat List) MyBool)
  (declare-fun tf9 (List) MyBool)
  (declare-fun tf8 (List) MyBool)
  (declare-fun issorted (List) MyBool)
  (declare-fun tf11 (CList CList) CList)
  (declare-fun tf10 (CList) CList)
  (declare-fun target (CList) CList)
  (declare-fun main (CList) Nat)
  (declare-fun tf13 (CList) Nat)
  (declare-fun tf12 (CList) Nat)
  (declare-fun targetNew (CList) Nat)
  (declare-fun mainNew (CList) Nat)
  (assert (forall ((tv7 Nat) (tv6 Nat) (tv5 List)) (= (tf1 tv5 (Two tv6 tv7)) (Cons tv6 (Cons tv7 tv5)))))
  (assert (forall ((tv9 List) (tv8 Nat) (tv5 List)) (= (tf1 tv5 (Cons tv8 tv9)) (Cons tv8 (tf0 tv9 tv5)))))
  (assert (forall ((tv3 List) (tv2 List)) (= (tf0 tv2 tv3) (tf1 tv3 tv2))))
  (assert (forall ((tv1 List) (tv0 List)) (= (cat tv0 tv1) (tf0 tv0 tv1))))
  (assert (forall ((tv14 Nat) (tv13 Nat)) (= (tf3 (Ctwo tv13 tv14)) (Two tv13 tv14))))
  (assert (forall ((tv16 CList) (tv15 CList)) (= (tf3 (Concat tv15 tv16)) (cat (tf2 tv15) (tf2 tv16)))))
  (assert (forall ((tv11 CList)) (= (tf2 tv11) (tf3 tv11))))
  (assert (forall ((tv10 CList)) (= (repr tv10) (tf2 tv10))))
  (assert (= (lq Zero Zero) MyFalse))
  (assert (forall ((x Nat)) (= (lq Zero (Succ x)) MyTrue)))
  (assert (forall ((x Nat)) (= (lq (Succ x) Zero) MyFalse)))
  (assert (forall ((y Nat) (x Nat)) (= (lq (Succ x) (Succ y)) (lq x y))))
  (assert (forall ((y Nat) (x Nat)) (= (ite3 MyTrue x y) x)))
  (assert (forall ((y Nat) (x Nat)) (= (ite3 MyFalse x y) y)))
  (assert (forall ((tv18 Nat) (tv17 Nat)) (= (min tv17 tv18) (ite3 (lq tv17 tv18) tv17 tv18))))
  (assert (forall ((tv20 Nat) (tv19 Nat)) (= (max tv19 tv20) (ite3 (lq tv19 tv20) tv20 tv19))))
  (assert (forall ((x1 Nat) (x0 Nat)) (= (fst0 (MakeTuple0 x0 x1)) x0)))
  (assert (forall ((x1 Nat) (x0 Nat)) (= (snd0 (MakeTuple0 x0 x1)) x1)))
  (assert (forall ((tv25 Nat) (tv24 Nat)) (= (tf5 (Two tv24 tv25)) (MakeTuple0 (min tv24 tv25) (max tv24 tv25)))))
  (assert (forall ((tv27 List) (tv26 Nat)) (= (tf5 (Cons tv26 tv27)) (MakeTuple0 (min (fst0 (tf4 tv27)) tv26) (min (snd0 (tf4 tv27)) (max (fst0 (tf4 tv27)) tv26))))))
  (assert (forall ((tv22 List)) (= (tf4 tv22) (tf5 tv22))))
  (assert (forall ((tv21 List)) (= (spec tv21) (snd0 (tf4 tv21)))))
  (assert (forall ((x MyBool)) (= (myand MyFalse x) MyFalse)))
  (assert (forall ((true MyBool)) (= (myand true MyFalse) MyFalse)))
  (assert (= (myand MyTrue MyTrue) MyTrue))
  (assert (forall ((x Nat)) (= (gq Zero x) MyFalse)))
  (assert (forall ((x Nat)) (= (gq (Succ x) Zero) MyTrue)))
  (assert (forall ((y Nat) (x Nat)) (= (gq (Succ x) (Succ y)) (gq x y))))
  (assert (forall ((tv33 Nat) (tv34 Nat) (tv32 Nat)) (= (tf7 tv32 (Two tv33 tv34)) (myand (gq tv32 tv33) (gq tv33 tv34)))))
  (assert (forall ((tv35 Nat) (tv36 List) (tv32 Nat)) (= (tf7 tv32 (Cons tv35 tv36)) (myand (gq tv32 tv35) (tf6 tv35 tv36)))))
  (assert (forall ((tv30 List) (tv29 Nat)) (= (tf6 tv29 tv30) (tf7 tv29 tv30))))
  (assert (forall ((tv39 Nat) (tv38 Nat)) (= (tf9 (Two tv38 tv39)) (gq tv38 tv39))))
  (assert (forall ((tv41 List) (tv40 Nat)) (= (tf9 (Cons tv40 tv41)) (tf6 tv40 tv41))))
  (assert (forall ((tv37 List)) (= (tf8 tv37) (tf9 tv37))))
  (assert (forall ((tv28 List)) (= (issorted tv28) (tf8 tv28))))
  (assert (forall ((tv47 Nat) (tv46 Nat) (tv45 CList)) (= (tf11 tv45 (Ctwo tv46 tv47)) tv45)))
  (assert (forall ((tv49 CList) (tv48 CList) (tv45 CList)) (= (tf11 tv45 (Concat tv48 tv49)) (Concat tv48 (tf10 tv49)))))
  (assert (forall ((tv43 CList)) (= (tf10 tv43) (tf11 tv43 tv43))))
  (assert (forall ((tv42 CList)) (= (target tv42) (tf10 tv42))))
  (assert (forall ((tv50 CList)) (= (main tv50) (ite3 (issorted (repr tv50)) (spec (repr (target tv50))) Zero))))
  (assert (forall ((tv55 Nat) (tv54 Nat)) (= (tf13 (Ctwo tv54 tv55)) tv54)))
  (assert (forall ((tv57 CList) (tv56 CList)) (= (tf13 (Concat tv56 tv57)) (tf12 tv57))))
  (assert (forall ((tv52 CList)) (= (tf12 tv52) (tf13 tv52))))
  (assert (forall ((tv51 CList)) (= (targetNew tv51) (tf12 tv51))))
  (assert (forall ((tv58 CList)) (= (mainNew tv58) (ite3 (issorted (repr tv58)) (targetNew tv58) Zero))))
  (assert (not (forall ((inp0 CList)) (= (main inp0) (mainNew inp0)))))
  (check-sat)
