  (declare-datatypes () ((MyBool (MyTrue) (MyFalse))))
  (declare-datatypes () ((Unit (Null))))
  (declare-datatypes () ((List (Cons (proj_Cons_0 MyBool) (proj_Cons_1 List)) (Nil (proj_Nil_0 Unit)))))
  (declare-fun tf1 (List List) List)
  (declare-fun tf0 (List) List)
  (declare-datatypes () ((Nat (Zero) (Succ (proj_Succ_0 Nat)))))
  (declare-fun tf2 (List) Nat)
  (declare-fun singlepass (List) Nat)
  (declare-fun myand (MyBool MyBool) MyBool)
  (declare-fun mynot (MyBool) MyBool)
  (declare-fun plus (Nat Nat) Nat)
  (declare-fun ite1 (MyBool Nat Nat) Nat)
  (declare-fun tf4 (MyBool Nat List) Nat)
  (declare-fun tf3 (MyBool Nat List) Nat)
  (declare-fun cnt1s (List) Nat)
  (declare-fun main (List) Nat)
  (declare-datatypes () ((Tuple2 (MakeTuple2 (proj_MakeTuple2_0 Nat) (proj_MakeTuple2_1 MyBool)))))
  (declare-fun myor (MyBool MyBool) MyBool)
  (declare-fun snd2 (Tuple2) MyBool)
  (declare-fun fst2 (Tuple2) Nat)
  (declare-fun tf6 (List) Tuple2)
  (declare-fun tf5 (List) Tuple2)
  (declare-fun tf7 (List) Nat)
  (declare-fun singlepassNew (List) Nat)
  (declare-fun mainNew (List) Nat)
  (assert (forall ((tv5 Unit) (tv4 List)) (= (tf1 tv4 (Nil tv5)) tv4)))
  (assert (forall ((tv7 List) (tv6 MyBool) (tv4 List)) (= (tf1 tv4 (Cons tv6 tv7)) (Cons tv6 (tf0 tv7)))))
  (assert (forall ((tv2 List)) (= (tf0 tv2) (tf1 tv2 tv2))))
  (assert (forall ((tv9 List)) (= (tf2 tv9) (cnt1s (tf0 tv9)))))
  (assert (forall ((tv1 List)) (= (singlepass tv1) (tf2 tv1))))
  (assert (forall ((x MyBool)) (= (myand MyFalse x) MyFalse)))
  (assert (forall ((true MyBool)) (= (myand true MyFalse) MyFalse)))
  (assert (= (myand MyTrue MyTrue) MyTrue))
  (assert (= (mynot MyTrue) MyFalse))
  (assert (= (mynot MyFalse) MyTrue))
  (assert (forall ((x Nat)) (= (plus Zero x) x)))
  (assert (forall ((y Nat) (x Nat)) (= (plus (Succ x) y) (Succ (plus x y)))))
  (assert (forall ((y Nat) (x Nat)) (= (ite1 MyTrue x y) x)))
  (assert (forall ((y Nat) (x Nat)) (= (ite1 MyFalse x y) y)))
  (assert (forall ((tv16 Nat) (tv17 Unit) (tv15 MyBool)) (= (tf4 tv15 tv16 (Nil tv17)) tv16)))
  (assert (forall ((tv16 Nat) (tv19 List) (tv18 MyBool) (tv15 MyBool)) (= (tf4 tv15 tv16 (Cons tv18 tv19)) (tf3 tv18 (ite1 (myand (mynot tv15) tv18) (plus tv16 (Succ Zero)) tv16) tv19))))
  (assert (forall ((tv13 List) (tv12 Nat) (tv11 MyBool)) (= (tf3 tv11 tv12 tv13) (tf4 tv11 tv12 tv13))))
  (assert (forall ((tv10 List)) (= (cnt1s tv10) (tf3 MyFalse Zero tv10))))
  (assert (forall ((tv20 List)) (= (main tv20) (singlepass tv20))))
  (assert (forall ((x MyBool)) (= (myor MyTrue x) MyTrue)))
  (assert (forall ((false MyBool)) (= (myor false MyTrue) MyTrue)))
  (assert (= (myor MyFalse MyFalse) MyFalse))
  (assert (forall ((x1 MyBool) (x0 Nat)) (= (snd2 (MakeTuple2 x0 x1)) x1)))
  (assert (forall ((x1 MyBool) (x0 Nat)) (= (fst2 (MakeTuple2 x0 x1)) x0)))
  (assert (forall ((tv25 Unit)) (= (tf6 (Nil tv25)) (MakeTuple2 Zero MyFalse))))
  (assert (forall ((tv27 List) (tv26 MyBool)) (= (tf6 (Cons tv26 tv27)) (MakeTuple2 (ite1 (myor (mynot tv26) (snd2 (tf5 tv27))) (fst2 (tf5 tv27)) (plus (Succ Zero) (fst2 (tf5 tv27)))) tv26))))
  (assert (forall ((tv23 List)) (= (tf5 tv23) (tf6 tv23))))
  (assert (forall ((tv28 List)) (= (tf7 tv28) (fst2 (tf5 tv28)))))
  (assert (forall ((tv22 List)) (= (singlepassNew tv22) (tf7 tv22))))
  (assert (forall ((tv29 List)) (= (mainNew tv29) (singlepassNew tv29))))
  (assert (not (forall ((inp0 List)) (= (main inp0) (mainNew inp0)))))
  (check-sat)
