  (declare-datatypes () ((MyBool (MyTrue) (MyFalse))))
  (declare-datatypes () ((Unit (Null))))
  (declare-datatypes () ((Nat (Zero) (Succ (proj_Succ_0 Nat)))))
  (declare-datatypes () ((Tree (Nil (proj_Nil_0 Unit)) (Leaf (proj_Leaf_0 Nat)) (Node (proj_Node_0 Nat) (proj_Node_1 Tree) (proj_Node_2 Tree)))))
  (declare-fun plus (Nat Nat) Nat)
  (declare-fun tf1 (Tree) Nat)
  (declare-fun tf0 (Tree) Nat)
  (declare-fun size (Tree) Nat)
  (declare-fun myand (MyBool MyBool) MyBool)
  (declare-fun nateq (Nat Nat) MyBool)
  (declare-fun tf3 (Tree) MyBool)
  (declare-fun tf2 (Tree) MyBool)
  (declare-fun emptyright (Tree) MyBool)
  (declare-fun tf5 (Tree) Nat)
  (declare-fun tf4 (Tree) Nat)
  (declare-fun spec (Tree) Nat)
  (declare-fun tf7 (Tree) Tree)
  (declare-fun tf6 (Tree) Tree)
  (declare-fun target (Tree) Tree)
  (declare-fun ite1 (MyBool Nat) Nat)
  (declare-fun main (Tree) Nat)
  (declare-fun tf9 (Tree) Nat)
  (declare-fun tf8 (Tree) Nat)
  (declare-fun targetNew (Tree) Nat)
  (declare-fun mainNew (Tree) Nat)
  (assert (forall ((x Nat)) (= (plus Zero x) x)))
  (assert (forall ((y Nat) (x Nat)) (= (plus (Succ x) y) (Succ (plus x y)))))
  (assert (forall ((tv3 Unit)) (= (tf1 (Nil tv3)) Zero)))
  (assert (forall ((tv4 Nat)) (= (tf1 (Leaf tv4)) (Succ Zero))))
  (assert (forall ((tv7 Tree) (tv6 Tree) (tv5 Nat)) (= (tf1 (Node tv5 tv6 tv7)) (plus (Succ Zero) (plus (tf0 tv6) (tf0 tv7))))))
  (assert (forall ((tv1 Tree)) (= (tf0 tv1) (tf1 tv1))))
  (assert (forall ((tv0 Tree)) (= (size tv0) (tf0 tv0))))
  (assert (forall ((x MyBool)) (= (myand MyFalse x) MyFalse)))
  (assert (forall ((true MyBool)) (= (myand true MyFalse) MyFalse)))
  (assert (= (myand MyTrue MyTrue) MyTrue))
  (assert (= (nateq Zero Zero) MyTrue))
  (assert (forall ((x Nat)) (= (nateq Zero (Succ x)) MyFalse)))
  (assert (forall ((x Nat)) (= (nateq (Succ x) Zero) MyFalse)))
  (assert (forall ((y Nat) (x Nat)) (= (nateq (Succ x) (Succ y)) (nateq x y))))
  (assert (forall ((tv13 Tree) (tv12 Tree) (tv11 Nat)) (= (tf3 (Node tv11 tv12 tv13)) (myand (nateq Zero (size tv13)) (tf2 tv12)))))
  (assert (forall ((tv14 Unit)) (= (tf3 (Nil tv14)) MyTrue)))
  (assert (forall ((tv15 Nat)) (= (tf3 (Leaf tv15)) MyTrue)))
  (assert (forall ((tv9 Tree)) (= (tf2 tv9) (tf3 tv9))))
  (assert (forall ((tv8 Tree)) (= (emptyright tv8) (tf2 tv8))))
  (assert (forall ((tv19 Unit)) (= (tf5 (Nil tv19)) Zero)))
  (assert (forall ((tv20 Nat)) (= (tf5 (Leaf tv20)) tv20)))
  (assert (forall ((tv23 Tree) (tv22 Tree) (tv21 Nat)) (= (tf5 (Node tv21 tv22 tv23)) (plus tv21 (plus (tf4 tv22) (tf4 tv23))))))
  (assert (forall ((tv17 Tree)) (= (tf4 tv17) (tf5 tv17))))
  (assert (forall ((tv16 Tree)) (= (spec tv16) (tf4 tv16))))
  (assert (forall ((tv27 Unit)) (= (tf7 (Nil tv27)) (Nil Null))))
  (assert (forall ((tv28 Nat)) (= (tf7 (Leaf tv28)) (Leaf tv28))))
  (assert (forall ((tv31 Tree) (tv30 Tree) (tv29 Nat)) (= (tf7 (Node tv29 tv30 tv31)) (Node tv29 (tf6 tv30) tv31))))
  (assert (forall ((tv25 Tree)) (= (tf6 tv25) (tf7 tv25))))
  (assert (forall ((tv24 Tree)) (= (target tv24) (tf6 tv24))))
  (assert (forall ((x Nat)) (= (ite1 MyTrue x) x)))
  (assert (forall ((x Nat)) (= (ite1 MyFalse x) Zero)))
  (assert (forall ((tv32 Tree)) (= (main tv32) (ite1 (emptyright tv32) (spec (target tv32))))))
  (assert (forall ((tv36 Unit)) (= (tf9 (Nil tv36)) Zero)))
  (assert (forall ((tv37 Nat)) (= (tf9 (Leaf tv37)) tv37)))
  (assert (forall ((tv40 Tree) (tv39 Tree) (tv38 Nat)) (= (tf9 (Node tv38 tv39 tv40)) (plus (tf8 tv39) tv38))))
  (assert (forall ((tv34 Tree)) (= (tf8 tv34) (tf9 tv34))))
  (assert (forall ((tv33 Tree)) (= (targetNew tv33) (tf8 tv33))))
  (assert (forall ((tv41 Tree)) (= (mainNew tv41) (ite1 (emptyright tv41) (targetNew tv41)))))
  (assert (not (forall ((inp0 Tree)) (= (main inp0) (mainNew inp0)))))
  (check-sat)
