  (declare-datatypes () ((MyBool (MyTrue) (MyFalse))))
  (declare-datatypes () ((Unit (Null))))
  (declare-datatypes () ((ArithOp (APlus (proj_APlus_0 Unit)) (AMinus (proj_AMinus_0 Unit)) (AGt (proj_AGt_0 Unit)))))
  (declare-datatypes () ((BoolOp (BNot (proj_BNot_0 Unit)) (BAnd (proj_BAnd_0 Unit)) (BOr (proj_BOr_0 Unit)) (BEq (proj_BEq_0 Unit)))))
  (declare-datatypes () ((Nat (Zero) (Succ (proj_Succ_0 Nat)))))
  (declare-datatypes () ((Term (TArithBin (proj_TArithBin_0 ArithOp) (proj_TArithBin_1 Term) (proj_TArithBin_2 Term)) (TBoolBin (proj_TBoolBin_0 BoolOp) (proj_TBoolBin_1 Term) (proj_TBoolBin_2 Term)) (TArithUn (proj_TArithUn_0 ArithOp) (proj_TArithUn_1 Term)) (TBoolUn (proj_TBoolUn_0 BoolOp) (proj_TBoolUn_1 Term)) (TVar (proj_TVar_0 Nat)) (TCInt (proj_TCInt_0 Nat)) (TCBool (proj_TCBool_0 MyBool)))))
  (declare-datatypes () ((Op (OpPlus (proj_OpPlus_0 Unit)) (OpMinus (proj_OpMinus_0 Unit)) (OpNot (proj_OpNot_0 Unit)) (OpAnd (proj_OpAnd_0 Unit)) (OpOr (proj_OpOr_0 Unit)) (OpGt (proj_OpGt_0 Unit)) (OpEq (proj_OpEq_0 Unit)))))
  (declare-datatypes () ((Term2 (Bin (proj_Bin_0 Op) (proj_Bin_1 Term2) (proj_Bin_2 Term2)) (Un (proj_Un_0 Op) (proj_Un_1 Term2)) (Var (proj_Var_0 Nat)) (CInt (proj_CInt_0 Nat)) (CBool (proj_CBool_0 MyBool)))))
  (declare-fun tf0 (Term Term Op) Term)
  (declare-fun mkbin (Term Term Op) Term)
  (declare-fun tf1 (Term Op) Term)
  (declare-fun mkun (Term Op) Term)
  (declare-fun tf3 (Term2) Term)
  (declare-fun tf2 (Term2) Term)
  (declare-fun repr (Term2) Term)
  (declare-fun lq (Nat Nat) MyBool)
  (declare-fun ite6 (MyBool Nat Nat) Nat)
  (declare-fun max (Nat Nat) Nat)
  (declare-fun plus (Nat Nat) Nat)
  (declare-fun tf5 (Term) Nat)
  (declare-fun tf4 (Term) Nat)
  (declare-fun spec (Term) Nat)
  (declare-fun tf7 (Term2) Term2)
  (declare-fun tf6 (Term2) Term2)
  (declare-fun target (Term2) Term2)
  (declare-fun main (Term2) Nat)
  (declare-fun tf9 (Term2) Nat)
  (declare-fun tf8 (Term2) Nat)
  (declare-fun targetNew (Term2) Nat)
  (declare-fun mainNew (Term2) Nat)
  (assert (forall ((tv5 Unit) (tv4 Term) (tv3 Term)) (= (tf0 tv3 tv4 (OpPlus tv5)) (TArithBin (APlus Null) tv4 tv3))))
  (assert (forall ((tv4 Term) (tv6 Unit) (tv3 Term)) (= (tf0 tv3 tv4 (OpMinus tv6)) (TArithBin (AMinus Null) tv4 tv3))))
  (assert (forall ((tv7 Unit) (tv4 Term) (tv3 Term)) (= (tf0 tv3 tv4 (OpNot tv7)) (TBoolBin (BNot Null) tv4 tv3))))
  (assert (forall ((tv8 Unit) (tv4 Term) (tv3 Term)) (= (tf0 tv3 tv4 (OpAnd tv8)) (TBoolBin (BAnd Null) tv4 tv3))))
  (assert (forall ((tv9 Unit) (tv4 Term) (tv3 Term)) (= (tf0 tv3 tv4 (OpOr tv9)) (TBoolBin (BOr Null) tv4 tv3))))
  (assert (forall ((tv4 Term) (tv10 Unit) (tv3 Term)) (= (tf0 tv3 tv4 (OpGt tv10)) (TArithBin (AGt Null) tv4 tv3))))
  (assert (forall ((tv11 Unit) (tv4 Term) (tv3 Term)) (= (tf0 tv3 tv4 (OpEq tv11)) (TBoolBin (BEq Null) tv4 tv3))))
  (assert (forall ((tv2 Op) (tv1 Term) (tv0 Term)) (= (mkbin tv0 tv1 tv2) (tf0 tv1 tv0 tv2))))
  (assert (forall ((tv15 Unit) (tv14 Term)) (= (tf1 tv14 (OpPlus tv15)) (TArithUn (APlus Null) tv14))))
  (assert (forall ((tv16 Unit) (tv14 Term)) (= (tf1 tv14 (OpMinus tv16)) (TArithUn (AMinus Null) tv14))))
  (assert (forall ((tv17 Unit) (tv14 Term)) (= (tf1 tv14 (OpNot tv17)) (TBoolUn (BNot Null) tv14))))
  (assert (forall ((tv18 Unit) (tv14 Term)) (= (tf1 tv14 (OpAnd tv18)) (TBoolUn (BAnd Null) tv14))))
  (assert (forall ((tv19 Unit) (tv14 Term)) (= (tf1 tv14 (OpOr tv19)) (TBoolUn (BOr Null) tv14))))
  (assert (forall ((tv20 Unit) (tv14 Term)) (= (tf1 tv14 (OpGt tv20)) (TArithUn (AGt Null) tv14))))
  (assert (forall ((tv21 Unit) (tv14 Term)) (= (tf1 tv14 (OpEq tv21)) (TBoolUn (BEq Null) tv14))))
  (assert (forall ((tv13 Op) (tv12 Term)) (= (mkun tv12 tv13) (tf1 tv12 tv13))))
  (assert (forall ((tv27 Term2) (tv26 Term2) (tv25 Op)) (= (tf3 (Bin tv25 tv26 tv27)) (mkbin (tf2 tv26) (tf2 tv27) tv25))))
  (assert (forall ((tv29 Term2) (tv28 Op)) (= (tf3 (Un tv28 tv29)) (mkun (tf2 tv29) tv28))))
  (assert (forall ((tv30 Nat)) (= (tf3 (Var tv30)) (TVar tv30))))
  (assert (forall ((tv31 Nat)) (= (tf3 (CInt tv31)) (TCInt tv31))))
  (assert (forall ((tv32 MyBool)) (= (tf3 (CBool tv32)) (TCBool tv32))))
  (assert (forall ((tv23 Term2)) (= (tf2 tv23) (tf3 tv23))))
  (assert (forall ((tv22 Term2)) (= (repr tv22) (tf2 tv22))))
  (assert (= (lq Zero Zero) MyFalse))
  (assert (forall ((x Nat)) (= (lq Zero (Succ x)) MyTrue)))
  (assert (forall ((x Nat)) (= (lq (Succ x) Zero) MyFalse)))
  (assert (forall ((y Nat) (x Nat)) (= (lq (Succ x) (Succ y)) (lq x y))))
  (assert (forall ((y Nat) (x Nat)) (= (ite6 MyTrue x y) x)))
  (assert (forall ((y Nat) (x Nat)) (= (ite6 MyFalse x y) y)))
  (assert (forall ((tv34 Nat) (tv33 Nat)) (= (max tv33 tv34) (ite6 (lq tv33 tv34) tv34 tv33))))
  (assert (forall ((x Nat)) (= (plus Zero x) x)))
  (assert (forall ((y Nat) (x Nat)) (= (plus (Succ x) y) (Succ (plus x y)))))
  (assert (forall ((tv40 Term) (tv39 Term) (tv38 ArithOp)) (= (tf5 (TArithBin tv38 tv39 tv40)) (plus (Succ Zero) (max (tf4 tv39) (tf4 tv40))))))
  (assert (forall ((tv43 Term) (tv42 Term) (tv41 BoolOp)) (= (tf5 (TBoolBin tv41 tv42 tv43)) (plus (Succ Zero) (max (tf4 tv42) (tf4 tv43))))))
  (assert (forall ((tv45 Term) (tv44 ArithOp)) (= (tf5 (TArithUn tv44 tv45)) (plus (Succ Zero) (tf4 tv45)))))
  (assert (forall ((tv47 Term) (tv46 BoolOp)) (= (tf5 (TBoolUn tv46 tv47)) (plus (Succ Zero) (tf4 tv47)))))
  (assert (forall ((tv48 Nat)) (= (tf5 (TVar tv48)) (Succ Zero))))
  (assert (forall ((tv49 Nat)) (= (tf5 (TCInt tv49)) (Succ Zero))))
  (assert (forall ((tv50 MyBool)) (= (tf5 (TCBool tv50)) (Succ Zero))))
  (assert (forall ((tv36 Term)) (= (tf4 tv36) (tf5 tv36))))
  (assert (forall ((tv35 Term)) (= (spec tv35) (tf4 tv35))))
  (assert (forall ((tv56 Term2) (tv55 Term2) (tv54 Op)) (= (tf7 (Bin tv54 tv55 tv56)) (Bin tv54 (tf6 tv55) (tf6 tv56)))))
  (assert (forall ((tv58 Term2) (tv57 Op)) (= (tf7 (Un tv57 tv58)) (Un tv57 (tf6 tv58)))))
  (assert (forall ((tv59 Nat)) (= (tf7 (Var tv59)) (Var tv59))))
  (assert (forall ((tv60 Nat)) (= (tf7 (CInt tv60)) (CInt tv60))))
  (assert (forall ((tv61 MyBool)) (= (tf7 (CBool tv61)) (CBool tv61))))
  (assert (forall ((tv52 Term2)) (= (tf6 tv52) (tf7 tv52))))
  (assert (forall ((tv51 Term2)) (= (target tv51) (tf6 tv51))))
  (assert (forall ((tv62 Term2)) (= (main tv62) (spec (repr (target tv62))))))
  (assert (forall ((tv68 Term2) (tv67 Term2) (tv66 Op)) (= (tf9 (Bin tv66 tv67 tv68)) (plus (Succ Zero) (max (tf8 tv67) (tf8 tv68))))))
  (assert (forall ((tv70 Term2) (tv69 Op)) (= (tf9 (Un tv69 tv70)) (plus (Succ Zero) (tf8 tv70)))))
  (assert (forall ((tv71 Nat)) (= (tf9 (Var tv71)) (Succ Zero))))
  (assert (forall ((tv72 Nat)) (= (tf9 (CInt tv72)) (Succ Zero))))
  (assert (forall ((tv73 MyBool)) (= (tf9 (CBool tv73)) (Succ Zero))))
  (assert (forall ((tv64 Term2)) (= (tf8 tv64) (tf9 tv64))))
  (assert (forall ((tv63 Term2)) (= (targetNew tv63) (tf8 tv63))))
  (assert (forall ((tv74 Term2)) (= (mainNew tv74) (targetNew tv74))))
  (assert (not (forall ((inp0 Term2)) (= (main inp0) (mainNew inp0)))))
  (check-sat)
