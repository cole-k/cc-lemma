  (declare-datatypes () ((MyBool (MyTrue) (MyFalse))))
  (declare-datatypes () ((Unit (Null))))
  (declare-datatypes () ((Nat (Zero) (Succ (proj_Succ_0 Nat)))))
  (declare-datatypes () ((List (Nil (proj_Nil_0 Unit)) (Cons (proj_Cons_0 Nat) (proj_Cons_1 List)))))
  (declare-fun lq (Nat Nat) MyBool)
  (declare-fun ite1 (MyBool Nat Nat) Nat)
  (declare-fun max (Nat Nat) Nat)
  (declare-fun plus (Nat Nat) Nat)
  (declare-fun tf1 (List) Nat)
  (declare-fun tf0 (List) Nat)
  (declare-fun sum (List) Nat)
  (declare-fun tf3 (List) Nat)
  (declare-fun tf2 (List) Nat)
  (declare-fun mts (List) Nat)
  (declare-fun spec (List) Nat)
  (declare-fun tf5 (List) List)
  (declare-fun tf4 (List) List)
  (declare-fun repr (List) List)
  (declare-fun main (List) Nat)
  (declare-datatypes () ((Tuple2 (MakeTuple2 (proj_MakeTuple2_0 Nat) (proj_MakeTuple2_1 Nat)))))
  (declare-fun fst2 (Tuple2) Nat)
  (declare-fun snd2 (Tuple2) Nat)
  (declare-fun tf7 (List) Tuple2)
  (declare-fun tf6 (List) Tuple2)
  (declare-fun reprNew (List) Tuple2)
  (declare-fun mainNew (List) Nat)
  (assert (= (lq Zero Zero) MyFalse))
  (assert (forall ((x Nat)) (= (lq Zero (Succ x)) MyTrue)))
  (assert (forall ((x Nat)) (= (lq (Succ x) Zero) MyFalse)))
  (assert (forall ((y Nat) (x Nat)) (= (lq (Succ x) (Succ y)) (lq x y))))
  (assert (forall ((y Nat) (x Nat)) (= (ite1 MyTrue x y) x)))
  (assert (forall ((y Nat) (x Nat)) (= (ite1 MyFalse x y) y)))
  (assert (forall ((tv1 Nat) (tv0 Nat)) (= (max tv0 tv1) (ite1 (lq tv0 tv1) tv1 tv0))))
  (assert (forall ((x Nat)) (= (plus Zero x) x)))
  (assert (forall ((y Nat) (x Nat)) (= (plus (Succ x) y) (Succ (plus x y)))))
  (assert (forall ((tv5 Unit)) (= (tf1 (Nil tv5)) Zero)))
  (assert (forall ((tv7 List) (tv6 Nat)) (= (tf1 (Cons tv6 tv7)) (plus tv6 (tf0 tv7)))))
  (assert (forall ((tv3 List)) (= (tf0 tv3) (tf1 tv3))))
  (assert (forall ((tv2 List)) (= (sum tv2) (tf0 tv2))))
  (assert (forall ((tv11 Unit)) (= (tf3 (Nil tv11)) Zero)))
  (assert (forall ((tv13 List) (tv12 Nat)) (= (tf3 (Cons tv12 tv13)) (max (plus tv12 (sum tv13)) (tf2 tv13)))))
  (assert (forall ((tv9 List)) (= (tf2 tv9) (tf3 tv9))))
  (assert (forall ((tv8 List)) (= (mts tv8) (tf2 tv8))))
  (assert (forall ((tv14 List)) (= (spec tv14) (mts tv14))))
  (assert (forall ((tv18 Unit)) (= (tf5 (Nil tv18)) (Nil Null))))
  (assert (forall ((tv20 List) (tv19 Nat)) (= (tf5 (Cons tv19 tv20)) (Cons tv19 (tf4 tv20)))))
  (assert (forall ((tv16 List)) (= (tf4 tv16) (tf5 tv16))))
  (assert (forall ((tv15 List)) (= (repr tv15) (tf4 tv15))))
  (assert (forall ((tv21 List)) (= (main tv21) (spec (repr tv21)))))
  (assert (forall ((x1 Nat) (x0 Nat)) (= (fst2 (MakeTuple2 x0 x1)) x0)))
  (assert (forall ((x1 Nat) (x0 Nat)) (= (snd2 (MakeTuple2 x0 x1)) x1)))
  (assert (forall ((tv25 Unit)) (= (tf7 (Nil tv25)) (MakeTuple2 Zero Zero))))
  (assert (forall ((tv27 List) (tv26 Nat)) (= (tf7 (Cons tv26 tv27)) (MakeTuple2 (max (fst2 (tf6 tv27)) (plus tv26 (snd2 (tf6 tv27)))) (plus tv26 (snd2 (tf6 tv27)))))))
  (assert (forall ((tv23 List)) (= (tf6 tv23) (tf7 tv23))))
  (assert (forall ((tv22 List)) (= (reprNew tv22) (tf6 tv22))))
  (assert (forall ((tv28 List)) (= (mainNew tv28) (fst2 (reprNew tv28)))))
  (assert (not (forall ((inp0 List)) (= (main inp0) (mainNew inp0)))))
  (check-sat)
